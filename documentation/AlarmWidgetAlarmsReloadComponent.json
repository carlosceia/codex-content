{"name":"AlarmWidgetAlarmsReloadComponent","id":"component-AlarmWidgetAlarmsReloadComponent-d662d42e0a2dc5ec0c2f3fc35fc5ad36425169aacf77e8a6c4f9fd40955195d9a2f3b22f923869bd16df0f3acda6c215865f540cb3d4488bd994be96d4a54f69","file":"widgets/implementations/alarms/alarm-widget-alarms-reload.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"c8y-alarm-widget-alarms-reload","styleUrls":[],"styles":[],"templateUrl":["./alarm-widget-alarms-reload.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"config","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nAlarm widgets config.\n","description":"<p>Alarm widgets config.</p>\n","line":52,"type":"AlarmListWidgetConfig","decorators":[]},{"name":"isIntervalRefresh","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nState of this boolean depends on an Application Options \"alarmsRefreshType\" setting.\n","description":"<p>State of this boolean depends on an Application Options &quot;alarmsRefreshType&quot; setting.</p>\n","line":44,"type":"boolean","decorators":[]},{"name":"isLoading","deprecated":false,"deprecationMessage":"","jsdoctags":[{"pos":1386,"end":1401,"kind":327,"id":0,"flags":16842752,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":1387,"end":1397,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"inheritdoc"},"comment":""}],"line":56,"type":"BehaviorSubject<boolean>","decorators":[]},{"name":"isRefreshDisabled","deprecated":false,"deprecationMessage":"","jsdoctags":[{"pos":1572,"end":1587,"kind":327,"id":0,"flags":16842752,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":1573,"end":1583,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"inheritdoc"},"comment":""}],"line":64,"type":"boolean","decorators":[]},{"name":"isScrolling","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nIndicates whether the alarm list is being scrolled or not.\n","description":"<p>Indicates whether the alarm list is being scrolled or not.</p>\n","line":60,"type":"boolean","decorators":[]},{"name":"refreshInterval","deprecated":false,"deprecationMessage":"","jsdoctags":[{"pos":1240,"end":1255,"kind":327,"id":0,"flags":16842752,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":1241,"end":1251,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"inheritdoc"},"comment":""}],"line":48,"type":"number","decorators":[]}],"outputsClass":[{"name":"onCountdownEnded","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","rawdescription":"\n\n","description":"","jsdoctags":[{"pos":1640,"end":1655,"kind":327,"id":0,"flags":16842752,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":1641,"end":1651,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"inheritdoc"},"comment":""}],"line":68,"type":"EventEmitter"},{"name":"onRealTimeToggleChanged","defaultValue":"new EventEmitter<boolean>()","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nEmitted to indicate that the widgets realtime button state has changed.\n","description":"<p>Emitted to indicate that the widgets realtime button state has changed.</p>\n","line":72,"type":"EventEmitter<boolean>"}],"propertiesClass":[{"name":"countdownIntervalComponent","deprecated":false,"deprecationMessage":"","type":"CountdownIntervalComponent","indexKey":"","optional":false,"description":"","line":75,"decorators":[{"name":"ViewChild","stringifiedArguments":"CountdownIntervalComponent, {static: false}"}],"modifierKind":[170],"inheritance":{"file":"IntervalBasedReload"}},{"name":"countdownSubscription","deprecated":false,"deprecationMessage":"","type":"Subscription","indexKey":"","optional":false,"description":"<p>Holds the subscription to a countdown observable.</p>\n","line":99,"rawdescription":"\n\nHolds the subscription to a countdown observable.\n","inheritance":{"file":"IntervalBasedReload"}},{"name":"globalAutoRefreshEnabled","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"","line":106},{"name":"hideCountdown","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"","line":79,"rawdescription":"\n\n","modifierKind":[124],"jsdoctags":[{"pos":2024,"end":2039,"kind":327,"id":0,"flags":16842752,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":2025,"end":2035,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"inheritdoc"},"comment":""}],"inheritance":{"file":"IntervalBasedReload"}},{"name":"isIntervalRefreshToggleOn","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"","line":91,"rawdescription":"\n\n","jsdoctags":[{"pos":2289,"end":2304,"kind":327,"id":0,"flags":16842752,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":2290,"end":2300,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"inheritdoc"},"comment":""}],"inheritance":{"file":"IntervalBasedReload"}},{"name":"isNewAlarmMessageCleared","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Indicates whether the countdown has been cleared already.</p>\n","line":87,"rawdescription":"\n\nIndicates whether the countdown has been cleared already.\n"},{"name":"isRealtimeToggleOn","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"<p>Indicates the current state of an realtime toggle button.</p>\n","line":95,"rawdescription":"\n\nIndicates the current state of an realtime toggle button.\n"},{"name":"manuallyDisabledCountdown","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":103,"rawdescription":"\n\n","modifierKind":[124],"jsdoctags":[{"pos":2568,"end":2583,"kind":327,"id":0,"flags":16842752,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":2569,"end":2579,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"inheritdoc"},"comment":""}],"inheritance":{"file":"IntervalBasedReload"}},{"name":"REALTIME_UPDATE_ALARMS_MESSAGE","defaultValue":"this.alarmsViewService.REALTIME_UPDATE_ALARMS_MESSAGE","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":38,"modifierKind":[148]},{"name":"realtimeIconTitle","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Tooltip for a new realtime alarm indicator.</p>\n","line":83,"rawdescription":"\n\nTooltip for a new realtime alarm indicator.\n"},{"name":"toggleCountdownButtonTooltipText","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":105,"inheritance":{"file":"IntervalBasedReload"}},{"name":"WIDGET_TYPE_VALUES","defaultValue":"WIDGET_TYPE_VALUES","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":39,"modifierKind":[148]},{"name":"gainsightService","defaultValue":"inject(GainsightService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":35,"modifierKind":[124],"inheritance":{"file":"IntervalBasedReload"}},{"name":"isAutoRefreshEnabled","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"<p>Indicates whether auto-refresh is enabled for the datapoints reload component that is set in widget config.</p>\n","line":45,"rawdescription":"\n\nIndicates whether auto-refresh is enabled for the datapoints reload component that is set in widget config.\n","inheritance":{"file":"IntervalBasedReload"}},{"name":"isLoading","deprecated":false,"deprecationMessage":"","type":"BehaviorSubject<boolean>","indexKey":"","optional":false,"description":"<p>Current isLoading state. Based on it next countdown cycle is being started.</p>\n","line":54,"rawdescription":"\n\nCurrent isLoading state. Based on it next countdown cycle is being started.\n","modifierKind":[128],"inheritance":{"file":"IntervalBasedReload"}},{"name":"isRefreshDisabled","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"<p>Indicates whether refreshing should be enabled or disabled.\nIt&#39;s &#39;true&#39; when user is not allowed to view a measurement.</p>\n","line":50,"rawdescription":"\n\nIndicates whether refreshing should be enabled or disabled.\nIt's 'true' when user is not allowed to view a measurement.\n","modifierKind":[128],"inheritance":{"file":"IntervalBasedReload"}},{"name":"isScrolling","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"<p>Indicates whether the alarm list is being scrolled or not.</p>\n","line":58,"rawdescription":"\n\nIndicates whether the alarm list is being scrolled or not.\n","modifierKind":[128],"inheritance":{"file":"IntervalBasedReload"}},{"name":"onCountdownEnded","deprecated":false,"deprecationMessage":"","type":"EventEmitter<void>","indexKey":"","optional":false,"description":"<p>Indicates that a countdown cycle has ended.</p>\n","line":66,"rawdescription":"\n\nIndicates that a countdown cycle has ended.\n","modifierKind":[128],"inheritance":{"file":"IntervalBasedReload"}},{"name":"refreshInterval","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"<p>Current refresh interval set in a widget config.</p>\n","line":62,"rawdescription":"\n\nCurrent refresh interval set in a widget config.\n","modifierKind":[128],"inheritance":{"file":"IntervalBasedReload"}}],"methodsClass":[{"name":"autoRefreshList","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":210,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nStops the countdown and triggers a refresh action.\nThis function is responsible for halting the countdown interval component's operation.\nAfter stopping the countdown, it emits an `onCountdownEnded` event.\nThis event is used to inform external components that the countdown has ended,\ntypically prompting them to reload or refresh their data.\n","description":"<p>Stops the countdown and triggers a refresh action.\nThis function is responsible for halting the countdown interval component&#39;s operation.\nAfter stopping the countdown, it emits an <code>onCountdownEnded</code> event.\nThis event is used to inform external components that the countdown has ended,\ntypically prompting them to reload or refresh their data.</p>\n","inheritance":{"file":"IntervalBasedReload"}},{"name":"countdownEnded","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":174,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\n","description":"","jsdoctags":[],"inheritance":{"file":"IntervalBasedReload"}},{"name":"enableCountdown","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":235,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nEnables and starts the countdown timer.\n\nThis method makes the countdown visible (`hideCountdown` is set to false) and then\nstarts the countdown process. It ensures the countdown timer is updated immediately\nby triggering change detection with `cdRef.detectChanges()` before starting the countdown.\nThis method encapsulates the logic required to initiate the countdown timer.\n","description":"<p>Enables and starts the countdown timer.</p>\n<p>This method makes the countdown visible (<code>hideCountdown</code> is set to false) and then\nstarts the countdown process. It ensures the countdown timer is updated immediately\nby triggering change detection with <code>cdRef.detectChanges()</code> before starting the countdown.\nThis method encapsulates the logic required to initiate the countdown timer.</p>\n","inheritance":{"file":"IntervalBasedReload"}},{"name":"getRealtimeIconTitle","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":221,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nSets the tooltip message for a new realtime alarm indicator.\n","description":"<p>Sets the tooltip message for a new realtime alarm indicator.</p>\n","jsdoctags":[{"tagName":{"pos":6032,"end":6039,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Tooltip message.</p>\n"}]},{"name":"ngAfterViewInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":129,"deprecated":false,"deprecationMessage":""},{"name":"ngOnChanges","args":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":142,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":165,"deprecated":false,"deprecationMessage":""},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":118,"deprecated":false,"deprecationMessage":""},{"name":"reload","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":181,"deprecated":false,"deprecationMessage":"","inheritance":{"file":"IntervalBasedReload"}},{"name":"toggleRealtimeState","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":197,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nToggles the real-time state of the component.\n\nThis method switches the `isRealtimeToggleOn` state between true and false.\nWhen the state is toggled, it emits the current state through `onRealTimeToggleChanged` event.\nIt also updates the `realtimeIconTitle` based on the new state.\n","description":"<p>Toggles the real-time state of the component.</p>\n<p>This method switches the <code>isRealtimeToggleOn</code> state between true and false.\nWhen the state is toggled, it emits the current state through <code>onRealTimeToggleChanged</code> event.\nIt also updates the <code>realtimeIconTitle</code> based on the new state.</p>\n"},{"name":"updateCountdownButtonTooltipText","args":[{"name":"customText","type":"string","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":245,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\n","description":"","modifierKind":[124],"jsdoctags":[{"name":"customText","type":"string","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"IntervalBasedReload"}},{"name":"disableCountdown","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":222,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nDisables and hides the countdown timer.\n\nThis method stops the ongoing countdown process by\nstopping the `countdownIntervalComponent` if it exists. It then hides the countdown timer\nby setting `hideCountdown` to true. This method encapsulates the logic required to halt and\nconceal the countdown timer.\n","description":"<p>Disables and hides the countdown timer.</p>\n<p>This method stops the ongoing countdown process by\nstopping the <code>countdownIntervalComponent</code> if it exists. It then hides the countdown timer\nby setting <code>hideCountdown</code> to true. This method encapsulates the logic required to halt and\nconceal the countdown timer.</p>\n","inheritance":{"file":"IntervalBasedReload"}},{"name":"handleScrolling","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":110,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nManages the countdown timer's visibility and state in response to user scrolling.\n\nThis method toggles the countdown timer based on the user's scrolling behavior. It uses\nthe `disableCountdown` and `enableCountdown` methods for handling the countdown state.\n\n- If the user is scrolling down while the countdown is visible (`isScrolling` is true and\n  `hideCountdown` is false), `disableCountdown` is called to stop and hide the countdown,\n  and `isIntervalRefreshToggleOn` is set to false.\n\n- If the user has stopped scrolling, the countdown subscription is closed, and the countdown\n  is hidden (`!isScrolling`, `countdownSubscription?.closed`, `hideCountdown`), `enableCountdown`\n  is called to show and restart the countdown, and `isIntervalRefreshToggleOn` is set to true.\n","description":"<p>Manages the countdown timer&#39;s visibility and state in response to user scrolling.</p>\n<p>This method toggles the countdown timer based on the user&#39;s scrolling behavior. It uses\nthe <code>disableCountdown</code> and <code>enableCountdown</code> methods for handling the countdown state.</p>\n<ul>\n<li><p>If the user is scrolling down while the countdown is visible (<code>isScrolling</code> is true and\n<code>hideCountdown</code> is false), <code>disableCountdown</code> is called to stop and hide the countdown,\nand <code>isIntervalRefreshToggleOn</code> is set to false.</p>\n</li>\n<li><p>If the user has stopped scrolling, the countdown subscription is closed, and the countdown\nis hidden (<code>!isScrolling</code>, <code>countdownSubscription?.closed</code>, <code>hideCountdown</code>), <code>enableCountdown</code>\nis called to show and restart the countdown, and <code>isIntervalRefreshToggleOn</code> is set to true.</p>\n</li>\n</ul>\n","inheritance":{"file":"IntervalBasedReload"}},{"name":"onToggleCountdownButtonState","args":[{"name":"$event","type":"MouseEvent","deprecated":false,"deprecationMessage":""},{"name":"widgetType","type":"WidgetType","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":152,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nHandles the toggle state of the countdown on button click.\n\nThis method is triggered by a mouse event, typically a click on the countdown toggle button.\nIt toggles `isIntervalRefreshToggleOn` to reflect the current state of the countdown timer.\n\n- If `isIntervalRefreshToggleOn` is set to false, indicating that the countdown should be stopped,\n  `disableCountdown` is called, and `manuallyDisabledCountdown` is set to true.\n\n- If `isIntervalRefreshToggleOn` is true and the countdown subscription is closed, indicating that\n  the countdown can be started, `enableCountdown` is called, and `manuallyDisabledCountdown`\n  is set to false.\n\n","description":"<p>Handles the toggle state of the countdown on button click.</p>\n<p>This method is triggered by a mouse event, typically a click on the countdown toggle button.\nIt toggles <code>isIntervalRefreshToggleOn</code> to reflect the current state of the countdown timer.</p>\n<ul>\n<li><p>If <code>isIntervalRefreshToggleOn</code> is set to false, indicating that the countdown should be stopped,\n<code>disableCountdown</code> is called, and <code>manuallyDisabledCountdown</code> is set to true.</p>\n</li>\n<li><p>If <code>isIntervalRefreshToggleOn</code> is true and the countdown subscription is closed, indicating that\nthe countdown can be started, <code>enableCountdown</code> is called, and <code>manuallyDisabledCountdown</code>\nis set to false.</p>\n</li>\n</ul>\n","jsdoctags":[{"name":{"pos":5564,"end":5570,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"$event"},"type":"MouseEvent","deprecated":false,"deprecationMessage":"","tagName":{"pos":5558,"end":5563,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>The MouseEvent that triggered this method.</li>\n</ul>\n"},{"name":{"pos":5628,"end":5638,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"widgetType"},"type":"WidgetType","deprecated":false,"deprecationMessage":"","tagName":{"pos":5622,"end":5627,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>The type of the widget that triggered the event</li>\n</ul>\n"}],"inheritance":{"file":"IntervalBasedReload"}},{"name":"startCountdown","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":193,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nThis function listens for changes in the `isLoading` observable, filtering out any truthy values.\nOnce a falsy value is detected (indicating that loading has finished), it attempts to start the countdown.\n\nIMPORTANT: If the widget's configuration (refreshInterval, check template) is not set prior to executing countdownIntervalComponent?.start,\nthe countdown interval will not start!\n\n                  within the `runInInjectionContext`.\n","description":"<p>This function listens for changes in the <code>isLoading</code> observable, filtering out any truthy values.\nOnce a falsy value is detected (indicating that loading has finished), it attempts to start the countdown.</p>\n<p>IMPORTANT: If the widget&#39;s configuration (refreshInterval, check template) is not set prior to executing countdownIntervalComponent?.start,\nthe countdown interval will not start!</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">              within the `runInInjectionContext`.</code></pre></div>","jsdoctags":[],"inheritance":{"file":"IntervalBasedReload"}}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[],"description":"","rawdescription":"\n","type":"component","assetsDirs":[],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"alarmsViewService","type":"AlarmsViewService","deprecated":false,"deprecationMessage":""},{"name":"cdRef","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":""},{"name":"translateService","type":"TranslateService","deprecated":false,"deprecationMessage":""},{"name":"widgetGlobalAutoRefreshService","type":"WidgetGlobalAutoRefreshService","deprecated":false,"deprecationMessage":""},{"name":"gainsightService","type":"GainsightService","deprecated":false,"deprecationMessage":""}],"line":106,"jsdoctags":[{"name":"alarmsViewService","type":"AlarmsViewService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"cdRef","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"translateService","type":"TranslateService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"widgetGlobalAutoRefreshService","type":"WidgetGlobalAutoRefreshService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"gainsightService","type":"GainsightService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":["IntervalBasedReload"],"implements":["OnInit","AfterViewInit","OnChanges","OnDestroy"]}