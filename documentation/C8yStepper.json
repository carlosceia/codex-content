{"name":"C8yStepper","id":"component-C8yStepper-f7049b3faeb657abc74755c0382f4a304e5c4e0fa9b853300b08b055da70ab50c4757d048d80ff08327de76debb47ecfe48af3477b11a484375c335cd335ecb3","file":"core/stepper/stepper.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[{"name":"{ provide: CdkStepper, useExisting: C8yStepper }"},{"name":"{ provide: PRODUCT_EXPERIENCE_EVENT_SOURCE, useExisting: forwardRef(() => C8yStepper) }"}],"selector":"c8y-stepper","styleUrls":[],"styles":[],"templateUrl":["./stepper.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"customClasses","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nOptional\nPossibility to add any kind of custom css classes to the step-header\n","description":"<p>Optional\nPossibility to add any kind of custom css classes to the step-header</p>\n","line":130,"type":"string[]","decorators":[]},{"name":"disableDefaultIcons","defaultValue":"{ edit: true, done: true }","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nOptional\nIndicator if icons for edit and done state should be shown in step-header buttons\n","description":"<p>Optional\nIndicator if icons for edit and done state should be shown in step-header buttons</p>\n","line":119,"type":"literal type","decorators":[]},{"name":"disableProgressButtons","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nOptional\nDisable/enable navigation by stepper progress buttons\ndefault: false\n","description":"<p>Optional\nDisable/enable navigation by stepper progress buttons\ndefault: false</p>\n","line":125,"type":"boolean","decorators":[]},{"name":"hideStepProgress","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nOptional\nPossibility to hide the stepper progress completely.\n","description":"<p>Optional\nPossibility to hide the stepper progress completely.</p>\n","line":135,"type":"boolean","decorators":[]},{"name":"useStepLabelsAsTitlesOnly","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nOptional\nIf `true`, the label defined on a cdk-step won't get rendered below each step-header button.\nInstead, it will be used as a title only.\n","description":"<p>Optional\nIf <code>true</code>, the label defined on a cdk-step won&#39;t get rendered below each step-header button.\nInstead, it will be used as a title only.</p>\n","line":141,"type":"boolean","decorators":[]}],"outputsClass":[{"name":"onStepChange","defaultValue":"new EventEmitter<number>()","deprecated":true,"deprecationMessage":": Use the default `selectionChange` event emitter.","rawdescription":"\n\nWill emit the step index number whenever a step-header button was clicked\nIt listens to the stepIndex Subject.\n","description":"<p>Will emit the step index number whenever a step-header button was clicked\nIt listens to the stepIndex Subject.</p>\n","jsdoctags":[{"pos":5568,"end":5633,"kind":331,"id":0,"flags":16842752,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":5569,"end":5579,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"deprecated"},"comment":"<p>: Use the default <code>selectionChange</code> event emitter.</p>\n"}],"line":147,"type":"EventEmitter"}],"propertiesClass":[{"name":"_iconOverrides","defaultValue":"{}","deprecated":false,"deprecationMessage":"","type":"literal type","indexKey":"","optional":false,"description":"<p>Consumer-specified template-refs to be used to override the header icons.</p>\n","line":177,"rawdescription":"\nConsumer-specified template-refs to be used to override the header icons."},{"name":"_icons","deprecated":false,"deprecationMessage":"","type":"QueryList<C8yStepperIcon>","indexKey":"","optional":false,"description":"<p>Holding a QueryList of C8yStepperIcons\nThese are templateRefs which overrides any step-header button icon with matching state of cdk-step</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-typescript\">&lt;!-- override icons --&gt;\n &lt;ng-template c8yStepperIcon=&quot;final&quot;&gt;\n  &lt;span [c8yIcon]=&quot;&#39;hand-peace-o&#39;&quot;&gt;&lt;/span&gt;\n &lt;/ng-template&gt;\n\n&lt;cdk-step state=&quot;final&quot; label=&quot;Job done!&quot;&gt;\n &lt;div class=&quot;m-l-40 m-r-40 m-t-32&quot;&gt;\n   &lt;h4 class=&quot;p-b-32&quot; style=&quot;text-align: center;&quot; translate&gt;\n    Your Superhero is now ready to save the world!\n  &lt;/h4&gt;\n &lt;/div&gt;\n &lt;c8y-stepper-buttons\n   [hidden]=&quot;!isModal&quot;\n   (onBack)=&quot;close()&quot;\n   [labels]=&quot;{ back: &#39;Got it!&#39; }&quot;\n &gt;&lt;/c8y-stepper-buttons&gt;\n &lt;c8y-stepper-buttons [hidden]=&quot;isModal&quot;&gt;&lt;/c8y-stepper-buttons&gt;\n&lt;/cdk-step&gt;</code></pre></div>","line":174,"rawdescription":"\n\nHolding a QueryList of C8yStepperIcons\nThese are templateRefs which overrides any step-header button icon with matching state of cdk-step\n\n```typescript\n<!-- override icons -->\n <ng-template c8yStepperIcon=\"final\">\n  <span [c8yIcon]=\"'hand-peace-o'\"></span>\n </ng-template>\n\n<cdk-step state=\"final\" label=\"Job done!\">\n <div class=\"m-l-40 m-r-40 m-t-32\">\n   <h4 class=\"p-b-32\" style=\"text-align: center;\" translate>\n    Your Superhero is now ready to save the world!\n  </h4>\n </div>\n <c8y-stepper-buttons\n   [hidden]=\"!isModal\"\n   (onBack)=\"close()\"\n   [labels]=\"{ back: 'Got it!' }\"\n ></c8y-stepper-buttons>\n <c8y-stepper-buttons [hidden]=\"isModal\"></c8y-stepper-buttons>\n</cdk-step>\n```\n","decorators":[{"name":"ContentChildren","stringifiedArguments":"C8yStepperIcon, {descendants: true}"}],"modifierKind":[170]},{"name":"productExperienceEvent","deprecated":false,"deprecationMessage":"","type":"ProductExperienceEvent","indexKey":"","optional":false,"description":"","line":179}],"methodsClass":[{"name":"getIndicatorType","args":[{"name":"index","type":"number","deprecated":false,"deprecationMessage":""},{"name":"state","type":"StepState","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"StepState","typeParameters":[],"line":221,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nManipulates the state based on the disabledDefaultIcons Input()\nChanging edit or done to false will change the icons within step-header buttons\n","description":"<p>Manipulates the state based on the disabledDefaultIcons Input()\nChanging edit or done to false will change the icons within step-header buttons</p>\n","jsdoctags":[{"name":{"pos":7794,"end":7799,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"index"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":7788,"end":7793,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>step index</p>\n"},{"name":{"pos":7823,"end":7828,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"state"},"type":"StepState","deprecated":false,"deprecationMessage":"","tagName":{"pos":7817,"end":7822,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>step state, like &#39;done&#39;, &#39;edit&#39;, &#39;error&#39;</p>\n"}]},{"name":"setIndex","args":[{"name":"index","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":250,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nPushes the step index to the subject\n","description":"<p>Pushes the step index to the subject</p>\n","jsdoctags":[{"name":{"pos":8525,"end":8530,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"index"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":8519,"end":8524,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>step index</p>\n"}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"NgIf"},{"name":"NgClass"},{"name":"NgFor"},{"name":"C8yStepperProgress"},{"name":"NgTemplateOutlet"},{"name":"C8yTranslatePipe","type":"pipe"}],"description":"<p><code>C8yStepper</code> extends the <code>CdkStepper</code>. You can use cdk based functionality and inputs.\nAdditional to that you are able to modify the behavior and also the look and feel when\nusing the <code>C8yStepper</code>.</p>\n<p>The <code>C8yStepper</code> is used to present any step-based process to the user.\nA stepper, <code>C8yStepper</code> and/or <code>CdkStepper</code> is the parent of cdk-steps.\nEach cdk-step represents one step in the whole process that you want to provide to the user.</p>\n<p>The <code>C8yStepper</code> will create, based on the given <code>cdk-steps</code>, a kind of stepper-progress which looks like this:\n<code>(1)---(2)---(3)---(n)</code>\nThe stepper will handle the state of each step and provides styles for active steps, done-steps or in edit-mode.\nYou are able to override icons for each step in the stepper-progress with a template. You are also able to activate\ndefault-icons for states like &#39;edit&#39; and &#39;done&#39;.</p>\n<p>To force users through every provided step, set the stepper to &#39;linear&#39;.\nThis will disable the possibility to move for example from step one to step three.</p>\n<p>Whenever it comes to validation try to use formGroups. It is possible to\nassign a <code>formGroup</code> to a <code>cdk-step</code> input called <code>[stepControl]</code>, which automatically respects the\nvalidation-rules that you created for this <code>formGroup</code>. If fields are required but not filled or\nany other validation, like a pattern, is not matched the <code>formGroup</code> will be invalid. In this case\nstepping in a linear stepper to the next step gets impossible.</p>\n<p>If there is the need to execute asynchronous code you have at least two possibilities.\nFirst: As you learned, a cdk-step works with <code>formGroups</code> and <code>Validators</code>, so you are able to use\nasyncValidators as well.\nSecond: The <code>C8yStepper</code> provides an event-emitter <code>onStepChange</code> which is called whenever a step-button <code>(1)--(2)--(n)</code>\nin the stepper-progress is clicked. The event of this emitter holds the index of the step as number. You can\nuse this <code>EventEmitter</code> to call for example a custom navigate-method which performs first any async-call and then moves\non to the given step.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-typescript\">&lt;c8y-stepper\n(onStepChange)=&quot;navigate($event)&quot;\n[disableDefaultIcons]=&quot;{ edit: true, done: false }&quot;\n[customClasses]=&quot;[&#39;m-l-40&#39;, &#39;m-r-40&#39;, &#39;m-t-32&#39;]&quot;\nlinear\n&gt;\n&lt;!-- override icons --&gt;\n&lt;ng-template c8yStepperIcon=&quot;final&quot;&gt;\n  &lt;span [c8yIcon]=&quot;&#39;hand-peace-o&#39;&quot;&gt;&lt;/span&gt;\n&lt;/ng-template&gt;\n\n&lt;cdk-step [stepControl]=&quot;formGroupStepOne&quot; label=&quot;Name of the hero&quot;&gt;\n  &lt;div class=&quot;m-l-40 m-r-40 m-t-32&quot;&gt;\n    &lt;h4 class=&quot;p-b-8&quot; translate&gt;What is the name of your hero?&lt;/h4&gt;\n    &lt;c8y-form-group&gt;\n     &lt;div [formGroup]=&quot;formGroupStepOne&quot;&gt;\n      &lt;input\n        class=&quot;form-control&quot;\n        type=&quot;text&quot;\n        formControlName=&quot;name&quot;\n        placeholder=&quot;Mister X&quot;\n        #nameRef\n        required\n      /&gt;\n      &lt;c8y-messages&gt;\n        &lt;c8y-message *ngIf=&quot;!formGroupStepOne.untouched &amp;&amp; !nameRef.value&quot; translate\n          &gt;Enter the name of the Superhero&lt;/c8y-message\n        &gt;\n      &lt;/c8y-messages&gt;\n     &lt;/div&gt;\n    &lt;/c8y-form-group&gt;\n  &lt;/div&gt;\n  &lt;c8y-stepper-buttons&gt;&lt;/c8y-stepper-buttons&gt;\n&lt;/cdk-step&gt;\n&lt;cdk-step&gt;\n ...\n&lt;/cdk-step state=&quot;final&quot;&gt;\n&lt;/c8y-stepper&gt;</code></pre></div>","rawdescription":"\n\n`C8yStepper` extends the `CdkStepper`. You can use cdk based functionality and inputs.\nAdditional to that you are able to modify the behavior and also the look and feel when\nusing the `C8yStepper`.\n\nThe `C8yStepper` is used to present any step-based process to the user.\nA stepper, `C8yStepper` and/or `CdkStepper` is the parent of cdk-steps.\nEach cdk-step represents one step in the whole process that you want to provide to the user.\n\nThe `C8yStepper` will create, based on the given `cdk-steps`, a kind of stepper-progress which looks like this:\n`(1)---(2)---(3)---(n)`\nThe stepper will handle the state of each step and provides styles for active steps, done-steps or in edit-mode.\nYou are able to override icons for each step in the stepper-progress with a template. You are also able to activate\ndefault-icons for states like 'edit' and 'done'.\n\nTo force users through every provided step, set the stepper to 'linear'.\nThis will disable the possibility to move for example from step one to step three.\n\nWhenever it comes to validation try to use formGroups. It is possible to\nassign a `formGroup` to a `cdk-step` input called `[stepControl]`, which automatically respects the\nvalidation-rules that you created for this `formGroup`. If fields are required but not filled or\nany other validation, like a pattern, is not matched the `formGroup` will be invalid. In this case\nstepping in a linear stepper to the next step gets impossible.\n\nIf there is the need to execute asynchronous code you have at least two possibilities.\nFirst: As you learned, a cdk-step works with `formGroups` and `Validators`, so you are able to use\nasyncValidators as well.\nSecond: The `C8yStepper` provides an event-emitter `onStepChange` which is called whenever a step-button `(1)--(2)--(n)`\nin the stepper-progress is clicked. The event of this emitter holds the index of the step as number. You can\nuse this `EventEmitter` to call for example a custom navigate-method which performs first any async-call and then moves\non to the given step.\n\n```typescript\n<c8y-stepper\n(onStepChange)=\"navigate($event)\"\n[disableDefaultIcons]=\"{ edit: true, done: false }\"\n[customClasses]=\"['m-l-40', 'm-r-40', 'm-t-32']\"\nlinear\n>\n<!-- override icons -->\n<ng-template c8yStepperIcon=\"final\">\n  <span [c8yIcon]=\"'hand-peace-o'\"></span>\n</ng-template>\n\n<cdk-step [stepControl]=\"formGroupStepOne\" label=\"Name of the hero\">\n  <div class=\"m-l-40 m-r-40 m-t-32\">\n    <h4 class=\"p-b-8\" translate>What is the name of your hero?</h4>\n    <c8y-form-group>\n     <div [formGroup]=\"formGroupStepOne\">\n      <input\n        class=\"form-control\"\n        type=\"text\"\n        formControlName=\"name\"\n        placeholder=\"Mister X\"\n        #nameRef\n        required\n      />\n      <c8y-messages>\n        <c8y-message *ngIf=\"!formGroupStepOne.untouched && !nameRef.value\" translate\n          >Enter the name of the Superhero</c8y-message\n        >\n      </c8y-messages>\n     </div>\n    </c8y-form-group>\n  </div>\n  <c8y-stepper-buttons></c8y-stepper-buttons>\n</cdk-step>\n<cdk-step>\n ...\n</cdk-step state=\"final\">\n</c8y-stepper>\n```\n","type":"component","assetsDirs":[],"extends":["CdkStepper"],"implements":["AfterContentInit","OnDestroy","ProductExperienceEventSource"]}