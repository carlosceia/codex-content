{"name":"DataGridComponent","id":"component-DataGridComponent-dc418d9b7afc7c0dbcb23c828aacd56eb9c67c10f8d823b4645aa2fa25abff58e6549f06898761063795a7519b3ccc7eca28bd8dd146e63b4416cfe89281f060","file":"core/data-grid/data-grid.component.ts","encapsulation":[],"entryComponents":[],"host":{},"inputs":[],"outputs":[],"providers":[{"name":"{\n    provide: PRODUCT_EXPERIENCE_EVENT_SOURCE, useExisting: forwardRef(() => DataGridComponent)\n}","type":"component"}],"selector":"c8y-data-grid","styleUrls":[],"styles":[],"templateUrl":["./data-grid.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"actionControls","deprecated":false,"deprecationMessage":"","rawdescription":"\nSets action controls (actions available for individual items).","description":"<p>Sets action controls (actions available for individual items).</p>\n","line":332,"type":"ActionControl[]","decorators":[]},{"name":"activeClassName","defaultValue":"'active'","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nSets the class name used for active rows (last clicked).\nSet empty string to disable appending active class to grid rows.\n","description":"<p>Sets the class name used for active rows (last clicked).\nSet empty string to disable appending active class to grid rows.</p>\n","line":367,"type":"string","decorators":[]},{"name":"bulkActionControls","deprecated":false,"deprecationMessage":"","rawdescription":"\nSets bulk action controls (actions available for items selected by user).","description":"<p>Sets bulk action controls (actions available for items selected by user).</p>\n","line":339,"type":"BulkActionControl[]","decorators":[]},{"name":"columns","deprecated":false,"deprecationMessage":"","rawdescription":"\nThe list of columns to be displayed in the grid.","description":"<p>The list of columns to be displayed in the grid.</p>\n","line":248,"type":"Column[]","decorators":[]},{"name":"configureColumnsEnabled","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\nDetermines if custom columns button will be enabled.","description":"<p>Determines if custom columns button will be enabled.</p>\n","line":356,"type":"boolean","decorators":[]},{"name":"displayOptions","deprecated":false,"deprecationMessage":"","rawdescription":"\nSets display options.","description":"<p>Sets display options.</p>\n","line":325,"type":"DisplayOptions","decorators":[]},{"name":"expandableRows","defaultValue":"'NONE'","deprecated":false,"deprecationMessage":"","rawdescription":"\nDetermines if the rows of the data grid will be expandable.\nPossible values:\n- `NONE` - no expandable rows (default value)\n- `SYNC` - additional column with expand button is displayed and expandable rows are expanding synchronously when button is clicked\n- `ASYNC` - additional column with expand button is displayed and expandable rows are expanding asynchronously when button is clicked\n","description":"<p>Determines if the rows of the data grid will be expandable.\nPossible values:</p>\n<ul>\n<li><code>NONE</code> - no expandable rows (default value)</li>\n<li><code>SYNC</code> - additional column with expand button is displayed and expandable rows are expanding synchronously when button is clicked</li>\n<li><code>ASYNC</code> - additional column with expand button is displayed and expandable rows are expanding asynchronously when button is clicked</li>\n</ul>\n","line":375,"type":"\"NONE\" | \"SYNC\" | \"ASYNC\"","decorators":[]},{"name":"headerActionControls","deprecated":false,"deprecationMessage":"","rawdescription":"\nSets header action controls (actions available from data grid header).","description":"<p>Sets header action controls (actions available from data grid header).</p>\n","line":346,"type":"HeaderActionControl[]","decorators":[]},{"name":"hideReload","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\nDetermines if the Reload button will be hidden.","description":"<p>Determines if the Reload button will be hidden.</p>\n","line":378,"type":"boolean","decorators":[]},{"name":"infiniteScroll","deprecated":false,"deprecationMessage":"","rawdescription":"\nSets load more mode.","description":"<p>Sets load more mode.</p>\n","line":281,"type":"LoadMoreMode","decorators":[]},{"name":"loadingItemsLabel","defaultValue":"gettext('Loading itemsâ€¦')","deprecated":false,"deprecationMessage":"","rawdescription":"\nThe label for loading indicator.","description":"<p>The label for loading indicator.</p>\n","line":239,"type":"string","decorators":[]},{"name":"loadMoreItemsLabel","defaultValue":"gettext('Load more items')","deprecated":false,"deprecationMessage":"","rawdescription":"\nThe label for load more button.","description":"<p>The label for load more button.</p>\n","line":237,"type":"string","decorators":[]},{"name":"pagination","deprecated":false,"deprecationMessage":"","rawdescription":"\nPagination settings, e.g. allows for setting current page or page size.","description":"<p>Pagination settings, e.g. allows for setting current page or page size.</p>\n","line":274,"type":"Pagination","decorators":[]},{"name":"refresh","deprecated":false,"deprecationMessage":"","rawdescription":"\nTakes an event emitter. When an event is emitted, the grid will be reloaded.","description":"<p>Takes an event emitter. When an event is emitted, the grid will be reloaded.</p>\n","line":243,"type":"EventEmitter<void>","decorators":[]},{"name":"rows","deprecated":false,"deprecationMessage":"","rawdescription":"\nThe list of rows to be displayed in the grid (used for client side data).","description":"<p>The list of rows to be displayed in the grid (used for client side data).</p>\n","line":254,"type":"Row[]","decorators":[]},{"name":"searchText","defaultValue":"''","deprecated":false,"deprecationMessage":"","rawdescription":"\nSets initial search text.","description":"<p>Sets initial search text.</p>\n","line":352,"type":"string","decorators":[]},{"name":"selectable","deprecated":false,"deprecationMessage":"","rawdescription":"\nDetermines whether items can be selected by clicking a checkbox in the first column.","description":"<p>Determines whether items can be selected by clicking a checkbox in the first column.</p>\n","line":298,"type":"boolean","decorators":[]},{"name":"selectionPrimaryKey","deprecated":false,"deprecationMessage":"","rawdescription":"\nDetermines which item's property will be used to distinguish selection status.","description":"<p>Determines which item&#39;s property will be used to distinguish selection status.</p>\n","line":312,"type":"string","decorators":[]},{"name":"serverSideDataCallback","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nSets a callback function which will be invoked whenever data needs to be loaded from server.\nThe function should take [[DataSourceModifier]] and return [[ServerSideDataResult]].\n","description":"<p>Sets a callback function which will be invoked whenever data needs to be loaded from server.\nThe function should take [[DataSourceModifier]] and return [[ServerSideDataResult]].</p>\n","line":291,"type":"ServerSideDataCallback","decorators":[]},{"name":"showCounterWarning","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\nShows the warning for the sub-assets counter","description":"<p>Shows the warning for the sub-assets counter</p>\n","line":360,"type":"boolean","decorators":[]},{"name":"showSearch","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\nDetermines whether text search input is shown in the grid's header.","description":"<p>Determines whether text search input is shown in the grid&#39;s header.</p>\n","line":241,"type":"boolean","decorators":[]},{"name":"singleSelection","deprecated":false,"deprecationMessage":"","rawdescription":"\nRestricts selection to a single row only. Selection column displays radio button instead of checkboxes","description":"<p>Restricts selection to a single row only. Selection column displays radio button instead of checkboxes</p>\n","line":305,"type":"boolean","decorators":[]},{"name":"title","defaultValue":"gettext('Items')","deprecated":false,"deprecationMessage":"","rawdescription":"\nThe title for the data grid, it's displayed in the grid's header.","description":"<p>The title for the data grid, it&#39;s displayed in the grid&#39;s header.</p>\n","line":235,"type":"string","decorators":[]}],"outputsClass":[{"name":"itemsSelect","defaultValue":"new EventEmitter<string[]>()","deprecated":false,"deprecationMessage":"","rawdescription":"\nEmits an event when items selection changes. The array contains keys of selected items (key property is defined by `selectionPrimaryKey`).","description":"<p>Emits an event when items selection changes. The array contains keys of selected items (key property is defined by <code>selectionPrimaryKey</code>).</p>\n","line":399,"type":"EventEmitter"},{"name":"onAddCustomColumn","defaultValue":"new EventEmitter<CustomColumnConfig>()","deprecated":false,"deprecationMessage":"","rawdescription":"\nEmits an event when a custom column is added","description":"<p>Emits an event when a custom column is added</p>\n","line":403,"type":"EventEmitter"},{"name":"onBeforeFilter","defaultValue":"new EventEmitter<object>()","deprecated":false,"deprecationMessage":"","rawdescription":"\nEmits an event before the filter is applied.","description":"<p>Emits an event before the filter is applied.</p>\n","line":389,"type":"EventEmitter"},{"name":"onBeforeSearch","defaultValue":"new EventEmitter<string>()","deprecated":false,"deprecationMessage":"","rawdescription":"\nEmits an event before the search is performed.","description":"<p>Emits an event before the search is performed.</p>\n","line":391,"type":"EventEmitter"},{"name":"onColumnFilterReset","defaultValue":"new EventEmitter<Column>()","deprecated":false,"deprecationMessage":"","rawdescription":"\nEmits an event after the column filter has been reset","description":"<p>Emits an event after the column filter has been reset</p>\n","line":407,"type":"EventEmitter"},{"name":"onColumnReordered","defaultValue":"new EventEmitter<GridConfig>()","deprecated":false,"deprecationMessage":"","rawdescription":"\nEmits an event when column order has been changed","description":"<p>Emits an event when column order has been changed</p>\n","line":413,"type":"EventEmitter"},{"name":"onColumnVisibilityChange","defaultValue":"new EventEmitter<GridConfig>()","deprecated":false,"deprecationMessage":"","rawdescription":"\nEmits an event when column order has been changed","description":"<p>Emits an event when column order has been changed</p>\n","line":415,"type":"EventEmitter"},{"name":"onConfigChange","defaultValue":"new EventEmitter<GridConfig>()","deprecated":false,"deprecationMessage":"","rawdescription":"\nEmits an event when grid's configuration is changed.","description":"<p>Emits an event when grid&#39;s configuration is changed.</p>\n","line":387,"type":"EventEmitter"},{"name":"onFilter","defaultValue":"new EventEmitter<{\n    columnName?: string;\n    dropdown?: BsDropdownDirective;\n    filteringModifier?: Filter;\n  }>()","deprecated":false,"deprecationMessage":"","rawdescription":"\nEmits an event when a filter is applied in a column.","description":"<p>Emits an event when a filter is applied in a column.</p>\n","line":393,"type":"EventEmitter"},{"name":"onPageSizeChange","defaultValue":"new EventEmitter<GridConfig>()","deprecated":false,"deprecationMessage":"","rawdescription":"\nEmits an event when page size has been changed","description":"<p>Emits an event when page size has been changed</p>\n","line":411,"type":"EventEmitter"},{"name":"onReload","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","rawdescription":"\nEmits an event when reload button is clicked.","description":"<p>Emits an event when reload button is clicked.</p>\n","line":401,"type":"EventEmitter"},{"name":"onRemoveCustomColumn","defaultValue":"new EventEmitter<Column>()","deprecated":false,"deprecationMessage":"","rawdescription":"\nEmits an event when a custom column is removed","description":"<p>Emits an event when a custom column is removed</p>\n","line":405,"type":"EventEmitter"},{"name":"onSort","defaultValue":"new EventEmitter<GridConfig>()","deprecated":false,"deprecationMessage":"","rawdescription":"\nEmits an event when column sorting has been changed","description":"<p>Emits an event when column sorting has been changed</p>\n","line":409,"type":"EventEmitter"},{"name":"rowClick","defaultValue":"new EventEmitter<object>()","deprecated":false,"deprecationMessage":"","rawdescription":"\nEmits an event when a row is clicked.","description":"<p>Emits an event when a row is clicked.</p>\n","line":385,"type":"EventEmitter"},{"name":"rowMouseLeave","defaultValue":"new EventEmitter<object>()","deprecated":false,"deprecationMessage":"","rawdescription":"\nEmits an event when mouse leaves a row.","description":"<p>Emits an event when mouse leaves a row.</p>\n","line":383,"type":"EventEmitter"},{"name":"rowMouseOver","defaultValue":"new EventEmitter<object>()","deprecated":false,"deprecationMessage":"","rawdescription":"\nEmits an event when mouse is over a row.","description":"<p>Emits an event when mouse is over a row.</p>\n","line":381,"type":"EventEmitter"}],"propertiesClass":[{"name":"actionControls","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"ActionControl[]","indexKey":"","optional":false,"description":"","line":329},{"name":"builtInActionType","defaultValue":"{\n    Edit: BuiltInActionType.Edit,\n    Delete: BuiltInActionType.Delete,\n    Export: BuiltInActionType.Export\n  }","deprecated":false,"deprecationMessage":"","type":"object","indexKey":"","optional":false,"description":"","line":455},{"name":"bulkActionControls","deprecated":false,"deprecationMessage":"","type":"BulkActionControl[]","indexKey":"","optional":false,"description":"","line":336},{"name":"columnNames","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"[]","indexKey":"","optional":false,"description":"","line":431},{"name":"columnRenderers","deprecated":false,"deprecationMessage":"","type":"QueryList<ColumnDirective>","indexKey":"","optional":false,"description":"","line":417,"decorators":[{"name":"ContentChildren","stringifiedArguments":"ColumnDirective"}],"modifierKind":[170]},{"name":"columns","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"Column[]","indexKey":"","optional":false,"description":"","line":245},{"name":"columnsWithFiltersApplied","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"Column[]","indexKey":"","optional":false,"description":"","line":441},{"name":"configurationStrategy","deprecated":false,"deprecationMessage":"","type":"DataGridConfigurationStrategy","indexKey":"","optional":false,"description":"","line":533,"decorators":[{"name":"Optional","stringifiedArguments":""},{"name":"Inject","stringifiedArguments":"DATA_GRID_CONFIGURATION_STRATEGY"}],"modifierKind":[170,170,125]},{"name":"confirmRemoveColumnButtons","defaultValue":"[\n    {\n      label: gettext('Cancel'),\n      action: () => Promise.resolve(false)\n    },\n    {\n      label: gettext('Remove`column,verb`'),\n      status: 'danger',\n      action: () => Promise.resolve(true)\n    }\n  ]","deprecated":false,"deprecationMessage":"","type":"PopoverConfirmButtons[]","indexKey":"","optional":false,"description":"","line":461},{"name":"currentPageSelectionState","defaultValue":"{\n    allSelected: false,\n    allDeselected: true\n  }","deprecated":false,"deprecationMessage":"","type":"object","indexKey":"","optional":false,"description":"","line":450},{"name":"dataSource","defaultValue":"new GridDataSource()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":250},{"name":"displayOptions","defaultValue":"{\n    striped: true,\n    bordered: false,\n    gridHeader: true,\n    filter: true,\n    hover: true\n  }","deprecated":false,"deprecationMessage":"","type":"DisplayOptions","indexKey":"","optional":false,"description":"","line":316},{"name":"emptyState","deprecated":false,"deprecationMessage":"","type":"EmptyStateContextDirective","indexKey":"","optional":false,"description":"","line":427,"decorators":[{"name":"ContentChild","stringifiedArguments":"EmptyStateContextDirective"}],"modifierKind":[170]},{"name":"emptyStateContext$","deprecated":false,"deprecationMessage":"","type":"Observable<DataSourceStats>","indexKey":"","optional":false,"description":"","line":474},{"name":"expandableRow","deprecated":false,"deprecationMessage":"","type":"ExpandableRowDirective","indexKey":"","optional":false,"description":"","line":420,"decorators":[{"name":"ContentChild","stringifiedArguments":"ExpandableRowDirective"}],"modifierKind":[170]},{"name":"expandedRows","defaultValue":"new Map()","deprecated":false,"deprecationMessage":"","type":"Map<Row | literal type>","indexKey":"","optional":false,"description":"<p>A map of rows which have been expanded.</p>\n","line":479,"rawdescription":"\n\nA map of rows which have been expanded.\n"},{"name":"filteringApplied","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":440},{"name":"filteringLabelsParams","defaultValue":"{\n    filteredItemsCount: 0,\n    allItemsCount: 0\n  }","deprecated":false,"deprecationMessage":"","type":"object","indexKey":"","optional":false,"description":"","line":258},{"name":"filtersHelpPopoverHtml","defaultValue":"gettext('Click the column headers to apply filters.')","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":491},{"name":"headerActionControls","deprecated":false,"deprecationMessage":"","type":"HeaderActionControl[]","indexKey":"","optional":false,"description":"","line":343},{"name":"hidePagination$","defaultValue":"this.totalPagesCount$.pipe(\n    map(totalPagesCount => totalPagesCount <= 1),\n    delay(0) // prevents ExpressionChangedAfterItHasBeenCheckedError\n  )","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":444},{"name":"infiniteScroll","deprecated":false,"deprecationMessage":"","type":"LoadMoreMode","indexKey":"","optional":false,"description":"","line":278},{"name":"infiniteScrollContainer","deprecated":false,"deprecationMessage":"","type":"ViewContainerRef","indexKey":"","optional":false,"description":"","line":425,"decorators":[{"name":"ViewChild","stringifiedArguments":"'infiniteScrollContainer', {static: false, read: ViewContainerRef}"}],"modifierKind":[170]},{"name":"isConfigContextKnown","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":473},{"name":"isRowExpanded","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":695},{"name":"lastClickedRow","deprecated":false,"deprecationMessage":"","type":"Row","indexKey":"","optional":false,"description":"","line":269},{"name":"loadMoreComponent","deprecated":false,"deprecationMessage":"","type":"LoadMoreComponent","indexKey":"","optional":false,"description":"","line":429},{"name":"minPossiblePageSize","defaultValue":"Math.min(...this.possiblePageSizes)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":271,"modifierKind":[148]},{"name":"pagination","deprecated":false,"deprecationMessage":"","type":"Pagination","indexKey":"","optional":false,"description":"","line":263},{"name":"paginationLabelParams","defaultValue":"{\n    pageFirstItemIdx: 0,\n    pageLastItemIdx: 0,\n    itemsTotal: 0\n  }","deprecated":false,"deprecationMessage":"","type":"object","indexKey":"","optional":false,"description":"","line":264},{"name":"possiblePageSizes","defaultValue":"[25, 50, 100]","deprecated":false,"deprecationMessage":"","type":"number[]","indexKey":"","optional":false,"description":"","line":270,"modifierKind":[148]},{"name":"productExperienceEvent","defaultValue":"{ eventName: PX_EVENT_NAME }","deprecated":false,"deprecationMessage":"","type":"ProductExperienceEvent","indexKey":"","optional":false,"description":"<p>Product experience constants declarations</p>\n","line":482,"rawdescription":"\nProduct experience constants declarations"},{"name":"PX_ACTIONS","defaultValue":"PX_ACTIONS","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":483},{"name":"resizeHandleContainerMouseMove$","defaultValue":"new EventEmitter<MouseEvent>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":488},{"name":"resizeHandleContainerMouseUp$","defaultValue":"new EventEmitter<MouseEvent>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":489},{"name":"resizeHandleMouseDown$","defaultValue":"new EventEmitter<{ event: MouseEvent; targetColumnName: string }>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":487},{"name":"rows","deprecated":false,"deprecationMessage":"","type":"Row[]","indexKey":"","optional":false,"description":"","line":251},{"name":"scrollContainer","deprecated":false,"deprecationMessage":"","type":"ElementRef","indexKey":"","optional":false,"description":"","line":422,"decorators":[{"name":"ViewChild","stringifiedArguments":"'scroll', {static: true}"}],"modifierKind":[170]},{"name":"searchText$","defaultValue":"new EventEmitter<string>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":439},{"name":"selectable","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":295},{"name":"selectedItemIds","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"string[]","indexKey":"","optional":false,"description":"","line":449},{"name":"selectionPrimaryKey","defaultValue":"'id'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":309},{"name":"serverSideDataCallback","deprecated":false,"deprecationMessage":"","type":"ServerSideDataCallback","indexKey":"","optional":false,"description":"","line":285},{"name":"singleSelection","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":302},{"name":"sortColumnTitle","defaultValue":"gettext('Sort column \"{{ name }}\"')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":485,"modifierKind":[148]},{"name":"styles","defaultValue":"{\n    tableCursor: 'auto',\n    gridTemplateColumns: undefined,\n    gridInfiniteScrollColumn: undefined\n  }","deprecated":false,"deprecationMessage":"","type":"object","indexKey":"","optional":false,"description":"","line":433},{"name":"tableRef","deprecated":false,"deprecationMessage":"","type":"CdkTable<any>","indexKey":"","optional":false,"description":"","line":501,"decorators":[{"name":"ViewChild","stringifiedArguments":"CdkTable, {static: false}"}],"modifierKind":[170]},{"name":"totalPagesCount$","defaultValue":"new BehaviorSubject<number>(Infinity)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":443}],"methodsClass":[{"name":"applyFilter","args":[{"name":"columnName","type":"","deprecated":false,"deprecationMessage":""},{"name":"dropdown","type":"","deprecated":false,"deprecationMessage":""},{"name":"filteringModifier","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":852,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"columnName","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"dropdown","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"filteringModifier","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"cancel","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":1023,"deprecated":false,"deprecationMessage":""},{"name":"changeSelectedItem","args":[{"name":"item","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":1018,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"item","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"changeSortOrder","args":[{"name":"columnName","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":817,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"columnName","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"clearFilters","args":[{"name":"reload","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":874,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"reload","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true","tagName":{"text":"param"}}]},{"name":"clickReload","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":940,"deprecated":false,"deprecationMessage":""},{"name":"collapse","args":[{"name":"row","type":"Row","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":690,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"row","type":"Row","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"emitConfigChange","args":[{"name":"eventType","type":"GridEventType","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":1081,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"eventType","type":"GridEventType","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]},{"name":"expand","args":[{"name":"row","type":"Row","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":677,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"row","type":"Row","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getCellRendererSpec","args":[{"type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"CellRendererSpec","typeParameters":[],"line":976,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getFilteringFormRendererSpec","args":[{"type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"FilteringFormRendererSpec","typeParameters":[],"line":984,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getHeaderCellRendererSpec","args":[{"type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"CellRendererSpec","typeParameters":[],"line":980,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"handleClick","args":[{"name":"row","type":"Row","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":1109,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"row","type":"Row","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isColumnFilteringApplied","args":[{"name":"column","type":"Column","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":924,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"column","type":"Column","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isDropDownPlacedRight","args":[{"name":"column","type":"Column","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":1071,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"column","type":"Column","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isItemSelected","args":[{"name":"item","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":1028,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"item","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"loadNextPage","args":[],"optional":false,"returnType":"Promise<IResultList<object>>","typeParameters":[],"line":957,"deprecated":false,"deprecationMessage":""},{"name":"ngAfterViewInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":666,"deprecated":false,"deprecationMessage":""},{"name":"ngOnChanges","args":[{"name":"event","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":652,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"event","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":672,"deprecated":false,"deprecationMessage":""},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":565,"deprecated":false,"deprecationMessage":""},{"name":"onColumnDrop","args":[{"type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":1032,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"openCustomColumn","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":729,"deprecated":false,"deprecationMessage":"","modifierKind":[134]},{"name":"performSearch","args":[{"name":"searchText","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":1114,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"searchText","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"reload","args":[{"name":"redirect","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":947,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"redirect","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true","tagName":{"text":"param"}}]},{"name":"removeCustomColumn","args":[{"name":"poConfirm","type":"PopoverConfirmComponent","deprecated":false,"deprecationMessage":""},{"name":"column","type":"Column","deprecated":false,"deprecationMessage":""},{"name":"ddConfigureColumns","type":"BsDropdownDirective","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":743,"deprecated":false,"deprecationMessage":"","modifierKind":[134],"jsdoctags":[{"name":"poConfirm","type":"PopoverConfirmComponent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"column","type":"Column","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"ddConfigureColumns","type":"BsDropdownDirective","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"removeFilter","args":[{"name":"filter","type":"Partial<FilterChip>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":768,"deprecated":false,"deprecationMessage":"","modifierKind":[134],"jsdoctags":[{"name":"filter","type":"Partial<FilterChip>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"resetFilter","args":[{"name":"columnName","type":"","deprecated":false,"deprecationMessage":""},{"name":"dropdown","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":867,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"columnName","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"dropdown","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"resolveCellValue","args":[{"name":"row","type":"","deprecated":false,"deprecationMessage":""},{"name":"path","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":809,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"row","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"path","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setAllItemsInCurrentPageSelected","args":[{"name":"selected","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":1003,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"selected","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setAllItemsSelected","args":[{"name":"selected","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":997,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"selected","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setColumns","args":[{"name":"config","type":"GridConfig","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":699,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"config","type":"GridConfig","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setExpandableRowVisible","args":[{"name":"row","type":"Row","deprecated":false,"deprecationMessage":""},{"name":"success","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":642,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"row","type":"Row","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"success","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setItemsSelected","args":[{"name":"items","type":"any","deprecated":false,"deprecationMessage":""},{"name":"selected","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":1007,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"items","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"selected","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setPageSize","args":[{"name":"config","type":"GridConfig","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":712,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"config","type":"GridConfig","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"trackByName","args":[{"name":"index","type":"","deprecated":false,"deprecationMessage":""},{"name":"item","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":805,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"index","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"item","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"triggerEvent","args":[{"name":"eventData","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":1102,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"eventData","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"updateFiltering","args":[{"name":"columnNames","type":"string[]","deprecated":false,"deprecationMessage":""},{"name":"action","type":"literal type","deprecated":false,"deprecationMessage":""},{"name":"reload","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":886,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"columnNames","type":"string[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"action","type":"literal type","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"reload","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true","tagName":{"text":"param"}}]},{"name":"updateFilteringApplied","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":913,"deprecated":false,"deprecationMessage":""},{"name":"updateGridColumnsSize","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":1049,"deprecated":false,"deprecationMessage":""},{"name":"updatePagination","args":[{"type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":930,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"updateSorting","args":[{"name":"columnNames","type":"string[]","deprecated":false,"deprecationMessage":""},{"name":"sortOrder","type":"SortOrder","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":833,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"columnNames","type":"string[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"sortOrder","type":"SortOrder","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"updateThEls","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":1062,"deprecated":false,"deprecationMessage":""}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"NgClass"},{"name":"NgIf"},{"name":"LoadingComponent","type":"component"},{"name":"C8yTranslateDirective","type":"directive"},{"name":"BsDropdownModule","type":"module"},{"name":"CdkTrapFocus"},{"name":"IconDirective","type":"directive"},{"name":"NgFor"},{"name":"PopoverModule","type":"module"},{"name":"ProductExperienceDirective","type":"directive"},{"name":"NgTemplateOutlet"},{"name":"CdkDropList"},{"name":"CdkDrag"},{"name":"FormsModule","type":"module"},{"name":"TooltipModule","type":"module"},{"name":"PopoverConfirmComponent","type":"component"},{"name":"NgPlural"},{"name":"NgPluralCase"},{"name":"NgSwitch"},{"name":"NgSwitchCase"},{"name":"NgSwitchDefault"},{"name":"CdkTable"},{"name":"CdkColumnDef"},{"name":"CdkHeaderCellDef"},{"name":"CdkHeaderCell"},{"name":"CdkCellDef"},{"name":"CdkCell"},{"name":"CellRendererComponent","type":"component"},{"name":"FilteringFormRendererComponent","type":"component"},{"name":"CdkFooterCellDef"},{"name":"CdkFooterCell"},{"name":"CdkHeaderRowDef"},{"name":"CdkHeaderRow"},{"name":"CdkRowDef"},{"name":"CdkRow"},{"name":"CdkFooterRowDef"},{"name":"CdkFooterRow"},{"name":"PaginationModule","type":"module"},{"name":"AsyncPipe","type":"pipe"},{"name":"SlicePipe","type":"pipe"},{"name":"C8yTranslatePipe","type":"pipe"},{"name":"MapFunctionPipe","type":"pipe"},{"name":"FilterMapperPipe","type":"pipe"},{"name":"GroupedFilterChips"},{"name":"VisibleControlsPipe","type":"pipe"}],"description":"","rawdescription":"\n","type":"component","assetsDirs":[],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"configurationStrategy","type":"DataGridConfigurationStrategy","deprecated":false,"deprecationMessage":""},{"name":"dataGridService","type":"DataGridService","deprecated":false,"deprecationMessage":""},{"name":"sanitizer","type":"DomSanitizer","deprecated":false,"deprecationMessage":""},{"name":"gainsightService","type":"GainsightService","deprecated":false,"deprecationMessage":""},{"name":"alertService","type":"AlertService","deprecated":false,"deprecationMessage":""},{"name":"actionControlsService","type":"ActionControlsExtensionService","deprecated":false,"deprecationMessage":""},{"name":"route","type":"ActivatedRoute","deprecated":false,"deprecationMessage":""}],"line":528,"jsdoctags":[{"name":"configurationStrategy","type":"DataGridConfigurationStrategy","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"dataGridService","type":"DataGridService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"sanitizer","type":"DomSanitizer","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"gainsightService","type":"GainsightService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"alertService","type":"AlertService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"actionControlsService","type":"ActionControlsExtensionService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"route","type":"ActivatedRoute","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":[],"implements":["DataGrid","OnChanges","AfterViewInit","ProductExperienceEventSource"],"accessors":{"_rows":{"name":"_rows","setSignature":{"name":"_rows","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"rows","type":"Row[]","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":254,"rawdescription":"\nThe list of rows to be displayed in the grid (used for client side data).","description":"<p>The list of rows to be displayed in the grid (used for client side data).</p>\n","jsdoctags":[{"name":"rows","type":"Row[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"_pagination":{"name":"_pagination","setSignature":{"name":"_pagination","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"pagination","type":"Pagination","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":274,"rawdescription":"\nPagination settings, e.g. allows for setting current page or page size.","description":"<p>Pagination settings, e.g. allows for setting current page or page size.</p>\n","jsdoctags":[{"name":"pagination","type":"Pagination","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"_infiniteScroll":{"name":"_infiniteScroll","setSignature":{"name":"_infiniteScroll","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"infiniteScroll","type":"LoadMoreMode","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":281,"rawdescription":"\nSets load more mode.","description":"<p>Sets load more mode.</p>\n","jsdoctags":[{"name":"infiniteScroll","type":"LoadMoreMode","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"_serverSideDataCallback":{"name":"_serverSideDataCallback","setSignature":{"name":"_serverSideDataCallback","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"serverSideDataCallback","type":"ServerSideDataCallback","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":291,"rawdescription":"\n\nSets a callback function which will be invoked whenever data needs to be loaded from server.\nThe function should take [[DataSourceModifier]] and return [[ServerSideDataResult]].\n","description":"<p>Sets a callback function which will be invoked whenever data needs to be loaded from server.\nThe function should take [[DataSourceModifier]] and return [[ServerSideDataResult]].</p>\n","jsdoctags":[{"name":"serverSideDataCallback","type":"ServerSideDataCallback","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"_selectable":{"name":"_selectable","setSignature":{"name":"_selectable","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"selectable","type":"boolean","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":298,"rawdescription":"\nDetermines whether items can be selected by clicking a checkbox in the first column.","description":"<p>Determines whether items can be selected by clicking a checkbox in the first column.</p>\n","jsdoctags":[{"name":"selectable","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"_singleSelection":{"name":"_singleSelection","setSignature":{"name":"_singleSelection","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"singleSelection","type":"boolean","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":305,"rawdescription":"\nRestricts selection to a single row only. Selection column displays radio button instead of checkboxes","description":"<p>Restricts selection to a single row only. Selection column displays radio button instead of checkboxes</p>\n","jsdoctags":[{"name":"singleSelection","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"_selectionPrimaryKey":{"name":"_selectionPrimaryKey","setSignature":{"name":"_selectionPrimaryKey","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"selectionPrimaryKey","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":312,"rawdescription":"\nDetermines which item's property will be used to distinguish selection status.","description":"<p>Determines which item&#39;s property will be used to distinguish selection status.</p>\n","jsdoctags":[{"name":"selectionPrimaryKey","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"_displayOptions":{"name":"_displayOptions","setSignature":{"name":"_displayOptions","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"displayOptions","type":"DisplayOptions","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":325,"rawdescription":"\nSets display options.","description":"<p>Sets display options.</p>\n","jsdoctags":[{"name":"displayOptions","type":"DisplayOptions","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"_actionControls":{"name":"_actionControls","setSignature":{"name":"_actionControls","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"actionControls","type":"ActionControl[]","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":332,"rawdescription":"\nSets action controls (actions available for individual items).","description":"<p>Sets action controls (actions available for individual items).</p>\n","jsdoctags":[{"name":"actionControls","type":"ActionControl[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"_bulkActionControls":{"name":"_bulkActionControls","setSignature":{"name":"_bulkActionControls","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"bulkActionControls","type":"BulkActionControl[]","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":339,"rawdescription":"\nSets bulk action controls (actions available for items selected by user).","description":"<p>Sets bulk action controls (actions available for items selected by user).</p>\n","jsdoctags":[{"name":"bulkActionControls","type":"BulkActionControl[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"_headerActionControls":{"name":"_headerActionControls","setSignature":{"name":"_headerActionControls","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"headerActionControls","type":"HeaderActionControl[]","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":346,"rawdescription":"\nSets header action controls (actions available from data grid header).","description":"<p>Sets header action controls (actions available from data grid header).</p>\n","jsdoctags":[{"name":"headerActionControls","type":"HeaderActionControl[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}},"readme":"<h2>Data grid component</h2>\n<p>This component is used to present a data set in a grid of columns and rows.</p>\n<h3>Labels</h3>\n<p>You can set:</p>\n<ul>\n<li>the title displayed at the top of the grid (<code>title</code>)</li>\n<li>the labels for load more button (<code>loadMoreItemsLabel</code>, <code>loadingItemsLabel</code> - when loading is in progress)</li>\n</ul>\n<p><b>Example</b></p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;c8y-data-grid\n  [title]=&quot;&#39;My objects&#39;&quot;\n  [loadMoreItemsLabel]=&quot;&#39;Load more objects&#39;&quot;\n  [loadingItemsLabel]=&quot;&#39;Loading objectsâ€¦&#39;&quot;\n&gt;&lt;/c8y-data-grid&gt;</code></pre></div><h3>Visual settings</h3>\n<p>The component allows to control some visual settings via <a href=\"../interfaces/DisplayOptions.html\"><code>displayOptions</code></a>:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-ts\">displayOptions: DisplayOptions = {\n  bordered: true,\n  striped: true,\n  filter: true,\n  gridHeader: true,\n  hover: true\n};</code></pre></div><p>Further visual settings can be set in individual columns with:</p>\n<ul>\n<li><a href=\"../interfaces/Column.html#dataType\"><code>dataType</code></a></li>\n<li><a href=\"../interfaces/Column.html#gridTrackSize\"><code>gridTrackSize</code></a></li>\n<li><a href=\"../interfaces/Column.html#headerCSSClassName\"><code>headerCSSClassName</code></a></li>\n<li><a href=\"../interfaces/Column.html#cellCSSClassName\"><code>cellCSSClassName</code></a></li>\n</ul>\n<p>Header and cell rendering can be also customized with own components (see &quot;Columns&quot; section below for an example).</p>\n<h3>Empty state</h3>\n<p>You can define what should be displayed when there are no items to be displayed in the grid by passing an element with <code>c8y-empty-state</code> class, e.g.:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;c8y-data-grid (...)&gt;\n  &lt;c8y-ui-empty-state\n    [icon]=&quot;&#39;search&#39;&quot;\n    [title]=&quot;&#39;No results to display.&#39; | translate&quot;\n    [subtitle]=&quot;&#39;Refine your search terms or check your spelling.&#39; | translate&quot;\n    [horizontal]=&quot;true&quot;\n  &gt;&lt;/c8y-ui-empty-state&gt;\n&lt;/c8y-data-grid&gt;</code></pre></div><h3>Columns</h3>\n<p>You can define columns by passing a list of objects compliant with <a href=\"interfaces/Column.html\"><code>Column</code></a> interface. The most basic definition contains:</p>\n<ul>\n<li><code>name</code> - the name of the column</li>\n<li><code>header</code> - the header text for the column</li>\n<li><code>path</code> - the path in item&#39;s object from where the value should be taken</li>\n</ul>\n<p>There are default renderers for header, cell and filtering form, but they can be overridden by custom components for fine-grained control over how these elements are presented.</p>\n<p>Let&#39;s cosnider the following template:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;c8y-data-grid [columns]=&quot;columns&quot;&gt;&lt;/c8y-data-grid&gt;</code></pre></div><p>and the following columns list:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-ts\">columns: Column[] = [\n  {\n    name: &#39;id&#39;,\n    header: &#39;ID&#39;,\n    path: &#39;id&#39;,\n    filterable: true,\n    sortable: true\n  },\n  {\n    name: &#39;name&#39;,\n    header: &#39;Name&#39;,\n    path: &#39;name&#39;,\n    filterable: true,\n    sortable: true\n  },\n  new TypeDataGridColumn()\n];</code></pre></div><p>The first two columns will use default renderers but the third one will be customized. <code>TypeDataGridColumn</code> needs to implement <code>Column</code> interface and set the renderers:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-ts\">import { Type } from &#39;&#64;angular/core&#39;;\nimport { Column, ColumnDataType, SortOrder, FilterPredicateFunction } from &#39;&#64;c8y/ngx-components&#39;;\nimport { TypeHeaderCellRendererComponent } from &#39;./type.header-cell-renderer.component&#39;;\nimport { TypeCellRendererComponent } from &#39;./type.cell-renderer.component&#39;;\nimport { TypeFilteringFormRendererComponent } from &#39;./type.filtering-form-renderer.component&#39;;\n\n/**\n * Defines a class for custom Type column.\n * Implements `Column` interface and sets basic properties, as well as custom components.\n */\nexport class TypeDataGridColumn implements Column {\n  name: string;\n  path?: string;\n  header?: string;\n  dataType?: ColumnDataType;\n\n  visible?: boolean;\n  positionFixed?: boolean;\n  gridTrackSize?: string;\n\n  headerCSSClassName?: string | string[];\n  headerCellRendererComponent?: Type&lt;any&gt;;\n\n  cellCSSClassName?: string | string[];\n  cellRendererComponent?: Type&lt;any&gt;;\n\n  sortable?: boolean;\n  sortOrder?: SortOrder;\n\n  filterable?: boolean;\n  filteringFormRendererComponent?: Type&lt;any&gt;;\n  filterPredicate?: string | FilterPredicateFunction;\n  externalFilterQuery?: string | object;\n\n  constructor() {\n    this.name = &#39;type&#39;;\n    this.header = &#39;Type&#39;;\n\n    this.headerCellRendererComponent = TypeHeaderCellRendererComponent;\n    this.cellRendererComponent = TypeCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringFormRendererComponent = TypeFilteringFormRendererComponent;\n\n    this.sortable = false;\n  }\n}</code></pre></div><p>Then each of the renderer components is responsible for rendering a particular part of the grid.</p>\n<p><code>TypeHeaderCellRendererComponent</code> renders the header cell of the column:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-ts\">import { Component } from &#39;&#64;angular/core&#39;;\nimport { CellRendererContext } from &#39;&#64;c8y/ngx-components&#39;;\n\n/**\n * The example component for custom header renderer.\n * The header text is taken from `this.context.property` which contains current column object.\n * Additionally the header has custom icon element and styled span element.\n */\n&#64;Component({\n  template: `\n    &lt;i c8yIcon=&quot;rocket&quot;&gt;&lt;/i&gt;\n    &lt;span style=&quot;text-transform: uppercase; font-variant: small-caps; text-decoration: underline;&quot;&gt;\n      {{ context.property.header }}\n    &lt;/span&gt;\n  `\n})\nexport class TypeHeaderCellRendererComponent {\n  constructor(public context: CellRendererContext) {}\n}</code></pre></div><p><code>TypeCellRendererComponent</code> renders the data cell of the column:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-ts\">import { Component, forwardRef, Inject } from &#39;&#64;angular/core&#39;;\nimport { CellRendererContext } from &#39;&#64;c8y/ngx-components&#39;;\nimport { ServerGridExampleService } from &#39;../server-grid-example.service&#39;;\n\n/**\n * The example component for custom cell renderer.\n * It gets `context` with the current row item and the column.\n * Additionally, a service is injected to provide a helper method.\n * The template displays the icon and the label with additional styling.\n */\n&#64;Component({\n  template: `\n    &lt;span&gt;\n      &lt;i [c8yIcon]=&quot;value.icon&quot; class=&quot;m-r-5&quot;&gt;&lt;/i&gt;\n      &lt;code&gt;{{ value.label }}&lt;/code&gt;\n    &lt;/span&gt;\n  `\n})\nexport class TypeCellRendererComponent {\n  /** Returns the icon and label for the current item. */\n  get value() {\n    return this.service.getTypeIconAndLabel(this.context.item);\n  }\n\n  constructor(\n    public context: CellRendererContext,\n    &#64;Inject(ServerGridExampleService) public service: ServerGridExampleService\n  ) {}\n}</code></pre></div><p>The example above also shows how to use a custom service to process the current item before displaying it in the template.</p>\n<p><code>TypeFilteringFormRendererComponent</code> renders the filtering form for the column where filtering options can be selected and applied or reset:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-ts\">import { Component, Inject } from &#39;&#64;angular/core&#39;;\nimport { FilteringFormRendererContext } from &#39;&#64;c8y/ngx-components&#39;;\nimport { ServerGridExampleService, TypeFilteringModel } from &#39;../server-grid-example.service&#39;;\n\n/**\n * This is the example component for custom filtering form.\n * The form can contain any inputs you want.\n * The important thing is to invoke one of the 2 methods:\n *\n * - `applyFilter` which sets `filterPredicate` or `externalFilterQuery` in the column,\n *   these values will later be used to generate the query\n * - `resetFilter` which resets filter settings in the column\n *\n * Our example shows the list of checkboxes. Selecting them modifies the query being sent.\n */\n&#64;Component({\n  template: `\n    &lt;form #filterForm=&quot;ngForm&quot;&gt;\n      &lt;strong&gt;Show managed objects of type:&lt;/strong&gt;\n      &lt;c8y-form-group class=&quot;m-b-0&quot;&gt;\n        &lt;label class=&quot;c8y-checkbox&quot;&gt;\n          &lt;input type=&quot;checkbox&quot; name=&quot;group&quot; [(ngModel)]=&quot;model.group&quot; /&gt;\n          &lt;span&gt;&lt;/span&gt;\n          &lt;span&gt;Group&lt;/span&gt;\n        &lt;/label&gt;\n      &lt;/c8y-form-group&gt;\n      &lt;c8y-form-group class=&quot;m-b-0&quot;&gt;\n        &lt;label class=&quot;c8y-checkbox&quot;&gt;\n          &lt;input type=&quot;checkbox&quot; name=&quot;device&quot; [(ngModel)]=&quot;model.device&quot; /&gt;\n          &lt;span&gt;&lt;/span&gt;\n          &lt;span&gt;Device&lt;/span&gt;\n        &lt;/label&gt;\n      &lt;/c8y-form-group&gt;\n      &lt;c8y-form-group class=&quot;m-b-0&quot;&gt;\n        &lt;label class=&quot;c8y-checkbox&quot;&gt;\n          &lt;input type=&quot;checkbox&quot; name=&quot;dashboard&quot; [(ngModel)]=&quot;model.dashboard&quot; /&gt;\n          &lt;span&gt;&lt;/span&gt;\n          &lt;span&gt;Dashboard&lt;/span&gt;\n        &lt;/label&gt;\n      &lt;/c8y-form-group&gt;\n      &lt;c8y-form-group class=&quot;m-b-0&quot;&gt;\n        &lt;label class=&quot;c8y-checkbox&quot;&gt;\n          &lt;input type=&quot;checkbox&quot; name=&quot;smartRule&quot; [(ngModel)]=&quot;model.smartRule&quot; /&gt;\n          &lt;span&gt;&lt;/span&gt;\n          &lt;span&gt;Smart rule&lt;/span&gt;\n        &lt;/label&gt;\n      &lt;/c8y-form-group&gt;\n      &lt;c8y-form-group class=&quot;m-b-0&quot;&gt;\n        &lt;label class=&quot;c8y-checkbox&quot;&gt;\n          &lt;input type=&quot;checkbox&quot; name=&quot;file&quot; [(ngModel)]=&quot;model.file&quot; /&gt;\n          &lt;span&gt;&lt;/span&gt;\n          &lt;span&gt;File&lt;/span&gt;\n        &lt;/label&gt;\n      &lt;/c8y-form-group&gt;\n      &lt;c8y-form-group class=&quot;m-b-0&quot;&gt;\n        &lt;label class=&quot;c8y-checkbox&quot;&gt;\n          &lt;input type=&quot;checkbox&quot; name=&quot;application&quot; [(ngModel)]=&quot;model.application&quot; /&gt;\n          &lt;span&gt;&lt;/span&gt;\n          &lt;span&gt;Application&lt;/span&gt;\n        &lt;/label&gt;\n      &lt;/c8y-form-group&gt;\n    &lt;/form&gt;\n\n    &lt;div class=&quot;data-grid__dropdown__footer d-flex separator-top&quot;&gt;\n      &lt;button class=&quot;btn btn-default btn-sm m-r-8 flex-grow&quot; (click)=&quot;resetFilter()&quot;&gt;Reset&lt;/button&gt;\n      &lt;button\n        class=&quot;btn btn-primary btn-sm flex-grow&quot;\n        [disabled]=&quot;filterForm.invalid&quot;\n        (click)=&quot;applyFilter()&quot;\n      &gt;\n        Apply\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `\n})\nexport class TypeFilteringFormRendererComponent {\n  model: TypeFilteringModel;\n\n  constructor(\n    public context: FilteringFormRendererContext,\n    &#64;Inject(ServerGridExampleService) public service: ServerGridExampleService\n  ) {\n    // restores the settings from current column setup\n    this.model = (this.context.property.externalFilterQuery || {}).model || {};\n  }\n\n  /**\n   * Applies the filter.\n   * Sets `externalFilterQuery.model` to restore the same settings the next time the form is displayed.\n   * Sets `externalFilterQuery.query` to pass the query object to be included in the final data grid query.\n   */\n  applyFilter() {\n    this.context.applyFilter({\n      externalFilterQuery: {\n        model: this.model,\n        query: this.service.getTypeQuery(this.model)\n      }\n    });\n  }\n\n  /** Restes the filter, just call the method from context. */\n  resetFilter() {\n    this.context.resetFilter();\n  }\n}</code></pre></div><p>Later it will be presented how to use <code>externalFilterQuery</code> to build a query to fetch data from the server.</p>\n<h3>Rows</h3>\n<p>Rows can be provided to the data grid via <code>rows</code> input. However, this is usually only useful for predefined set of data which is then processed on the client side. If you want to know more about this way of providing data, see the example in our tutorial application.</p>\n<p>Another way of providing data to the data grid is to use <code>serverSideDataCallback</code> input. The function provided to this input will be invoked whenever the grid needs to load data, i.e. on initial load, on next page load, on column filtering or sorting settings change. This function should take a <a href=\"../interfaces/DataSourceModifier.html\"><code>DataSourceModifier</code></a> object and return a <a href=\"../interfaces/ServerSideDataResult.html\"><code>ServerSideDataResult</code></a> object. The modifier represents the current state of the grid, i.e. filtering/sorting settings in columns, search text from the search input, selected items and pagination. Based on this state, you can perform any logic you need to determine what data should be displayed and then return it, along with additional statistics needed for accurate handling of the paging:</p>\n<ul>\n<li><code>size</code>: the number of all items that can be displayed in a grid when no filters are applied</li>\n<li><code>filteredSize</code>: the number of items that match current filters</li>\n</ul>\n<p>Let&#39;s consider the following example:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-ts\">/**\n * This method loads data when data grid requests it (e.g. on initial load or on column settings change).\n * It gets the object with current data grid setup and is supposed to return:\n * full response, list of items, paging object, the number of items in the filtered subset, the number of all items.\n */\nasync onDataSourceModifier(\n  dataSourceModifier: DataSourceModifier\n): Promise&lt;ServerSideDataResult&gt; {\n  let serverSideDataResult: ServerSideDataResult;\n\n  const { res, data, paging } = await this.service.getData(\n    dataSourceModifier.columns,\n    dataSourceModifier.pagination\n  );\n  const filteredSize: number = await this.service.getCount(\n    dataSourceModifier.columns,\n    dataSourceModifier.pagination\n  );\n  const size: number = await this.service.getTotal();\n\n  serverSideDataResult = { res, data, paging, filteredSize, size };\n\n  return serverSideDataResult;\n}</code></pre></div><p>As you can see, we&#39;re using the state from <code>dataSourceModifier</code> to execute the queries and return the result. The actual implementation of these 3 queries might vary depending on your use case (what endpoint is used, what kind of columns you defined, etc.). In the following example we&#39;ll build and execute inventory queries based on columns with standard and custom filtering/sorting settings and pagination:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-ts\">/** Returns data for current columns and pagination setup. */\nasync getData(columns: Column[], pagination: Pagination) {\n  // build filters based on columns and pagination\n  const filters = this.getFilters(columns, pagination);\n  // execute inventory query for the list of managed objects\n  return this.inventoryService.list(filters);\n}\n\n/** Returns the number of items matching current columns and pagination setup. */\nasync getCount(columns: Column[], pagination: Pagination) {\n  const filters = {\n    // build filters based on columns and pagination\n    ...this.getFilters(columns, pagination),\n    // but we only need the number of items, not the items themselves\n    pageSize: 1,\n    currentPage: 1\n  };\n  return (await this.inventoryService.list(filters)).paging.totalPages;\n}\n\n/** Returns the total number of items (with no filters). */\nasync getTotal(): Promise&lt;number&gt; {\n  const filters = {\n    pageSize: 1,\n    withTotalPages: true\n  };\n  return (await this.inventoryService.list(filters)).paging.totalPages;\n}</code></pre></div><p>Two of the functions above use <code>getFilters</code> method to build a query based on the columns and pagination setup:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-ts\">/** Returns filters for given columns and pagination setup. */\nprivate getFilters(columns: Column[], pagination: Pagination) {\n  return {\n    query: this.getQueryString(columns),\n    pageSize: pagination.pageSize,\n    currentPage: pagination.currentPage,\n    withChildren: false,\n    withTotalPages: true\n  };\n}\n\n/** Returns a query string based on columns setup. */\nprivate getQueryString(columns: Column[]): string {\n  const fullQuery = this.getQueryObj(columns);\n  return this.queriesUtil.buildQuery(fullQuery);\n}\n\n/** Returns a query object based on columns setup. */\nprivate getQueryObj(columns: Column[]): any {\n  return transform(columns, (query, column) =&gt; this.addColumnQuery(query, column), {\n    __filter: {},\n    __orderby: []\n  });\n}\n\n/** Extends given query with a part based on the setup of given column. */\nprivate addColumnQuery(query: any, column: Column): void {\n  // when a column is marked as filterable\n  if (column.filterable) {\n    // in the case of default filtering form, `filterPredicate` will contain the string entered by a user\n    if (column.filterPredicate) {\n      // so we use it as the expected value, * allow to search for it anywhere in the property\n      query.__filter[column.path] = `*${column.filterPredicate}*`;\n    }\n\n    // in the case of custom filtering form, we&#39;re storing the query in `externalFilterQuery.query`\n    if (column.externalFilterQuery) {\n      query = this.queriesUtil.addAndFilter(query, column.externalFilterQuery.query);\n    }\n  }\n\n  // when a column is sortable and has a specified sorting order\n  if (column.sortable &amp;&amp; column.sortOrder) {\n    // add sorting condition for the configured column `path`\n    query.__orderby.push({\n      [column.path]: column.sortOrder === &#39;asc&#39; ? 1 : -1\n    });\n  }\n\n  return query;\n}</code></pre></div><p>You can see the above example working in our tutorial application:</p>\n<img src=\"./../assets/server-grid-example.png\" alt=\"Server-side data grid example\" class=\"img-responsive\" />\n\n<h3>Row actions</h3>\n<p>The component supports actions to be invoked on individual rows or bulk actions to be invoked on multiple rows previously selected by user. You can either use predefined actions or define your own:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-ts\">actionControls: ActionControl[] = [\n  { type: BuiltInActionType.Edit, callback: (item) =&gt; console.dir(item) },\n  { type: BuiltInActionType.Export, callback: (item) =&gt; console.dir(item) },\n  { type: BuiltInActionType.Delete, callback: (item) =&gt; console.dir(item) },\n  {\n    type: &#39;customAction&#39;,\n    icon: &#39;online&#39;,\n    text: &#39;Custom action&#39;,\n    callback: (item) =&gt; console.dir(item)\n  }\n];\nbulkActionControls: BulkActionControl[] = [\n  {\n    type: BuiltInActionType.Export,\n    callback: (selectedItemIds) =&gt; console.dir(selectedItemIds)\n  },\n  {\n    type: BuiltInActionType.Delete,\n    callback: (selectedItemIds) =&gt; console.dir(selectedItemIds)\n  },\n  {\n    type: &#39;customAction&#39;,\n    icon: &#39;online&#39;,\n    text: &#39;Custom action&#39;,\n    callback: (selectedItemIds) =&gt; console.dir(selectedItemIds)\n  }\n];</code></pre></div><h3>Infinite scroll / &quot;Load more&quot; button</h3>\n<p>The component takes <code>infiniteScroll</code> input which can have one of the following values:</p>\n<ul>\n<li><code>auto</code>: attempts to load more data automatically as user scrolls down (default)</li>\n<li><code>show</code>: shows a load more button for the user to decide</li>\n<li><code>none</code>: doesn&#39;t perform any load more action</li>\n<li><code>hidden</code>: loads more data automatically but with no visible button for the user</li>\n</ul>\n<h3>Event emitters</h3>\n<p>The component exposes several event emitter outputs:</p>\n<ul>\n<li><code>itemsSelect</code></li>\n<li><code>onChildDevices</code></li>\n<li><code>onConfigChange</code></li>\n<li><code>onFilter</code></li>\n<li><code>rowClick</code></li>\n<li><code>rowMouseLeave</code></li>\n<li><code>rowMouseOver</code></li>\n</ul>\n<p>to which you can bind via template, e.g.:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;c8y-data-grid\n  (rowClick)=&quot;onRowClick($event)&quot;\n  (itemsSelect)=&quot;onItemsSelect($event)&quot;\n  (onConfigChange)=&quot;onConfigChange($event)&quot;\n&gt;&lt;/c8y-data-grid&gt;</code></pre></div><p>See more details about them in the <a href=\"../DataGridComponent.html#outputs\">outputs reference</a>.</p>\n"}