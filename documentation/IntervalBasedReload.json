{"name":"IntervalBasedReload","id":"class-IntervalBasedReload-2a6a7ed902c963a928231fa9ed50c6d461688c296646f113881bc081dd47ebe5361369cdad14ea61a0c1b69624df745f7f36998e0c6342efccf94f703ef34ed0","file":"core/common/interval-based-reload.abstract.ts","deprecated":false,"deprecationMessage":"","type":"class","inputsClass":[],"outputsClass":[],"properties":[{"name":"countdownIntervalComponent","deprecated":false,"deprecationMessage":"","type":"CountdownIntervalComponent","indexKey":"","optional":false,"description":"","line":37,"modifierKind":[128]},{"name":"countdownSubscription","deprecated":false,"deprecationMessage":"","type":"Subscription","indexKey":"","optional":false,"description":"<p>Holds the subscription to a countdown observable.</p>\n","line":41,"rawdescription":"\n\nHolds the subscription to a countdown observable.\n","modifierKind":[124]},{"name":"gainsightService","defaultValue":"inject(GainsightService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":35,"modifierKind":[124]},{"name":"hideCountdown","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"<p>Controls the visibility of the countdown timer component in the current component&#39;s UI.</p>\n","line":80,"rawdescription":"\n\nControls the visibility of the countdown timer component in the current component's UI.\n","modifierKind":[124,128]},{"name":"isAutoRefreshEnabled","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"<p>Indicates whether auto-refresh is enabled for the datapoints reload component that is set in widget config.</p>\n","line":45,"rawdescription":"\n\nIndicates whether auto-refresh is enabled for the datapoints reload component that is set in widget config.\n"},{"name":"isIntervalRefreshToggleOn","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"<p>Indicates the current state of an interval refresh toggle button.</p>\n","line":70,"rawdescription":"\n\nIndicates the current state of an interval refresh toggle button.\n","modifierKind":[128]},{"name":"isLoading","deprecated":false,"deprecationMessage":"","type":"BehaviorSubject<boolean>","indexKey":"","optional":false,"description":"<p>Current isLoading state. Based on it next countdown cycle is being started.</p>\n","line":54,"rawdescription":"\n\nCurrent isLoading state. Based on it next countdown cycle is being started.\n","modifierKind":[128]},{"name":"isRefreshDisabled","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"<p>Indicates whether refreshing should be enabled or disabled.\nIt&#39;s &#39;true&#39; when user is not allowed to view a measurement.</p>\n","line":50,"rawdescription":"\n\nIndicates whether refreshing should be enabled or disabled.\nIt's 'true' when user is not allowed to view a measurement.\n","modifierKind":[128]},{"name":"isScrolling","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"<p>Indicates whether the alarm list is being scrolled or not.</p>\n","line":58,"rawdescription":"\n\nIndicates whether the alarm list is being scrolled or not.\n","modifierKind":[128]},{"name":"manuallyDisabledCountdown","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"<p>Indicates whether the countdown has been manually disabled by the user.</p>\n","line":76,"rawdescription":"\n\nIndicates whether the countdown has been manually disabled by the user.\n","modifierKind":[124,128]},{"name":"onCountdownEnded","deprecated":false,"deprecationMessage":"","type":"EventEmitter<void>","indexKey":"","optional":false,"description":"<p>Indicates that a countdown cycle has ended.</p>\n","line":66,"rawdescription":"\n\nIndicates that a countdown cycle has ended.\n","modifierKind":[128]},{"name":"refreshInterval","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"<p>Current refresh interval set in a widget config.</p>\n","line":62,"rawdescription":"\n\nCurrent refresh interval set in a widget config.\n","modifierKind":[128]},{"name":"toggleCountdownButtonTooltipText","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":72,"modifierKind":[128]}],"description":"<p>Abstract class representing an interval reload functionality.\nThis class provides methods and properties for managing an interval-based reload mechanism.</p>\n","rawdescription":"\n\nAbstract class representing an interval reload functionality.\nThis class provides methods and properties for managing an interval-based reload mechanism.\n","methods":[{"name":"autoRefreshList","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":89,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nStops the countdown and triggers a refresh action.\nThis function is responsible for halting the countdown interval component's operation.\nAfter stopping the countdown, it emits an `onCountdownEnded` event.\nThis event is used to inform external components that the countdown has ended,\ntypically prompting them to reload or refresh their data.\n","description":"<p>Stops the countdown and triggers a refresh action.\nThis function is responsible for halting the countdown interval component&#39;s operation.\nAfter stopping the countdown, it emits an <code>onCountdownEnded</code> event.\nThis event is used to inform external components that the countdown has ended,\ntypically prompting them to reload or refresh their data.</p>\n"},{"name":"countdownEnded","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":134,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nWrapper method where it's name better describes a context where it was called.\n","description":"<p>Wrapper method where it&#39;s name better describes a context where it was called.</p>\n","modifierKind":[128]},{"name":"disableCountdown","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":222,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nDisables and hides the countdown timer.\n\nThis method stops the ongoing countdown process by\nstopping the `countdownIntervalComponent` if it exists. It then hides the countdown timer\nby setting `hideCountdown` to true. This method encapsulates the logic required to halt and\nconceal the countdown timer.\n","description":"<p>Disables and hides the countdown timer.</p>\n<p>This method stops the ongoing countdown process by\nstopping the <code>countdownIntervalComponent</code> if it exists. It then hides the countdown timer\nby setting <code>hideCountdown</code> to true. This method encapsulates the logic required to halt and\nconceal the countdown timer.</p>\n"},{"name":"enableCountdown","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":212,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nEnables and starts the countdown timer.\n\nThis method makes the countdown visible (`hideCountdown` is set to false) and then\nstarts the countdown process. It ensures the countdown timer is updated immediately\nby triggering change detection with `cdRef.detectChanges()` before starting the countdown.\nThis method encapsulates the logic required to initiate the countdown timer.\n","description":"<p>Enables and starts the countdown timer.</p>\n<p>This method makes the countdown visible (<code>hideCountdown</code> is set to false) and then\nstarts the countdown process. It ensures the countdown timer is updated immediately\nby triggering change detection with <code>cdRef.detectChanges()</code> before starting the countdown.\nThis method encapsulates the logic required to initiate the countdown timer.</p>\n","modifierKind":[128]},{"name":"handleScrolling","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":110,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nManages the countdown timer's visibility and state in response to user scrolling.\n\nThis method toggles the countdown timer based on the user's scrolling behavior. It uses\nthe `disableCountdown` and `enableCountdown` methods for handling the countdown state.\n\n- If the user is scrolling down while the countdown is visible (`isScrolling` is true and\n  `hideCountdown` is false), `disableCountdown` is called to stop and hide the countdown,\n  and `isIntervalRefreshToggleOn` is set to false.\n\n- If the user has stopped scrolling, the countdown subscription is closed, and the countdown\n  is hidden (`!isScrolling`, `countdownSubscription?.closed`, `hideCountdown`), `enableCountdown`\n  is called to show and restart the countdown, and `isIntervalRefreshToggleOn` is set to true.\n","description":"<p>Manages the countdown timer&#39;s visibility and state in response to user scrolling.</p>\n<p>This method toggles the countdown timer based on the user&#39;s scrolling behavior. It uses\nthe <code>disableCountdown</code> and <code>enableCountdown</code> methods for handling the countdown state.</p>\n<ul>\n<li><p>If the user is scrolling down while the countdown is visible (<code>isScrolling</code> is true and\n<code>hideCountdown</code> is false), <code>disableCountdown</code> is called to stop and hide the countdown,\nand <code>isIntervalRefreshToggleOn</code> is set to false.</p>\n</li>\n<li><p>If the user has stopped scrolling, the countdown subscription is closed, and the countdown\nis hidden (<code>!isScrolling</code>, <code>countdownSubscription?.closed</code>, <code>hideCountdown</code>), <code>enableCountdown</code>\nis called to show and restart the countdown, and <code>isIntervalRefreshToggleOn</code> is set to true.</p>\n</li>\n</ul>\n"},{"name":"onToggleCountdownButtonState","args":[{"name":"$event","type":"MouseEvent","deprecated":false,"deprecationMessage":""},{"name":"widgetType","type":"WidgetType","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":152,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nHandles the toggle state of the countdown on button click.\n\nThis method is triggered by a mouse event, typically a click on the countdown toggle button.\nIt toggles `isIntervalRefreshToggleOn` to reflect the current state of the countdown timer.\n\n- If `isIntervalRefreshToggleOn` is set to false, indicating that the countdown should be stopped,\n  `disableCountdown` is called, and `manuallyDisabledCountdown` is set to true.\n\n- If `isIntervalRefreshToggleOn` is true and the countdown subscription is closed, indicating that\n  the countdown can be started, `enableCountdown` is called, and `manuallyDisabledCountdown`\n  is set to false.\n\n","description":"<p>Handles the toggle state of the countdown on button click.</p>\n<p>This method is triggered by a mouse event, typically a click on the countdown toggle button.\nIt toggles <code>isIntervalRefreshToggleOn</code> to reflect the current state of the countdown timer.</p>\n<ul>\n<li><p>If <code>isIntervalRefreshToggleOn</code> is set to false, indicating that the countdown should be stopped,\n<code>disableCountdown</code> is called, and <code>manuallyDisabledCountdown</code> is set to true.</p>\n</li>\n<li><p>If <code>isIntervalRefreshToggleOn</code> is true and the countdown subscription is closed, indicating that\nthe countdown can be started, <code>enableCountdown</code> is called, and <code>manuallyDisabledCountdown</code>\nis set to false.</p>\n</li>\n</ul>\n","jsdoctags":[{"name":{"pos":5564,"end":5570,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"$event"},"type":"MouseEvent","deprecated":false,"deprecationMessage":"","tagName":{"pos":5558,"end":5563,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>The MouseEvent that triggered this method.</li>\n</ul>\n"},{"name":{"pos":5628,"end":5638,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"widgetType"},"type":"WidgetType","deprecated":false,"deprecationMessage":"","tagName":{"pos":5622,"end":5627,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>The type of the widget that triggered the event</li>\n</ul>\n"}]},{"name":"reload","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":130,"deprecated":false,"deprecationMessage":"","modifierKind":[128]},{"name":"startCountdown","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":193,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nThis function listens for changes in the `isLoading` observable, filtering out any truthy values.\nOnce a falsy value is detected (indicating that loading has finished), it attempts to start the countdown.\n\nIMPORTANT: If the widget's configuration (refreshInterval, check template) is not set prior to executing countdownIntervalComponent?.start,\nthe countdown interval will not start!\n\n                  within the `runInInjectionContext`.\n","description":"<p>This function listens for changes in the <code>isLoading</code> observable, filtering out any truthy values.\nOnce a falsy value is detected (indicating that loading has finished), it attempts to start the countdown.</p>\n<p>IMPORTANT: If the widget&#39;s configuration (refreshInterval, check template) is not set prior to executing countdownIntervalComponent?.start,\nthe countdown interval will not start!</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">              within the `runInInjectionContext`.</code></pre></div>","jsdoctags":[]},{"name":"updateCountdownButtonTooltipText","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":231,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nUpdates the countdown button tooltip text based on the state of the interval refresh toggle state.\n","description":"<p>Updates the countdown button tooltip text based on the state of the interval refresh toggle state.</p>\n","modifierKind":[124,128]}],"indexSignatures":[],"extends":[],"hostBindings":[],"hostListeners":[]}