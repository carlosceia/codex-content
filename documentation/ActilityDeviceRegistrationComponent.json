{"name":"ActilityDeviceRegistrationComponent","id":"component-ActilityDeviceRegistrationComponent-a59c2933f71be208e35cdacd81d347c3157c745f4e7324647cde3dd393d66779a8015e8041a7d1dbaab1e306c5eb7eb8ea4fd3d50385922bc0ff432495050cac","file":"actility-device-registration/actility-device-registration.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"c8y-actility-registration","styleUrls":[],"styles":[],"templateUrl":["actility-device-registration.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"bsModalRef","deprecated":false,"deprecationMessage":"","type":"BsModalRef","indexKey":"","optional":false,"description":"","line":222,"modifierKind":[125]},{"name":"connections$","defaultValue":"this.getConnections$()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":46},{"name":"deviceProtocols$","defaultValue":"this.getDeviceProtocols$()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":47},{"name":"errorMessages$","defaultValue":"this.errors$.pipe(\n    map(errors => errors.map(error => error.message)),\n    map(messages => uniq(messages))\n  )","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":41},{"name":"errors$","defaultValue":"new BehaviorSubject<Error[]>([])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":40},{"name":"fields","defaultValue":"[\n    {\n      key: 'connection',\n      type: 'typeahead',\n      templateOptions: {\n        label: gettext('Connection'),\n        required: true,\n        c8yForOptions: this.connections$,\n        displayProperty: 'name',\n        valueProperties: ['name']\n      }\n    },\n    {\n      key: 'deviceProfile',\n      type: 'typeahead',\n      templateOptions: {\n        label: gettext('Device profile'),\n        required: true,\n        displayProperty: 'name',\n        placeholder: 'IWM-LR3',\n        valueProperties: ['id', 'name', 'typeMAC']\n      },\n      hooks: {\n        onInit: field => {\n          const connectionControl = field.form.get('connection');\n          connectionControl.valueChanges\n            .pipe(\n              takeUntil(this.unsubscribe$),\n              mergeMap(({ name }) => this.getDeviceProfiles$(name))\n            )\n            .subscribe(\n              profiles => {\n                field.templateOptions.c8yForOptions = of(profiles);\n                field.formControl.setValue(null);\n              },\n              error => {\n                field.form.get('deviceProfile').setErrors({ deviceProfile: true });\n                field.validators.deviceProfile.message = error.message;\n              }\n            );\n        }\n      },\n      validators: {\n        deviceProfile: {\n          expression: (control: AbstractControl) => {\n            return control.status === 'VALID';\n          },\n          message: () => ''\n        }\n      }\n    },\n    {\n      key: 'deviceType',\n      type: 'typeahead',\n      templateOptions: {\n        label: gettext('Device protocol'),\n        required: true,\n        c8yForOptions: this.deviceProtocols$,\n        displayProperty: 'name',\n        valueProperties: ['id', 'name']\n      }\n    },\n    {\n      key: 'devEUI',\n      type: 'input',\n      templateOptions: {\n        placeholder: '0018A20000000004',\n        label: gettext('Device EUI'),\n        required: true,\n        pattern: '^([a-fA-F0-9]{16})$'\n      },\n      validation: {\n        messages: {\n          pattern: gettext('Must be a valid 16 digit hexadecimal number.')\n        }\n      }\n    },\n    {\n      key: 'applicationEUI',\n      type: 'input',\n      templateOptions: {\n        placeholder: '70B3D53260000003',\n        label: gettext('Application EUI'),\n        required: true,\n        pattern: '^([a-fA-F0-9]{16})$'\n      },\n      validation: {\n        messages: {\n          pattern: gettext('Must be a valid 16 digit hexadecimal number.')\n        }\n      }\n    },\n    {\n      key: 'applicationKey',\n      type: 'input',\n      templateOptions: {\n        label: gettext('Application key'),\n        placeholder: '258DB54023EA74F0D55085F7351737D0',\n        required: true,\n        pattern: '^([a-fA-F0-9]{32})$'\n      },\n      validation: {\n        messages: {\n          pattern: gettext('Must be a valid 32 digit hexadecimal number.')\n        }\n      }\n    },\n    {\n      key: 'connectivityPlan',\n      type: 'typeahead',\n      templateOptions: {\n        label: gettext('Connectivity plan'),\n        description: gettext('Only connectivity plans with free slots are displayed'),\n        required: true,\n        placeholder: 'Dev-ope testing CP',\n        displayProperty: 'name',\n        valueProperties: ['id', 'ref', 'name', 'grantedConnections', 'usedConnections']\n      },\n      hooks: {\n        onInit: field => {\n          const connectionControl = field.form.get('connection');\n          connectionControl.valueChanges\n            .pipe(\n              takeUntil(this.unsubscribe$),\n              mergeMap(({ name }) => this.getConnectivityPlans$(name))\n            )\n            .subscribe(\n              profiles => {\n                field.templateOptions.c8yForOptions = of(profiles);\n                field.formControl.setValue(null);\n              },\n              error => {\n                field.form.get('connectivityPlan').setErrors({ connectivityPlan: true });\n                field.validators.connectivityPlan.message = error.message;\n              }\n            );\n        }\n      },\n      validators: {\n        connectivityPlan: {\n          expression: (control: AbstractControl) => {\n            return control.status === 'VALID';\n          },\n          message: () => ''\n        }\n      }\n    }\n  ]","deprecated":false,"deprecationMessage":"","type":"FormlyFieldConfig[]","indexKey":"","optional":false,"description":"","line":72},{"name":"finalStepLabels","defaultValue":"{\n    custom: gettext('Close')\n  }","deprecated":false,"deprecationMessage":"","type":"object","indexKey":"","optional":false,"description":"","line":35},{"name":"form","defaultValue":"new FormGroup({})","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":68},{"name":"load$","defaultValue":"this.connections$.pipe(\n    catchError((error: Error) => of(error)),\n    switchMap(connections => {\n      if (\n        connections instanceof Error &&\n        connections.name === ActilityErrorName.NoConnectivitySettingsError\n      ) {\n        return of([connections]);\n      }\n\n      return forkJoin([\n        of(connections),\n        this.deviceProtocols$.pipe(catchError((error: Error) => of(error)))\n      ]);\n    }),\n    map(results => results.filter(result => result instanceof Error)),\n    switchMap(errors => (errors.length === 0 ? of([]) : throwError(errors)))\n  )","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":49},{"name":"model","defaultValue":"{} as ActilityDeviceRegistration","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":69},{"name":"registrationStepLabels","defaultValue":"{\n    next: gettext('Register')\n  }","deprecated":false,"deprecationMessage":"","type":"object","indexKey":"","optional":false,"description":"","line":32},{"name":"state","defaultValue":"'loadPending'","deprecated":false,"deprecationMessage":"","type":"ActilityState","indexKey":"","optional":false,"description":"","line":39},{"name":"stepper","deprecated":false,"deprecationMessage":"","type":"C8yStepper","indexKey":"","optional":false,"description":"","line":31},{"name":"unsubscribe$","defaultValue":"new Subject()","deprecated":false,"deprecationMessage":"","type":"Subject<void>","indexKey":"","optional":false,"description":"","line":48}],"methodsClass":[{"name":"getActilityDeviceToSend","args":[],"optional":false,"returnType":"ActilityDeviceRegistration","typeParameters":[],"line":276,"deprecated":false,"deprecationMessage":""},{"name":"getConnections$","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":251,"deprecated":false,"deprecationMessage":""},{"name":"getConnectivityPlans$","args":[{"name":"name","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":237,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"name","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getDeviceProfiles$","args":[{"name":"name","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":243,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"name","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getDeviceProtocols$","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":247,"deprecated":false,"deprecationMessage":""},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":282,"deprecated":false,"deprecationMessage":""},{"name":"register","args":[{"name":"event","type":"literal type","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":255,"deprecated":false,"deprecationMessage":"","modifierKind":[134],"jsdoctags":[{"name":"event","type":"literal type","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[],"description":"","rawdescription":"\n","type":"component","assetsDirs":[],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"bsModalRef","type":"BsModalRef","deprecated":false,"deprecationMessage":""},{"name":"registrationService","type":"ActilityDeviceRegistrationService","deprecated":false,"deprecationMessage":""},{"name":"gainsightService","type":"GainsightService","deprecated":false,"deprecationMessage":""}],"line":219,"jsdoctags":[{"name":"bsModalRef","type":"BsModalRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"registrationService","type":"ActilityDeviceRegistrationService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"gainsightService","type":"GainsightService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":[]}