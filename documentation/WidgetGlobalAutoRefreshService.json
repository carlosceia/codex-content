{"name":"WidgetGlobalAutoRefreshService","id":"injectable-WidgetGlobalAutoRefreshService-672e48625960bb8cb46f3ba3d2b72bf6e834b6cc036d2677213e894565330348c27911864ceae04de0ac6ceaafe7d6b4d1c20c0fabb5f4aaeb7a718de702c32d","file":"core/dashboard/widget-auto-refresh-context/widget-global-auto-refresh.service.ts","properties":[{"name":"autoRefreshSettings","defaultValue":"{\n    /**\n     * BehaviorSubject that emits the current state of auto-refresh button.\n     * Defaults to DEFAULT_INTERVAL_STATE.\n     */\n    isEnabled$: new BehaviorSubject<boolean>(DEFAULT_INTERVAL_STATE),\n    /**\n     * BehaviorSubject that emits the current auto-refresh interval value.\n     * Defaults to DEFAULT_INTERVAL_VALUE.\n     */\n    refreshInterval$: new BehaviorSubject<number>(DEFAULT_INTERVAL_VALUE),\n    /**\n     * BehaviorSubject that emits whether auto-refresh has been manually disabled by the user.\n     * Defaults to false.\n     */\n    userDisabledManually$: new BehaviorSubject(false)\n  }","deprecated":false,"deprecationMessage":"","type":"object","indexKey":"","optional":false,"description":"<p>Object containing behavior subjects for managing auto-refresh settings.</p>\n","line":41,"rawdescription":"\n\nObject containing behavior subjects for managing auto-refresh settings.\n"},{"name":"countdownActions","defaultValue":"{\n    /**\n     * Subject used to stop the countdown.\n     */\n    stop$: new Subject<void>(),\n    /**\n     * Subject used to reset the countdown.\n     */\n    reset$: new Subject<void>(),\n    /**\n     * Subject that emits when the countdown has ended.\n     */\n    countdownEnded$: new Subject<void>()\n  }","deprecated":false,"deprecationMessage":"","type":"object","indexKey":"","optional":false,"description":"<p>Object containing subjects for managing countdown actions.</p>\n","line":62,"rawdescription":"\n\nObject containing subjects for managing countdown actions.\n"},{"name":"globalRefreshWidgetsCount","defaultValue":"signal(0)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>A signal representing the number of widgets with the global auto-refresh option enabled.</p>\n","line":85,"rawdescription":"\n\nA signal representing the number of widgets with the global auto-refresh option enabled.\n"},{"name":"onDashboardSave$","defaultValue":"new Subject<void>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Subject that emits when a dashboard save operation is triggered.</p>\n","line":80,"rawdescription":"\n\nSubject that emits when a dashboard save operation is triggered.\n"}],"methods":[{"name":"decrementLoading","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":108,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nDecrements the loading count by 1.\n","description":"<p>Decrements the loading count by 1.</p>\n"},{"name":"getQueryParamChangeValue$","args":[],"optional":false,"returnType":"Observable<boolean | null>","typeParameters":[],"line":119,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nRetrieves an observable that emits the value of a Global Auto Refresh query parameter\nwhenever it changes. The query parameter being tracked is determined by\n`GlobalAutoRefreshName.GLOBAL_CONTEXT_AUTO_REFRESH`.\n\n","description":"<p>Retrieves an observable that emits the value of a Global Auto Refresh query parameter\nwhenever it changes. The query parameter being tracked is determined by\n<code>GlobalAutoRefreshName.GLOBAL_CONTEXT_AUTO_REFRESH</code>.</p>\n","jsdoctags":[{"tagName":{"pos":3653,"end":3660,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An observable that emits the parsed value of the <code>GLOBAL_CONTEXT_AUTO_REFRESH</code> query parameter.</p>\n"}]},{"name":"handleNavigationInProgress$","args":[],"optional":false,"returnType":"Observable<Event>","typeParameters":[],"line":132,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nMonitors router navigation events and updates the navigation progress state.\n\n         NavigationCancel, and NavigationError.\n","description":"<p>Monitors router navigation events and updates the navigation progress state.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">     NavigationCancel, and NavigationError.</code></pre></div>","jsdoctags":[{"tagName":{"pos":4085,"end":4092,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An Observable that emits router events of types NavigationStart, NavigationEnd,\nNavigationCancel, and NavigationError.</p>\n"}]},{"name":"incrementLoading","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":101,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nIncrements the loading count by 1.\n","description":"<p>Increments the loading count by 1.</p>\n"},{"name":"initializeAutoRefreshCountdownLoading$","args":[{"name":"editMode$","type":"BehaviorSubject<boolean>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":238,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nInitializes the auto-refresh countdown logic based on the widget loading state and edit mode.\n\nThis method returns an observable that monitors the widget loading state and triggers specific actions\nrelated to the countdown process. It performs the following steps:\n\n1. Skips the initial loading state emitted by `isLoadingWidgets$`.\n2. Stops the countdown if the widgets are currently loading.\n3. Filters out cases where widgets are loading or the application is in edit mode.\n4. Resets the countdown when widgets are not loading and the application is not in edit mode.\n\n\n","description":"<p>Initializes the auto-refresh countdown logic based on the widget loading state and edit mode.</p>\n<p>This method returns an observable that monitors the widget loading state and triggers specific actions\nrelated to the countdown process. It performs the following steps:</p>\n<ol>\n<li>Skips the initial loading state emitted by <code>isLoadingWidgets$</code>.</li>\n<li>Stops the countdown if the widgets are currently loading.</li>\n<li>Filters out cases where widgets are loading or the application is in edit mode.</li>\n<li>Resets the countdown when widgets are not loading and the application is not in edit mode.</li>\n</ol>\n","jsdoctags":[{"name":{"pos":8166,"end":8175,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"editMode$"},"type":"BehaviorSubject<boolean>","deprecated":false,"deprecationMessage":"","tagName":{"pos":8160,"end":8165,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>A <code>BehaviorSubject</code> representing whether the application is currently in edit mode.</li>\n</ul>\n"},{"tagName":{"pos":8273,"end":8280,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An <code>Observable&lt;boolean&gt;</code> that emits the loading state of the widgets after the initialization steps.</p>\n"}]},{"name":"onEditModeChange","args":[{"name":"editMode","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":173,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nHandles changes to the edit mode and updates the isEnabled$ variable.\n\n- If auto-refresh was manually disabled by the user (`userDisabledManually$` is `true`), auto-refresh will remain disabled regardless of the edit mode state.\n- If auto-refresh was not manually disabled, it will be disabled when entering edit mode and enabled when exiting edit mode.\n\n","description":"<p>Handles changes to the edit mode and updates the isEnabled$ variable.</p>\n<ul>\n<li>If auto-refresh was manually disabled by the user (<code>userDisabledManually$</code> is <code>true</code>), auto-refresh will remain disabled regardless of the edit mode state.</li>\n<li>If auto-refresh was not manually disabled, it will be disabled when entering edit mode and enabled when exiting edit mode.</li>\n</ul>\n","jsdoctags":[{"name":{"pos":5688,"end":5696,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"editMode"},"type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"pos":5682,"end":5687,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>A boolean indicating the current state of edit mode (<code>true</code> if edit mode is active, <code>false</code> otherwise).</li>\n</ul>\n"}]},{"name":"resetCountdown","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":219,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nResets the countdown timer by emitting a reset action after a short delay.\n","description":"<p>Resets the countdown timer by emitting a reset action after a short delay.</p>\n"},{"name":"resetCountdownOnLoadingComplete$","args":[],"optional":false,"returnType":"MonoTypeOperatorFunction<any>","typeParameters":[],"line":190,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nReturns an Observable that triggers the countdown reset action when loading completes.\n\nThis method creates an Observable that:\n- Skips a specified number of initial emissions from `isLoadingWidgets$` based on the `skipInitialBehaviorSubjectEmission$` method.\n- Filters out emissions where the loading state is true.\n- On emission where the loading state is false, it triggers a countdown reset action.\n\n","description":"<p>Returns an Observable that triggers the countdown reset action when loading completes.</p>\n<p>This method creates an Observable that:</p>\n<ul>\n<li>Skips a specified number of initial emissions from <code>isLoadingWidgets$</code> based on the <code>skipInitialBehaviorSubjectEmission$</code> method.</li>\n<li>Filters out emissions where the loading state is true.</li>\n<li>On emission where the loading state is false, it triggers a countdown reset action.</li>\n</ul>\n"},{"name":"resetServiceToDefaults","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":203,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nResets the service's settings and parameters to their default values.\n","description":"<p>Resets the service&#39;s settings and parameters to their default values.</p>\n"},{"name":"setAutoRefreshQueryParam","args":[{"name":"queryParams","type":"GlobalAutoRefreshQueryParam","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Promise<void>","typeParameters":[],"line":151,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nSets the global auto-refresh query parameter in the current route.\n\n                     The existing query parameters will be merged with these.\n","description":"<p>Sets the global auto-refresh query parameter in the current route.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">                 The existing query parameters will be merged with these.</code></pre></div>","modifierKind":[134],"jsdoctags":[{"name":{"pos":4724,"end":4735,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"queryParams"},"type":"GlobalAutoRefreshQueryParam","deprecated":false,"deprecationMessage":"","tagName":{"pos":4718,"end":4723,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>An object representing the query parameters to set for the global auto-refresh option.\nThe existing query parameters will be merged with these.</li>\n</ul>\n"}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\n","extends":[],"type":"injectable"}