{"name":"tenantPropertiesDefinitions","ctype":"miscellaneous","subtype":"variable","file":"tenants/tenant-form/tenant-form-inputs-definitions.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"{\n  tenantID: {\n    id: 'tenantId',\n    validators: [],\n    defaultValue: null,\n    type: 'text',\n    label: gettext('ID')\n  },\n  domain: {\n    id: 'domain',\n    validators: [\n      Validators.required,\n      Validators.maxLength(32),\n      // TODO: To be consistent, pattern should be change for domain. It is tenantId, to avoid breaking tests, and be consistent with previous implementation.\n      Validators.pattern(ValidationPattern.rules.tenantId.pattern)\n    ],\n    defaultValue: null,\n    type: 'text',\n    label: gettext('Domain/URL'),\n    placeholder: gettext('e.g. my-tenant`used in URL`')\n  },\n  companyName: {\n    id: 'companyName',\n    validators: [\n      Validators.required,\n      Validators.maxLength(256),\n      Validators.pattern(ValidationPattern.rules.noWhiteSpaceAtBeginning.pattern)\n    ],\n    defaultValue: null,\n    type: 'text',\n    label: gettext('Name'),\n    placeholder: gettext('e.g. Company A')\n  },\n  contactName: {\n    id: 'contactName',\n    validators: [Validators.maxLength(30)],\n    defaultValue: null,\n    type: 'text',\n    label: gettext('Contact name'),\n    placeholder: gettext('e.g. Joe Doe`LOCALIZE`')\n  },\n  contactPhone: {\n    id: 'contactPhone',\n    validators: [Validators.required, validateInternationalPhoneNumber(), Validators.maxLength(20)],\n    defaultValue: null,\n    type: 'text',\n    label: gettext('Contact phone'),\n    placeholder: gettext('e.g. +49 9 876 543 210`LOCALIZE`')\n  },\n  administratorEmail: {\n    id: 'administratorEmail',\n    validators: [Validators.required, Validators.email, Validators.maxLength(256)],\n    defaultValue: null,\n    type: 'text',\n    label: gettext(`Administrator's email`),\n    placeholder: gettext('e.g. joe.doe@example.com`LOCALIZE`')\n  },\n  administratorUsername: {\n    id: 'administratorUsername',\n    validators: [\n      Validators.required,\n      Validators.pattern(ValidationPattern.rules.user.pattern),\n      Validators.maxLength(256)\n    ],\n    defaultValue: null,\n    type: 'text',\n    label: gettext(`Administrator's username`),\n    placeholder: gettext('e.g. joe`LOCALIZE`')\n  },\n  externalReference: {\n    id: 'externalReference',\n    validators: [],\n    defaultValue: null,\n    type: 'text',\n    label: gettext('External reference'),\n    placeholder: gettext('e.g. REF12345`reference number`')\n  },\n  sendPasswordResetEmail: {\n    id: 'sendPasswordResetEmail',\n    validators: [],\n    defaultValue: true,\n    type: 'checkbox',\n    label: gettext('Send password reset link as email')\n  },\n  tenantPolicy: {\n    id: 'tenantPolicy',\n    validators: [],\n    defaultValue: null,\n    type: 'select',\n    label: gettext('Tenant policy')\n  },\n  allowCreateTenants: {\n    id: 'allowCreateTenants',\n    validators: [],\n    defaultValue: null,\n    type: 'checkbox',\n    label: gettext('Allow creation of subtenants')\n  },\n  gainsightEnabled: {\n    id: 'gainsightEnabled',\n    validators: [],\n    defaultValue: false,\n    type: 'checkbox',\n    label: gettext('Enable Gainsight product experience tracking')\n  }\n} satisfies Record<string, TenantPropertyDefinition>","rawdescription":"Define all hardTyped tenant form fields, checkboxes and select elements.\n\nwhile still benefiting from hard typing, thanks to \"satisfies\" keyword","description":"<p>Define all hardTyped tenant form fields, checkboxes and select elements.</p>\n<p>while still benefiting from hard typing, thanks to &quot;satisfies&quot; keyword</p>\n"}