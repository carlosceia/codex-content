{"name":"FilterMapper","id":"interface-FilterMapper-1e562d6f9d6d6d5f380709f07ed572ca198aaecc3ccc441d9c3e194161b4dca4f4ca4fe826d02941d98f6057b1c3a09dc7f891873fc2d6ee0f3700fc6707729e","file":"core/data-grid/data-grid.model.ts","deprecated":false,"deprecationMessage":"","type":"interface","properties":[{"name":"fieldType","deprecated":false,"deprecationMessage":"","type":"string[] | string","indexKey":"","optional":false,"description":"<p>The type or types of the <code>FormlyFieldConfig</code> that this mapper applies to.</p>\n","line":547,"rawdescription":"\n\nThe type or types of the `FormlyFieldConfig` that this mapper applies to.\n"},{"name":"map","deprecated":false,"deprecationMessage":"","type":"function","indexKey":"","optional":false,"description":"<p>Maps a <code>FormlyFieldConfig</code> and a <code>FilterChip</code> to an <code>Observable</code> of a <code>FilterChip</code>.</p>\n<p>This function extends the provided <code>FilterChip</code> object with additional properties based on the information in the <code>FormlyFieldConfig</code>.\nThe mapping process depends on the specific implementation of the <code>FilterMapper</code>.</p>\n<p>If undefined is returned an error is thrown and the chip is not visualized.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-typescript\">// Example implementation of `map` function in a `FilterMapper`\nmap(field: FormlyFieldConfig, filter: FilterChip): Observable&lt;FilterChip&gt; {\n  if (this.fieldType.includes(field.type.toString())) {\n    return toObservable(field.templateOptions.options).pipe(\n      map(options =&gt; {\n        const object = options.find(option =&gt; option.value === get(filter.externalFilterQuery, filter.path));\n        return {\n          ...filter,\n          value: object,\n          displayValue: object?.label\n        };\n      })\n    );\n  }\n}</code></pre></div>","line":578,"rawdescription":"\n\nMaps a `FormlyFieldConfig` and a `FilterChip` to an `Observable` of a `FilterChip`.\n\nThis function extends the provided `FilterChip` object with additional properties based on the information in the `FormlyFieldConfig`.\nThe mapping process depends on the specific implementation of the `FilterMapper`.\n\nIf undefined is returned an error is thrown and the chip is not visualized.\n\n```typescript\n// Example implementation of `map` function in a `FilterMapper`\nmap(field: FormlyFieldConfig, filter: FilterChip): Observable<FilterChip> {\n  if (this.fieldType.includes(field.type.toString())) {\n    return toObservable(field.templateOptions.options).pipe(\n      map(options => {\n        const object = options.find(option => option.value === get(filter.externalFilterQuery, filter.path));\n        return {\n          ...filter,\n          value: object,\n          displayValue: object?.label\n        };\n      })\n    );\n  }\n}\n```\n","jsdoctags":[{"pos":17810,"end":17862,"kind":341,"id":0,"flags":16777216,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":17811,"end":17816,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>The <code>FormlyFieldConfig</code> to map.</li>\n</ul>\n","name":{"pos":17817,"end":17822,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"field"},"isNameFirst":true,"isBracketed":false},{"pos":17862,"end":17908,"kind":341,"id":0,"flags":16777216,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":17863,"end":17868,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>The <code>FilterChip</code> to map.</li>\n</ul>\n","name":{"pos":17869,"end":17875,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"filter"},"isNameFirst":true,"isBracketed":false},{"pos":17908,"end":18685,"kind":342,"id":0,"flags":16777216,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":17909,"end":17916,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An <code>Observable</code> that emits the mapped <code>FilterChip</code>.\nIf undefined is returned an error is thrown and the chip is not visualized.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-typescript\">// Example implementation of `map` function in a `FilterMapper`\nmap(field: FormlyFieldConfig, filter: FilterChip): Observable&lt;FilterChip&gt; {\nif (this.fieldType.includes(field.type.toString())) {\nreturn toObservable(field.templateOptions.options).pipe(\nmap(options =&gt; {\nconst object = options.find(option =&gt; option.value === get(filter.externalFilterQuery, filter.path));\nreturn {\n ...filter,\n value: object,\n displayValue: object?.label\n};\n})\n);\n}\n}</code></pre></div>"}]}],"indexSignatures":[],"kind":171,"description":"<p>Defines an interface for a mapper function that maps a <code>FormlyFieldConfig</code> to a <code>FilterChip</code>.</p>\n","rawdescription":"\n\nDefines an interface for a mapper function that maps a `FormlyFieldConfig` to a `FilterChip`.\n","methods":[],"extends":[]}