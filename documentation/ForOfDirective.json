{"name":"ForOfDirective","id":"directive-ForOfDirective-5df644c5eb678c841d3b8a1801b67cf104caff4d27b355b2662330ce35fb76748d983cd5ad653d994d4feb641971a911efb2fb373ec7b21e381810f5a195f23b","file":"core/common/forOf.directive.ts","type":"directive","description":"<p>A directive to iterate over IResultList<T> data from @c8y/client.\nDepending on the [c8yForLoadMore] a load more button is:</p>\n<ul>\n<li>auto: Tries to automatically load more data (default maximum 10 iterations; can be\n  change with maxIterations settings).</li>\n<li>show: Shows a load more button for the user to decide</li>\n<li>none: Doesn&#39;t perform any load more action.</li>\n<li>hidden: Loads more data automatically but with no visible button for the user.</li>\n</ul>\n<p>Additional, any rxjs operator pipe can be applied to the [c8yForPipe] input, e.g. to\nfilter the data displayed currently as well as the data loaded by subsequent requests.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;div *c8yFor=&quot;let device of devices; loadMore: &#39;auto&#39;; let i = index; pipe: filterPipe;&quot;&gt;\n {{ i + 1 }}. {{device.name}}\n&lt;/div&gt;</code></pre></div><p>The above example will list all entities that are applied to <code>devices</code>:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-typescript\">this.devices = this.inventoryService.list({ pageSize: 10, fragmentType: &#39;c8y_IsDevice&#39; })</code></pre></div><p>It will display the first 10 items, if there is more space left on the screen, and there are more\nthan 10 devices, it will automatically load up to 10 pages more. If it still can&#39;t fit the screen\nit will stop and switch to <code>show</code> mode.</p>\n<p>A pipe can be applied e.g. for filtering or grouping. This pipe is attached to every follow up\nrequest done by the load more component:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-typescript\">this.filterPipe = pipe(\n   map((data: []) =&gt; {\n    return data.filter(\n     (mo: any) =&gt; mo.name &amp;&amp; mo.name.toLowerCase().indexOf(value.toLowerCase()) &gt; -1\n   );\n })\n);</code></pre></div><p>The pipe must be an rxjs pipe and can take any operator.</p>\n<p>Example with realtime support and items count output (e.g. for handling empty state and header):</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;c8y-list-group&gt;\n  &lt;div class=&quot;c8y-empty-state&quot; *ngIf=&quot;count === 0&quot;&gt;\n    (...)\n  &lt;/div&gt;\n\n  &lt;div class=&quot;page-sticky-header hidden-xs c8y-list__item c8y-list--timeline&quot; *ngIf=&quot;count &gt; 0&quot;&gt;\n    (...)\n  &lt;/div&gt;\n\n  &lt;ng-template\n    c8yFor\n    let-operation\n    [c8yForOf]=&quot;items$&quot;\n    [c8yForPipe]=&quot;filterPipe&quot;\n    [c8yForRealtime]=&quot;realtime&quot;\n    [c8yForRealtimeOptions]=&quot;realtimeOptions&quot;\n    (c8yForCount)=&quot;count = $event&quot;\n  &gt;\n    &lt;c8y-li-timeline&gt;\n      (...)\n    &lt;/c8y-li-timeline&gt;\n  &lt;/ng-template&gt;\n&lt;/c8y-list-group&gt;</code></pre></div><b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-typescript\">&#64;Component({\n  (...)\n})\nexport class ExampleComponent {\n  &#64;Input() deviceId: IIdentified;\n  items$ = this.operationService.list({\n    deviceId: this.deviceId,\n    fragmentType: &#39;c8y_MyOperation&#39;,\n    dateFrom: new Date(0).toISOString(),\n    dateTo: new Date(Date.now()).toISOString(),\n    revert: true,\n    withTotalPages: true\n  });\n  filterPipe = pipe(map((ops: IOperation[]) =&gt; ops.filter(op =&gt; op.c8y_MyOperation)));\n  realtimeOptions: ForOfRealtimeOptions = {\n    entityOrId: this.deviceId,\n    removeOnUpdate: true,\n    insertOnUpdate: true\n  } as ForOfRealtimeOptions;\n  count: number;\n\n  constructor(\n    private operationService: OperationService,\n    public realtime: OperationRealtimeService\n  ) {}\n}</code></pre></div>","rawdescription":"\n\nA directive to iterate over IResultList<T> data from @c8y/client.\nDepending on the [c8yForLoadMore] a load more button is:\n - auto: Tries to automatically load more data (default maximum 10 iterations; can be\n         change with maxIterations settings).\n - show: Shows a load more button for the user to decide\n - none: Doesn't perform any load more action.\n - hidden: Loads more data automatically but with no visible button for the user.\n\nAdditional, any rxjs operator pipe can be applied to the [c8yForPipe] input, e.g. to\nfilter the data displayed currently as well as the data loaded by subsequent requests.\n\n```html\n<div *c8yFor=\"let device of devices; loadMore: 'auto'; let i = index; pipe: filterPipe;\">\n {{ i + 1 }}. {{device.name}}\n</div>\n```\nThe above example will list all entities that are applied to `devices`:\n```typescript\nthis.devices = this.inventoryService.list({ pageSize: 10, fragmentType: 'c8y_IsDevice' })\n```\nIt will display the first 10 items, if there is more space left on the screen, and there are more\nthan 10 devices, it will automatically load up to 10 pages more. If it still can't fit the screen\nit will stop and switch to `show` mode.\n\nA pipe can be applied e.g. for filtering or grouping. This pipe is attached to every follow up\nrequest done by the load more component:\n```typescript\nthis.filterPipe = pipe(\n   map((data: []) => {\n    return data.filter(\n     (mo: any) => mo.name && mo.name.toLowerCase().indexOf(value.toLowerCase()) > -1\n   );\n })\n);\n```\nThe pipe must be an rxjs pipe and can take any operator.\n\nExample with realtime support and items count output (e.g. for handling empty state and header):\n\n```html\n<c8y-list-group>\n  <div class=\"c8y-empty-state\" *ngIf=\"count === 0\">\n    (...)\n  </div>\n\n  <div class=\"page-sticky-header hidden-xs c8y-list__item c8y-list--timeline\" *ngIf=\"count > 0\">\n    (...)\n  </div>\n\n  <ng-template\n    c8yFor\n    let-operation\n    [c8yForOf]=\"items$\"\n    [c8yForPipe]=\"filterPipe\"\n    [c8yForRealtime]=\"realtime\"\n    [c8yForRealtimeOptions]=\"realtimeOptions\"\n    (c8yForCount)=\"count = $event\"\n  >\n    <c8y-li-timeline>\n      (...)\n    </c8y-li-timeline>\n  </ng-template>\n</c8y-list-group>\n```\n\n```typescript\n@Component({\n  (...)\n})\nexport class ExampleComponent {\n  @Input() deviceId: IIdentified;\n  items$ = this.operationService.list({\n    deviceId: this.deviceId,\n    fragmentType: 'c8y_MyOperation',\n    dateFrom: new Date(0).toISOString(),\n    dateTo: new Date(Date.now()).toISOString(),\n    revert: true,\n    withTotalPages: true\n  });\n  filterPipe = pipe(map((ops: IOperation[]) => ops.filter(op => op.c8y_MyOperation)));\n  realtimeOptions: ForOfRealtimeOptions = {\n    entityOrId: this.deviceId,\n    removeOnUpdate: true,\n    insertOnUpdate: true\n  } as ForOfRealtimeOptions;\n  count: number;\n\n  constructor(\n    private operationService: OperationService,\n    public realtime: OperationRealtimeService\n  ) {}\n}\n```\n","selector":"[c8yFor]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[{"name":"c8yForComparator","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nA comparator function for comparing list items. Used to determine\nthe position at which a new element should be added to the list.\n","description":"<p>A comparator function for comparing list items. Used to determine\nthe position at which a new element should be added to the list.</p>\n","line":278,"type":"","decorators":[]},{"name":"c8yForEnableVirtualScroll","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nEnable virtual scroll rendering method.\n","description":"<p>Enable virtual scroll rendering method.</p>\n","line":286,"type":"boolean","decorators":[]},{"name":"c8yForLoadingLabel","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nLoading text label.\n","description":"<p>Loading text label.</p>\n","line":253,"type":"string","decorators":[]},{"name":"c8yForLoadingTemplate","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nA custom loading component.\n","description":"<p>A custom loading component.</p>\n","line":237,"type":"","decorators":[]},{"name":"c8yForLoadMore","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nThe mode setter:\n - auto: Tries to automatically load more data (default maximum 10 iterations; can be\n         change with maxIterations settings).\n - show: Shows a load more button for the user to decide\n - none: Doesn't perform any load more action.\n - hidden: Loads more data automatically but with no visible button for the user.\n","description":"<p>The mode setter:</p>\n<ul>\n<li>auto: Tries to automatically load more data (default maximum 10 iterations; can be\n  change with maxIterations settings).</li>\n<li>show: Shows a load more button for the user to decide</li>\n<li>none: Doesn&#39;t perform any load more action.</li>\n<li>hidden: Loads more data automatically but with no visible button for the user.</li>\n</ul>\n","line":200,"type":"","decorators":[]},{"name":"c8yForLoadNextLabel","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nLoad next text label.\n","description":"<p>Load next text label.</p>\n","line":245,"type":"string","decorators":[]},{"name":"c8yForMaxIterations","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nThe maximum numbers of iterations to call data from the api.\n","description":"<p>The maximum numbers of iterations to call data from the api.</p>\n","line":229,"type":"number","decorators":[]},{"name":"c8yForNotFound","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nA template to use if no data is found at all (e.g. if you apply a filter pipe).\n","description":"<p>A template to use if no data is found at all (e.g. if you apply a filter pipe).</p>\n","line":218,"type":"","decorators":[]},{"name":"c8yForOf","deprecated":false,"deprecationMessage":"","jsdoctags":[{"pos":5497,"end":5600,"kind":327,"id":0,"flags":16842752,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":5498,"end":5501,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"c8y"},"comment":"<p>/data or an observable.\nYou can pass an observable with null to explicitly clear the list.</p>\n"}],"rawdescription":"\n\nThe data setter. Must be a response from @c8y/data or an observable.\nYou can pass an observable with null to explicitly clear the list.\n","description":"<p>The data setter. Must be a response from @c8y/data or an observable.\nYou can pass an observable with null to explicitly clear the list.</p>\n","line":175,"type":"IResultList | Observable","decorators":[]},{"name":"c8yForPipe","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nThe pipe setter to attach any rxjs pipe to the current and more loaded data.\n","description":"<p>The pipe setter to attach any rxjs pipe to the current and more loaded data.</p>\n","line":208,"type":"","decorators":[]},{"name":"c8yForRealtime","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nA RealtimeService instance.\n","description":"<p>A RealtimeService instance.</p>\n","line":261,"type":"","decorators":[]},{"name":"c8yForRealtimeOptions","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nRealtime options.\n","description":"<p>Realtime options.</p>\n","line":269,"type":"","decorators":[]},{"name":"c8yForVirtualScrollContainerHeight","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nWhen used fixed strategy, there needs to be fixed height set on scrolling container.\n","description":"<p>When used fixed strategy, there needs to be fixed height set on scrolling container.</p>\n","line":306,"type":"number","decorators":[]},{"name":"c8yForVirtualScrollElementSize","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nProvides fixed item size for virtual scroll window strategy.\n","description":"<p>Provides fixed item size for virtual scroll window strategy.</p>\n","line":292,"type":"any","decorators":[]},{"name":"c8yForVirtualScrollStrategy","defaultValue":"'window'","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nSets mode of virtual scroller instance.\nwindow is used for case when whole viewport is scrolled.\nfixed can be used on inner-scroll containers.\n","description":"<p>Sets mode of virtual scroller instance.\nwindow is used for case when whole viewport is scrolled.\nfixed can be used on inner-scroll containers.</p>\n","line":300,"type":"\"fixed\" | \"window\"","decorators":[]}],"outputsClass":[{"name":"c8yForChange","defaultValue":"new EventEmitter<unknown[]>()","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nThe items change event emitting the newly loaded items.\n\nNote: This can only be used if the forOf isn't used with\nthe sugared asterisk (*) syntax. Instead you need to use an ng-template:\n```html\n<ng-template\n c8yFor\n let-operation\n [c8yForOf]=\"operations$\"\n (c8yForChange)=\"onChangeForOf($event)\"\n>\n</ng-template>\n```\n","description":"<p>The items change event emitting the newly loaded items.</p>\n<p>Note: This can only be used if the forOf isn&#39;t used with\nthe sugared asterisk (*) syntax. Instead you need to use an ng-template:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;ng-template\n c8yFor\n let-operation\n [c8yForOf]=&quot;operations$&quot;\n (c8yForChange)=&quot;onChangeForOf($event)&quot;\n&gt;\n&lt;/ng-template&gt;</code></pre></div>","line":342,"type":"EventEmitter"},{"name":"c8yForCount","defaultValue":"new EventEmitter<number>()","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nThe number of items currently loaded in the list.\n\nNote: This can only be used if the forOf isn't used with\nthe sugared asterisk (*) syntax. Instead you need to use an ng-template:\n```html\n<ng-template\n c8yFor\n let-operation\n [c8yForOf]=\"operations$\"\n (c8yForCount)=\"operationCount = $event\"\n>\n</ng-template>\n```\n","description":"<p>The number of items currently loaded in the list.</p>\n<p>Note: This can only be used if the forOf isn&#39;t used with\nthe sugared asterisk (*) syntax. Instead you need to use an ng-template:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;ng-template\n c8yFor\n let-operation\n [c8yForOf]=&quot;operations$&quot;\n (c8yForCount)=&quot;operationCount = $event&quot;\n&gt;\n&lt;/ng-template&gt;</code></pre></div>","line":324,"type":"EventEmitter"},{"name":"c8yForLoadMoreComponent","defaultValue":"new EventEmitter<LoadMoreComponent>()","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nThe current instance of the `LoadMoreComponent`.\n","description":"<p>The current instance of the <code>LoadMoreComponent</code>.</p>\n","line":348,"type":"EventEmitter"}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[],"methodsClass":[{"name":"ngOnChanges","args":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":362,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":395,"deprecated":false,"deprecationMessage":""},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":358,"deprecated":false,"deprecationMessage":""}],"extends":[],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"tpl","type":"TemplateRef<any>","deprecated":false,"deprecationMessage":""},{"name":"vcr","type":"ViewContainerRef","deprecated":false,"deprecationMessage":""},{"name":"cdRef","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":""}],"line":350,"jsdoctags":[{"name":"tpl","type":"TemplateRef<any>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"vcr","type":"ViewContainerRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"cdRef","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"accessors":{"c8yForOf":{"name":"c8yForOf","setSignature":{"name":"c8yForOf","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"fetchData","type":"IResultList<IIdentified> | Observable<IResultList<IIdentified>>","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":175,"rawdescription":"\n\nThe data setter. Must be a response from @c8y/data or an observable.\nYou can pass an observable with null to explicitly clear the list.\n","description":"<p>The data setter. Must be a response from @c8y/data or an observable.\nYou can pass an observable with null to explicitly clear the list.</p>\n","jsdoctags":[{"name":"fetchData","type":"IResultList<IIdentified> | Observable<IResultList<IIdentified>>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"c8yForLoadMore":{"name":"c8yForLoadMore","setSignature":{"name":"c8yForLoadMore","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"type","type":"ForOfDirective","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":200,"rawdescription":"\n\nThe mode setter:\n - auto: Tries to automatically load more data (default maximum 10 iterations; can be\n         change with maxIterations settings).\n - show: Shows a load more button for the user to decide\n - none: Doesn't perform any load more action.\n - hidden: Loads more data automatically but with no visible button for the user.\n","description":"<p>The mode setter:</p>\n<ul>\n<li>auto: Tries to automatically load more data (default maximum 10 iterations; can be\n  change with maxIterations settings).</li>\n<li>show: Shows a load more button for the user to decide</li>\n<li>none: Doesn&#39;t perform any load more action.</li>\n<li>hidden: Loads more data automatically but with no visible button for the user.</li>\n</ul>\n","jsdoctags":[{"name":"type","type":"ForOfDirective","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"c8yForPipe":{"name":"c8yForPipe","setSignature":{"name":"c8yForPipe","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"dataPipe","type":"ForOfDirective","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":208,"rawdescription":"\n\nThe pipe setter to attach any rxjs pipe to the current and more loaded data.\n","description":"<p>The pipe setter to attach any rxjs pipe to the current and more loaded data.</p>\n","jsdoctags":[{"name":"dataPipe","type":"ForOfDirective","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"c8yForNotFound":{"name":"c8yForNotFound","setSignature":{"name":"c8yForNotFound","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"notFoundTemplate","type":"ForOfDirective","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":218,"rawdescription":"\n\nA template to use if no data is found at all (e.g. if you apply a filter pipe).\n","description":"<p>A template to use if no data is found at all (e.g. if you apply a filter pipe).</p>\n","jsdoctags":[{"name":"notFoundTemplate","type":"ForOfDirective","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"c8yForMaxIterations":{"name":"c8yForMaxIterations","setSignature":{"name":"c8yForMaxIterations","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"maxIterations","type":"number","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":229,"rawdescription":"\n\nThe maximum numbers of iterations to call data from the api.\n","description":"<p>The maximum numbers of iterations to call data from the api.</p>\n","jsdoctags":[{"name":"maxIterations","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"c8yForLoadingTemplate":{"name":"c8yForLoadingTemplate","setSignature":{"name":"c8yForLoadingTemplate","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"loadingTemplate","type":"ForOfDirective","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":237,"rawdescription":"\n\nA custom loading component.\n","description":"<p>A custom loading component.</p>\n","jsdoctags":[{"name":"loadingTemplate","type":"ForOfDirective","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"c8yForLoadNextLabel":{"name":"c8yForLoadNextLabel","setSignature":{"name":"c8yForLoadNextLabel","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"loadNextLabel","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":245,"rawdescription":"\n\nLoad next text label.\n","description":"<p>Load next text label.</p>\n","jsdoctags":[{"name":"loadNextLabel","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"c8yForLoadingLabel":{"name":"c8yForLoadingLabel","setSignature":{"name":"c8yForLoadingLabel","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"loadingLabel","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":253,"rawdescription":"\n\nLoading text label.\n","description":"<p>Loading text label.</p>\n","jsdoctags":[{"name":"loadingLabel","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"c8yForRealtime":{"name":"c8yForRealtime","setSignature":{"name":"c8yForRealtime","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"source","type":"ForOfDirective","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":261,"rawdescription":"\n\nA RealtimeService instance.\n","description":"<p>A RealtimeService instance.</p>\n","jsdoctags":[{"name":"source","type":"ForOfDirective","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"c8yForRealtimeOptions":{"name":"c8yForRealtimeOptions","setSignature":{"name":"c8yForRealtimeOptions","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"realtimeOptions","type":"ForOfDirective","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":269,"rawdescription":"\n\nRealtime options.\n","description":"<p>Realtime options.</p>\n","jsdoctags":[{"name":"realtimeOptions","type":"ForOfDirective","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"c8yForComparator":{"name":"c8yForComparator","setSignature":{"name":"c8yForComparator","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"comparator","type":"ForOfDirective","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":278,"rawdescription":"\n\nA comparator function for comparing list items. Used to determine\nthe position at which a new element should be added to the list.\n","description":"<p>A comparator function for comparing list items. Used to determine\nthe position at which a new element should be added to the list.</p>\n","jsdoctags":[{"name":"comparator","type":"ForOfDirective","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}}}