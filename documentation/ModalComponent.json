{"name":"ModalComponent","id":"component-ModalComponent-64839f4cdb663b5d265a2bb84b767ee7d026d828b0d325984bbaa855ce28ad6b95c64b6388829635ce31cf2a853562046dc7a77e6d5bda452e960bd929621a2b","file":"core/modal/modal.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"c8y-modal","styleUrls":[],"styles":[],"templateUrl":["./modal.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"body","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nModal body.\n","description":"<p>Modal body.</p>\n","line":96,"type":"string","decorators":[]},{"name":"close","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nCallback function which is called right after 'ok' button is clicked, before 'onClose' emits.\n","description":"<p>Callback function which is called right after &#39;ok&#39; button is clicked, before &#39;onClose&#39; emits.</p>\n","line":84,"type":"function","decorators":[]},{"name":"customFooter","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nIndicates if modal should use custom footer provided with content projection (or no footer at all).\nIf false, default footer with 'cancel' and 'ok' buttons will be displayed.\n","description":"<p>Indicates if modal should use custom footer provided with content projection (or no footer at all).\nIf false, default footer with &#39;cancel&#39; and &#39;ok&#39; buttons will be displayed.</p>\n","line":101,"type":"boolean","decorators":[]},{"name":"disabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nIndicates if the 'ok' (confirmation) button is disabled.\n","description":"<p>Indicates if the &#39;ok&#39; (confirmation) button is disabled.</p>\n","line":80,"type":"boolean","decorators":[]},{"name":"dismiss","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nCallback function which is called right after 'cancel' button is clicked, before 'onDismiss' emits.\n","description":"<p>Callback function which is called right after &#39;cancel&#39; button is clicked, before &#39;onDismiss&#39; emits.</p>\n","line":88,"type":"function","decorators":[]},{"name":"headerClasses","defaultValue":"''","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nCSS classes for modal header.\n","description":"<p>CSS classes for modal header.</p>\n","line":105,"type":"string","decorators":[]},{"name":"labels","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nCustom labels for 'cancel' and 'ok' buttons.\n","description":"<p>Custom labels for &#39;cancel&#39; and &#39;ok&#39; buttons.</p>\n","line":110,"type":"ModalLabels","decorators":[]},{"name":"title","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nTitle of modal.\n","description":"<p>Title of modal.</p>\n","line":92,"type":"string","decorators":[]}],"outputsClass":[{"name":"onClose","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nEmits 'true' when 'ok' button is clicked.\n","description":"<p>Emits &#39;true&#39; when &#39;ok&#39; button is clicked.</p>\n","line":76,"type":"EventEmitter<boolean>"},{"name":"onDismiss","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nEmits 'true' when 'cancel' button is clicked.\n","description":"<p>Emits &#39;true&#39; when &#39;cancel&#39; button is clicked.</p>\n","line":72,"type":"EventEmitter<boolean>"}],"propertiesClass":[],"methodsClass":[{"name":"_close","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":141,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nHides modal or calls 'close' input callback, then emits 'onClose' output.\nMethod is called when 'ok' button is clicked, but can be also triggered by accessing 'ModalComponent' instance.\n","description":"<p>Hides modal or calls &#39;close&#39; input callback, then emits &#39;onClose&#39; output.\nMethod is called when &#39;ok&#39; button is clicked, but can be also triggered by accessing &#39;ModalComponent&#39; instance.</p>\n"},{"name":"_dismiss","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":126,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nHides modal or calls 'dismiss' input callback, then emits 'onDismiss' output.\nMethod is called when 'cancel' button is clicked, but can be also triggered by accessing 'ModalComponent' instance.\n","description":"<p>Hides modal or calls &#39;dismiss&#39; input callback, then emits &#39;onDismiss&#39; output.\nMethod is called when &#39;cancel&#39; button is clicked, but can be also triggered by accessing &#39;ModalComponent&#39; instance.</p>\n"},{"name":"onEnterKeyDown","args":[{"name":"_event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":156,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\n'Enter' keyboard button handler. Calls '_dismiss' or '_close' method when only one corresponding button exists.\n","description":"<p>&#39;Enter&#39; keyboard button handler. Calls &#39;_dismiss&#39; or &#39;_close&#39; method when only one corresponding button exists.</p>\n","decorators":[{"name":"HostListener","stringifiedArguments":"'document:keydown.enter', ['$event']"}],"modifierKind":[170],"jsdoctags":[{"name":{"pos":4156,"end":4162,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"_event"},"type":"KeyboardEvent","deprecated":false,"deprecationMessage":"","tagName":{"pos":4150,"end":4155,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Enter keydown event</p>\n"}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[{"name":"document:keydown.enter","args":[{"name":"_event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\n\n'Enter' keyboard button handler. Calls '_dismiss' or '_close' method when only one corresponding button exists.\n","description":"<p>&#39;Enter&#39; keyboard button handler. Calls &#39;_dismiss&#39; or &#39;_close&#39; method when only one corresponding button exists.</p>\n","jsdoctags":[{"pos":4149,"end":4186,"kind":341,"id":0,"flags":16842752,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":4150,"end":4155,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Enter keydown event</p>\n","name":{"pos":4156,"end":4162,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"_event"},"isNameFirst":true,"isBracketed":false}],"line":156}],"standalone":true,"imports":[{"name":"NgClass"},{"name":"NgIf"},{"name":"C8yTranslatePipe","type":"pipe"}],"description":"<p>C8Y component for creating modals.</p>\n<p>Creating custom modal:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-typescript\"> import { Component } from &quot;&#64;angular/core&quot;;\n import { Subject } from &#39;rxjs&#39;;\n\n&#64;Component({\n selector: &quot;my-modal&quot;,\n template: `\n   &lt;c8y-modal title=&quot;CustomTitle&quot;\n     (onClose)=&quot;onClose($event)&quot;\n     (onDismiss)=&quot;onDismiss($event)&quot;\n     [labels]=&quot;labels&quot;\n     [disabled]=&quot;true&quot; &lt;- will disable ok button\n     &gt;\n       &lt;span&gt;I am body of modal&lt;/span&gt;\n       &lt;span&gt;For simple string use body=&quot;string&quot;&lt;/span&gt;\n   &lt;/c8y-modal&gt;`\n})\n\nexport class MyModalComponent {\n\n closeSubject: Subject&lt;boolean&gt; = new Subject();\n labels : ModalLabels = {ok: &quot;customOK&quot;, cancel: &quot;customCancel&quot;};\n\n onDismiss(event){\n   this.closeSubject.next(false);\n }\n\n onClose(event) {\n   this.closeSubject.next(true);\n }\n}</code></pre></div><p>Showing modal:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-typescript\">import { BsModalService } from &quot;ngx-bootstrap/modal&quot;;\n\nconstructor(\n public bsModalService: BsModalService,\n) {}\n\nshowModal() {\n const modalRef = this.bsModalService.show(MyModalComponent);\n modalRef.content.closeSubject.subscribe(result =&gt; {\n   console.log(&#39;results:&#39;, result);\n });\n}</code></pre></div>","rawdescription":"\n\nC8Y component for creating modals.\n\nCreating custom modal:\n```typescript\n import { Component } from \"@angular/core\";\n import { Subject } from 'rxjs';\n\n@Component({\n selector: \"my-modal\",\n template: `\n   <c8y-modal title=\"CustomTitle\"\n     (onClose)=\"onClose($event)\"\n     (onDismiss)=\"onDismiss($event)\"\n     [labels]=\"labels\"\n     [disabled]=\"true\" <- will disable ok button\n     >\n       <span>I am body of modal</span>\n       <span>For simple string use body=\"string\"</span>\n   </c8y-modal>`\n})\n\nexport class MyModalComponent {\n\n closeSubject: Subject<boolean> = new Subject();\n labels : ModalLabels = {ok: \"customOK\", cancel: \"customCancel\"};\n\n onDismiss(event){\n   this.closeSubject.next(false);\n }\n\n onClose(event) {\n   this.closeSubject.next(true);\n }\n}\n```\n\nShowing modal:\n```typescript\nimport { BsModalService } from \"ngx-bootstrap/modal\";\n\nconstructor(\n public bsModalService: BsModalService,\n) {}\n\nshowModal() {\n const modalRef = this.bsModalService.show(MyModalComponent);\n modalRef.content.closeSubject.subscribe(result => {\n   console.log('results:', result);\n });\n}\n```\n","type":"component","assetsDirs":[],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"modal","type":"BsModalRef","deprecated":false,"deprecationMessage":""}],"line":118,"jsdoctags":[{"name":"modal","type":"BsModalRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":[],"accessors":{"labels":{"name":"labels","setSignature":{"name":"labels","type":"void","deprecated":false,"deprecationMessage":"","args":[{"type":"ModalLabels","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":110,"rawdescription":"\n\nCustom labels for 'cancel' and 'ok' buttons.\n","description":"<p>Custom labels for &#39;cancel&#39; and &#39;ok&#39; buttons.</p>\n","jsdoctags":[{"type":"ModalLabels","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"getSignature":{"name":"labels","type":"","returnType":"ModalLabels","line":114}}}}