{"name":"SigfoxDeviceRegistrationComponent","id":"component-SigfoxDeviceRegistrationComponent-03e3c58198e044242afb85151b470ecb5d7efec188dd21b28d0de65930c6b115b59b1da9a6ba5e991a5cebb4b4e98be6d37b4c33a7d5bb1a1bf28c87aa9cdfc4","file":"sigfox-device-registration/sigfox-device-registration.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"c8y-sigfox-device-registration","styleUrls":[],"styles":[],"templateUrl":["sigfox-device-registration.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"bsModalRef","deprecated":false,"deprecationMessage":"","type":"BsModalRef","indexKey":"","optional":false,"description":"","line":198,"modifierKind":[125]},{"name":"connections$","defaultValue":"this.getConnections$()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":41},{"name":"errorMessages$","defaultValue":"this.errors$.pipe(\n    map(errors => errors.map(error => error.message)),\n    map(messages => uniq(messages))\n  )","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":193},{"name":"errors$","defaultValue":"new BehaviorSubject<Error[]>([])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":192},{"name":"fields","defaultValue":"[\n    {\n      key: 'id',\n      type: 'string',\n      templateOptions: {\n        placeholder: 'FED987',\n        label: gettext('ID'),\n        required: true,\n        pattern: '(0x){0,1}[0-9A-F]+(h){0,1}'\n      },\n      validation: {\n        messages: {\n          pattern: gettext('Must be a valid hexadecimal number.')\n        }\n      }\n    },\n    {\n      key: 'pac',\n      type: 'string',\n      templateOptions: {\n        placeholder: 'FEDCBA9876543210',\n        label: gettext('PAC'),\n        required: true,\n        pattern: '^([a-fA-F0-9]{16})$'\n      },\n      validation: {\n        messages: {\n          pattern: gettext('Must be a valid 16 digit hexadecimal number.')\n        }\n      }\n    },\n    {\n      key: 'connection',\n      type: 'typeahead',\n      templateOptions: {\n        label: gettext('Connection'),\n        required: true,\n        c8yForOptions: this.connections$,\n        displayProperty: 'name',\n        valueProperties: ['name']\n      }\n    },\n    {\n      key: 'contract',\n      type: 'typeahead',\n      templateOptions: {\n        label: gettext('Contract'),\n        required: true,\n        placeholder: 'Free contract_25',\n        displayProperty: 'name',\n        valueProperties: ['id'],\n        description: gettext('Only active contracts with free slots are displayed.')\n      },\n      hooks: {\n        onInit: field => {\n          const connectionControl = field.form.get('connection');\n          connectionControl.valueChanges\n            .pipe(\n              takeUntil(this.unsubscribe$),\n              mergeMap(({ name }) => this.getContracts$(name))\n            )\n            .subscribe(\n              profiles => {\n                field.templateOptions.c8yForOptions = of(profiles);\n                field.formControl.setValue(null);\n              },\n              error => {\n                field.form.get('contract').setErrors({ contract: true });\n                field.validators.contract.message = error.message;\n              }\n            );\n        }\n      },\n      validators: {\n        contract: {\n          expression: (control: AbstractControl) => {\n            return control.status === 'VALID';\n          },\n          message: () => ''\n        }\n      }\n    },\n    {\n      key: 'deviceType',\n      type: 'typeahead',\n      templateOptions: {\n        label: gettext('Device protocol'),\n        required: true,\n        c8yForOptions: this.protocols$,\n        displayProperty: 'name',\n        valueProperties: ['id', 'name']\n      }\n    },\n    {\n      key: 'productCertificate',\n      type: 'string',\n      templateOptions: {\n        placeholder: 'P_001F_EDCB_01',\n        label: gettext('Product certificate key'),\n        pattern: 'P_[0-9A-F]{4}_[0-9A-F]{4}_[0-9A-F]{2}',\n        description: gettext(\n          'If no product certificate key is specified, the device is considered a prototype.'\n        )\n      },\n      validation: {\n        messages: {\n          pattern: (_error, _field: FormlyFieldConfig) =>\n            this.translateService.instant(\n              gettext('Must be a valid product certificate key, for example, {{ example }}'),\n              { example: 'P_001F_EDCB_01' }\n            )\n        }\n      }\n    }\n  ]","deprecated":false,"deprecationMessage":"","type":"FormlyFieldConfig[]","indexKey":"","optional":false,"description":"","line":68},{"name":"finalStepLabels","defaultValue":"{\n    back: gettext('Close')\n  }","deprecated":false,"deprecationMessage":"","type":"object","indexKey":"","optional":false,"description":"","line":187},{"name":"form","defaultValue":"new FormGroup({})","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":38},{"name":"load$","defaultValue":"this.connections$.pipe(\n    catchError((error: Error) => of(error)),\n    switchMap(connections => {\n      if (\n        connections instanceof Error &&\n        connections.name === SigfoxErrorName.NoConnectivitySettingsError\n      ) {\n        return of([connections]);\n      }\n      return forkJoin([\n        of(connections),\n        this.protocols$.pipe(catchError((error: Error) => of(error)))\n      ]);\n    }),\n    map(results => {\n      return results.filter(result => {\n        return result instanceof Error;\n      });\n    }),\n    switchMap(errors => {\n      return errors.length === 0 ? of([]) : throwError(errors);\n    })\n  )","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":44},{"name":"model","defaultValue":"{} as any","deprecated":false,"deprecationMessage":"","type":"SigfoxDeviceFormly","indexKey":"","optional":false,"description":"","line":39},{"name":"PAGING","defaultValue":"{\n    withTotalPages: true,\n    pageSize: 10\n  }","deprecated":false,"deprecationMessage":"","type":"object","indexKey":"","optional":false,"description":"","line":33,"modifierKind":[148]},{"name":"protocols$","defaultValue":"this.getProtocols$()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":40},{"name":"registrationStepLabels","defaultValue":"{\n    next: gettext('Register')\n  }","deprecated":false,"deprecationMessage":"","type":"object","indexKey":"","optional":false,"description":"","line":184},{"name":"state","defaultValue":"'loadPending'","deprecated":false,"deprecationMessage":"","type":"SigfoxState","indexKey":"","optional":false,"description":"","line":191},{"name":"stepper","deprecated":false,"deprecationMessage":"","type":"C8yStepper","indexKey":"","optional":false,"description":"","line":32},{"name":"unsubscribe$","defaultValue":"new Subject()","deprecated":false,"deprecationMessage":"","type":"Subject<void>","indexKey":"","optional":false,"description":"","line":42}],"methodsClass":[{"name":"create","args":[{"name":"event","type":"literal type","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":214,"deprecated":false,"deprecationMessage":"","modifierKind":[134],"jsdoctags":[{"name":"event","type":"literal type","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getConnections$","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":254,"deprecated":false,"deprecationMessage":""},{"name":"getContracts$","args":[{"name":"name","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":246,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"name","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getProtocols$","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":250,"deprecated":false,"deprecationMessage":""},{"name":"getSigfoxDeviceToSend","args":[],"optional":false,"returnType":"SigfoxDevice","typeParameters":[],"line":236,"deprecated":false,"deprecationMessage":""},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":258,"deprecated":false,"deprecationMessage":""}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[],"description":"","rawdescription":"\n","type":"component","assetsDirs":[],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"bsModalRef","type":"BsModalRef","deprecated":false,"deprecationMessage":""},{"name":"sigfoxService","type":"SigfoxProviderService","deprecated":false,"deprecationMessage":""},{"name":"translateService","type":"TranslateService","deprecated":false,"deprecationMessage":""},{"name":"gainsightService","type":"GainsightService","deprecated":false,"deprecationMessage":""}],"line":196,"jsdoctags":[{"name":"bsModalRef","type":"BsModalRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"sigfoxService","type":"SigfoxProviderService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"translateService","type":"TranslateService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"gainsightService","type":"GainsightService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":[]}