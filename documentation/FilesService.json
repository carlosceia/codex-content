{"name":"FilesService","id":"injectable-FilesService-8e6abd7de89cfe16b69490fda97d8c07dc3de5a29cfda9d69c5645e5b030a320be46ad1f8321434dacc3bc079c5c7654e605e9e2a0cc33a30ce9612b2135fb37","file":"core/common/files.service.ts","properties":[{"name":"DEFAULT_BYTES_LIMIT","defaultValue":"52428800","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":37,"modifierKind":[148]},{"name":"FILENAME_MAX_LENGTH","defaultValue":"128","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":38,"modifierKind":[148]},{"name":"fileTypeExtensionsMap","defaultValue":"{\n    [GENERIC_FILE_TYPE.ARCHIVE]: {\n      exts: ['7z', 'apk', 'cab', 'gz', 'iso', 'jar', 'rar', 'tar', 'zip'] as const\n    },\n    [GENERIC_FILE_TYPE.AUDIO]: {\n      exts: [\n        '3gp',\n        'aiff',\n        'aac',\n        'amr',\n        'm4a',\n        'm4p',\n        'mp3',\n        'oga',\n        'ogg',\n        'raw',\n        'wav',\n        'wma'\n      ] as const\n    },\n    [GENERIC_FILE_TYPE.CODE]: {\n      exts: ['aspx', 'exe', 'htm', 'html', 'jad', 'js', 'json', 'jsp', 'php', 'xml'] as const\n    },\n    [GENERIC_FILE_TYPE.EXCEL]: {\n      exts: ['xls', 'xlsx'] as const\n    },\n    [GENERIC_FILE_TYPE.IMAGE]: {\n      exts: ['bmp', 'gif', 'jpeg', 'jpg', 'png', 'tiff', 'svg', 'ico', 'apng', 'webp'] as const\n    },\n    [GENERIC_FILE_TYPE.PDF]: {\n      exts: ['pdf'] as const\n    },\n    [GENERIC_FILE_TYPE.POWERPOINT]: {\n      exts: ['ppt', 'pptx'] as const\n    },\n    [GENERIC_FILE_TYPE.TEXT]: {\n      exts: ['txt'] as const\n    },\n    [GENERIC_FILE_TYPE.VIDEO]: {\n      exts: ['asf', 'avi', 'flv', 'mov', 'mp4', 'ogv', 'qt', 'rm', 'rmvb', 'wmv', '3gp'] as const\n    },\n    [GENERIC_FILE_TYPE.WORD]: {\n      exts: ['doc', 'docx'] as const\n    },\n    [GENERIC_FILE_TYPE.EPL]: {\n      exts: ['mon'] as const\n    }\n  } as const satisfies { [key: string]: { exts: ReadonlyArray<string> } }","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":40}],"methods":[{"name":"checkMaxLength","args":[{"name":"files","type":"FileList","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":205,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nChecks if each file has a valid filename length.\n","description":"<p>Checks if each file has a valid filename length.</p>\n","jsdoctags":[{"name":{"pos":6312,"end":6317,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"files"},"type":"FileList","deprecated":false,"deprecationMessage":"","tagName":{"pos":6306,"end":6311,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Files to check.</p>\n"},{"tagName":{"pos":6340,"end":6347,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Returns true if each file has a valid filename length.</p>\n"}]},{"name":"download","args":[{"name":"binary","type":"IManagedObjectBinary","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":327,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nAllows to download a file (opens the browser download prompt).\n","description":"<p>Allows to download a file (opens the browser download prompt).</p>\n","modifierKind":[134],"jsdoctags":[{"name":{"pos":10409,"end":10415,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"binary"},"type":"IManagedObjectBinary","deprecated":false,"deprecationMessage":"","tagName":{"pos":10403,"end":10408,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>The binary managed object.</p>\n"}]},{"name":"extractFileExtensions","args":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string[]","typeParameters":[],"line":266,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nExtracts a list of file extensions from a string.\nCan accept generic file types check: [GENERIC_FILE_TYPE]{@link GENERIC_FILE_TYPE}.\n\nAccepted string format:\n* \".zip,.iso\",\n* \"zip,ISO\",\n* \"archive\".\nImportant: generic types cannot contain a dot. All values with a dot are treated as a normal extension.\n","description":"<p>Extracts a list of file extensions from a string.\nCan accept generic file types check: [GENERIC_FILE_TYPE]{@link GENERIC_FILE_TYPE}.</p>\n<p>Accepted string format:</p>\n<ul>\n<li>&quot;.zip,.iso&quot;,</li>\n<li>&quot;zip,ISO&quot;,</li>\n<li>&quot;archive&quot;.\nImportant: generic types cannot contain a dot. All values with a dot are treated as a normal extension.</li>\n</ul>\n","jsdoctags":[{"name":{"pos":8015,"end":8018,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"str"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":8009,"end":8014,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>String from which the file extensions are extracted (comma separated values).\nAccepted string format:</p>\n<ul>\n<li>&quot;.zip,.iso&quot;,</li>\n<li>&quot;zip,ISO&quot;,</li>\n<li>&quot;archive&quot;.\nImportant: generic types cannot contain a dot. All values with a dot are treated as a normal extension.</li>\n</ul>\n"},{"tagName":{"pos":8297,"end":8304,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Returns a list of the file extensions.</p>\n"}]},{"name":"fetchFileWithProgress$","args":[{"name":"binary","type":"IManagedObjectBinary","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<IFetchWithProgress>","typeParameters":[],"line":340,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nLoads the file to JavaScript memory.\nReturns an observable that emits progression status object,\nand after download is completed, blob property is populated with Blob result object.\nUnsubscribing from the returned observable aborts the file fetch request.\n\n","description":"<p>Loads the file to JavaScript memory.\nReturns an observable that emits progression status object,\nand after download is completed, blob property is populated with Blob result object.\nUnsubscribing from the returned observable aborts the file fetch request.</p>\n","jsdoctags":[{"name":{"pos":10865,"end":10871,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"binary"},"type":"IManagedObjectBinary","deprecated":false,"deprecationMessage":"","tagName":{"pos":10859,"end":10864,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>The binary managed object.</p>\n"}]},{"name":"fileNamesHaveValidExtension","args":[{"name":"fileNames","type":"string | string[]","deprecated":false,"deprecationMessage":""},{"name":"accept","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":190,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nChecks if file names have allowed extension.\nIf the accept parameter is not specified, all extensions are accepted.\n","description":"<p>Checks if file names have allowed extension.\nIf the accept parameter is not specified, all extensions are accepted.</p>\n","jsdoctags":[{"name":{"pos":5562,"end":5571,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"fileNames"},"type":"string | string[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":5556,"end":5561,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>The file names to check.</p>\n"},{"name":{"pos":5609,"end":5615,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"accept"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":5603,"end":5608,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>String of comma separated file extensions and generic types (<a href=\"GENERIC_FILE_TYPE\">GENERIC_FILE_TYPE</a>), e.g. .zip,.7z,excel.</p>\n"},{"tagName":{"pos":5751,"end":5758,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Returns true if each file has allowed extension.</p>\n"}]},{"name":"getFile","args":[{"name":"binary","type":"IManagedObjectBinary","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Promise<File>","typeParameters":[],"line":304,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nAllows to get a File representation of an managed object binary. Can be used\nto convert this file toBase64 to show it to the end-user.\n","description":"<p>Allows to get a File representation of an managed object binary. Can be used\nto convert this file toBase64 to show it to the end-user.</p>\n","modifierKind":[134],"jsdoctags":[{"name":{"pos":9472,"end":9478,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"binary"},"type":"IManagedObjectBinary","deprecated":false,"deprecationMessage":"","tagName":{"pos":9466,"end":9471,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>The binary managed object</p>\n"},{"tagName":{"pos":9511,"end":9518,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>The file representation.</p>\n"}]},{"name":"getFileExtension","args":[{"name":"fileOrFileName","type":"File | string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string | undefined","typeParameters":[],"line":216,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nExtracts the file extension.\n","description":"<p>Extracts the file extension.</p>\n","jsdoctags":[{"name":{"pos":6613,"end":6627,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"fileOrFileName"},"type":"File | string","deprecated":false,"deprecationMessage":"","tagName":{"pos":6607,"end":6612,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>File or name of file from which the extension should be extracted.</p>\n"},{"tagName":{"pos":6701,"end":6708,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Returns the file extension or undefined if the file has no extension.</p>\n"}]},{"name":"getFileExtensions","args":[],"optional":false,"returnType":"string[]","typeParameters":[],"line":231,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nList of file extensions.\n","description":"<p>List of file extensions.</p>\n","jsdoctags":[{"tagName":{"pos":7166,"end":7173,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Returns list of file extensions.</p>\n"}]},{"name":"getGenericFileTypes","args":[],"optional":false,"returnType":"GENERIC_FILE_TYPE[]","typeParameters":[],"line":239,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nThe list of generic file types.\n","description":"<p>The list of generic file types.</p>\n","jsdoctags":[{"tagName":{"pos":7380,"end":7387,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Returns the list of generic file types.</p>\n"}]},{"name":"getHashSumOfFile","args":[{"name":"file","type":"File | Blob","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Promise<string>","typeParameters":[],"line":315,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nAllows to calculate the hash sum of the provided file.\n","description":"<p>Allows to calculate the hash sum of the provided file.</p>\n","modifierKind":[134],"jsdoctags":[{"name":{"pos":9895,"end":9899,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"file"},"type":"File | Blob","deprecated":false,"deprecationMessage":"","tagName":{"pos":9889,"end":9894,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>The file to hash.</p>\n"},{"tagName":{"pos":9924,"end":9931,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>The SHA-256 hash of the file.</p>\n"}]},{"name":"haveValidExtensions","args":[{"name":"files","type":"FileList | File | File[]","deprecated":false,"deprecationMessage":""},{"name":"accept","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":168,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nChecks whether files have allowed extensions.\nIf the accept parameter is not specified, all extensions are accepted.\n","description":"<p>Checks whether files have allowed extensions.\nIf the accept parameter is not specified, all extensions are accepted.</p>\n","jsdoctags":[{"name":{"pos":4676,"end":4681,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"files"},"type":"FileList | File | File[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":4670,"end":4675,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Files to check.</p>\n"},{"name":{"pos":4710,"end":4716,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"accept"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":4704,"end":4709,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>String of comma separated file extensions and generic types (<a href=\"GENERIC_FILE_TYPE\">GENERIC_FILE_TYPE</a>), e.g. .zip,.7z,excel.</p>\n"},{"tagName":{"pos":4852,"end":4859,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Returns true if each file has allowed extension.</p>\n"}]},{"name":"haveValidSizes","args":[{"name":"files","type":"FileList","deprecated":false,"deprecationMessage":""},{"name":"maxFileSizeInBytes","type":"number","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"Promise<boolean>","typeParameters":[],"line":108,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nChecks if files have valid size.\n","description":"<p>Checks if files have valid size.</p>\n","modifierKind":[134],"jsdoctags":[{"name":{"pos":2725,"end":2730,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"files"},"type":"FileList","deprecated":false,"deprecationMessage":"","tagName":{"pos":2719,"end":2724,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Files to check.</p>\n"},{"name":"maxFileSizeInBytes","type":"number","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}},{"tagName":{"pos":2753,"end":2760,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Returns true if each file has the correct size.</p>\n"}]},{"name":"loadBytesSizeLimit","args":[],"optional":false,"returnType":"Promise<number>","typeParameters":[],"line":120,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nChecks the system file size limit, if not available returns the default value.\nDefault limit: [DEFAULT_BYTES_LIMIT]{@link DEFAULT_BYTES_LIMIT}\n","description":"<p>Checks the system file size limit, if not available returns the default value.\nDefault limit: [DEFAULT_BYTES_LIMIT]{@link DEFAULT_BYTES_LIMIT}</p>\n","modifierKind":[134],"jsdoctags":[{"tagName":{"pos":3235,"end":3242,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Returns promise with the limit value.</p>\n"}]},{"name":"size","args":[{"name":"file","type":"File | IManagedObjectBinary","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"number","typeParameters":[],"line":154,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nChecks the size of the file\n","description":"<p>Checks the size of the file</p>\n","jsdoctags":[{"name":{"pos":4131,"end":4135,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"file"},"type":"File | IManagedObjectBinary","deprecated":false,"deprecationMessage":"","tagName":{"pos":4125,"end":4130,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>File to check.</p>\n"},{"tagName":{"pos":4157,"end":4164,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Returns size of the file in bytes.</p>\n"}]},{"name":"toBase64","args":[{"name":"file","type":"File","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Promise<string>","typeParameters":[],"line":289,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nConverts a file to a base64 image string.\n\n","description":"<p>Converts a file to a base64 image string.</p>\n","jsdoctags":[{"name":{"pos":8936,"end":8940,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"file"},"type":"File","deprecated":false,"deprecationMessage":"","tagName":{"pos":8930,"end":8935,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>The file to convert to base 64.</p>\n"},{"tagName":{"pos":8979,"end":8986,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>The image string in base64 format.</p>\n"}]},{"name":"uploadFileWithProgress$","args":[{"name":"file","type":"Stream | Buffer | File | Blob","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<IFetchWithProgress>","typeParameters":[],"line":365,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"file","type":"Stream | Buffer | File | Blob","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"systemOptionsService","type":"SystemOptionsService","deprecated":false,"deprecationMessage":""},{"name":"inventoryBinaryService","type":"InventoryBinaryService","deprecated":false,"deprecationMessage":""}],"line":96,"jsdoctags":[{"name":"systemOptionsService","type":"SystemOptionsService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"inventoryBinaryService","type":"InventoryBinaryService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":[],"type":"injectable"}