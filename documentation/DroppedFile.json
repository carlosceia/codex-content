{"name":"DroppedFile","id":"interface-DroppedFile-bdc34d3dd9094bea71bf121cbb7183efbda906969e9a0076181f64e6729384e5e440065ded2e2a2cccc61ea1384adb2079b4766eff284fefee289ab28e55cad3","file":"core/drop-area/drop-area.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","properties":[{"name":"file","deprecated":false,"deprecationMessage":"","type":"File","indexKey":"","optional":false,"description":"","line":387}],"indexSignatures":[],"kind":173,"methods":[{"name":"readAsArrayBuffer","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":389,"deprecated":false,"deprecationMessage":""},{"name":"readAsBinaryString","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":390,"deprecated":false,"deprecationMessage":""},{"name":"readAsDataURL","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":391,"deprecated":false,"deprecationMessage":""},{"name":"readAsJson","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":392,"deprecated":false,"deprecationMessage":""},{"name":"readAsText","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":388,"deprecated":false,"deprecationMessage":""}],"extends":[],"readme":"<h1>Drop area component</h1>\n<p>A drop-zone which is a file selector allowing users to select file(s) from their file system, either natively or by drag and drop.\nAllows to select a binary for upload, or to specify uri to external resource.\nComponent provides drop area functionality allowing you to just drop files within specified area.\nAttributes:</p>\n<ul>\n<li>class=&quot;drop-area-sm&quot; - prevents component from occupying whole available area</li>\n<li>dropped-file object of droppedFiles[] type: \n  droppedFiles[];\n  element {\n      file {\n          lastModified: 168271687167, \n          lastModifiedDate: Tue Nov 17 2020 08:37:11 GMT+0000, \n          name: &quot;Dropped File.txt, \n          size: 35279,\n          type: &quot;&quot;, \n          webkitRelativePath: &quot;&quot;\n      }\n  }\n  could be handled by following function:\n  onFileDropped(droppedFiles: DroppedFile[]) {\n      this.onFilesPicked.emit({\n              droppedFiles\n          });\n      }</li>\n<li>title - display info for user, i.e. &#39;Drop file or click to browse&#39;</li>\n<li>maxAllowedFiles - describe how many files can be dropped once, accept only numbers</li>\n<li>files - type FileList, it is used to check the length of dropped array of files</li>\n<li>$event - object of droppedFiles[] type</li>\n</ul>\n<h2>Usage</h2>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;div&gt;\n    &lt;c8y-drop-area\n        class=&quot;drop-area-sm&quot;\n        (dropped)=&quot;onFileDropped($event)&quot;\n        [title]=&quot;&#39;Drop file or click to browse&#39;&quot;\n        [maxAllowedFiles]=&quot;maxAllowedFiles&quot;\n        [files]=&quot;droppedFiles&quot;&gt;\n    &lt;/c8y-drop-area&gt;\n&lt;/div&gt;</code></pre></div><b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">    &lt;c8y-drop-area&gt;\n      &lt;h4&gt;Put file here, it&#39;s a drop area&lt;/h4&gt;\n    &lt;c8y-drop-area&gt;</code></pre></div>"}