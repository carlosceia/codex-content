{"name":"WidgetConfigService","id":"injectable-WidgetConfigService-d8f702e5b1a23e24e9f09f4fc194810a474834b28097dc2f3644dbaadbd1e3ab8d5bf9031ffb8eeb73f465a4a8aaa9068c6f3113d7de1f2ed654be116292cb37","file":"context-dashboard/widget-config.service.ts","properties":[{"name":"currentConfig$","defaultValue":"this._currentConfig$.asObservable()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>The current configuration of the selected widget as observable.\nOnly to read the value. Use <code>updateConfig</code> to update the configuration.</p>\n","line":68,"rawdescription":"\n\nThe current configuration of the selected widget as observable.\nOnly to read the value. Use `updateConfig` to update the configuration.\n"},{"name":"currentSections$","defaultValue":"this.selected$.pipe(\n    tap(() => (this.beforeSaveCallbacks = [])),\n    withLatestFrom(this._currentConfig$),\n    mergeMap(([selectedWidget, config]) =>\n      selectedWidget === null\n        ? of([])\n        : this.widgetConfigSectionService.items$.pipe(\n            map(sections => [\n              ...this.getWidgetDefaultSections(selectedWidget, config),\n              ...sections.filter(section => section.widgetId === selectedWidget.id)\n            ])\n          )\n    ),\n    mergeMap((sections: WidgetConfigSectionDefinition[]) => {\n      if (sections.length === 0) {\n        return Promise.resolve([]);\n      }\n      return Promise.all(\n        sections.map(async section => ({\n          component: await section.loadComponent(),\n          label: section.label,\n          priority: section.priority || 0,\n          expanded: section.expanded || false,\n          initialInputs: section.initialInputs\n        }))\n      );\n    }),\n    map(sections => sortByPriority(sections)),\n    shareReplay(1)\n  )","deprecated":false,"deprecationMessage":"","type":"Observable<WidgetConfigSection[]>","indexKey":"","optional":false,"description":"<p>Returns all the current sections.</p>\n<p>A configuration section is a component that can be used to configure a widget.\nSections should be added via the hookWidgetConfig.</p>\n","line":76,"rawdescription":"\n\nReturns all the current sections.\n\nA configuration section is a component that can be used to configure a widget.\nSections should be added via the hookWidgetConfig.\n"},{"name":"hasConfig$","defaultValue":"this.currentSections$.pipe(map(sections => sections.length > 0))","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Indicates if the current selected widget has a configuration or not.</p>\n","line":110,"rawdescription":"\n\nIndicates if the current selected widget has a configuration or not.\n"},{"name":"preview$","defaultValue":"new BehaviorSubject<true | DynamicComponentDefinition | TemplateRef<any>>(null)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>The preview of the currently selected widget. If <code>null</code> no preview is shown\n(except if the selected widget has no configuration).</p>\n","line":44,"rawdescription":"\n\nThe preview of the currently selected widget. If `null` no preview is shown\n(except if the selected widget has no configuration).\n"},{"name":"previewViewState$","defaultValue":"combineLatest([this.hasConfig$, this.preview$]).pipe(\n    map(([hasConfig, preview]) => {\n      if (preview === null && hasConfig) {\n        return 'noPreview';\n      } else if (preview instanceof TemplateRef) {\n        return 'templatePreview';\n      } else if (preview === true || !hasConfig) {\n        return 'configPreview';\n      }\n    })\n  )","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>The view state of the preview. Can be one of:</p>\n<ul>\n<li><code>noPreview</code>: No preview is shown and an empty state is shown.</li>\n<li><code>configPreview</code>: The preview is shown with the view component of the selected widget.</li>\n<li><code>templatePreview</code>: The preview is shown with any template passed with setPreview method.</li>\n</ul>\n","line":118,"rawdescription":"\n\nThe view state of the preview. Can be one of:\n- `noPreview`: No preview is shown and an empty state is shown.\n- `configPreview`: The preview is shown with the view component of the selected widget.\n- `templatePreview`: The preview is shown with any template passed with setPreview method.\n"},{"name":"selected$","defaultValue":"new BehaviorSubject<DynamicComponentDefinition>(null)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>The currently selected widget definition.</p>\n","line":49,"rawdescription":"\n\nThe currently selected widget definition.\n"},{"name":"selectedComponent$","defaultValue":"new BehaviorSubject<DynamicComponentComponent>(null)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>The currently selected widget component.</p>\n","line":54,"rawdescription":"\n\nThe currently selected widget component.\n"}],"methods":[{"name":"addOnBeforeSave","args":[{"name":"callback","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"config","type":"ContextWidgetConfig","deprecated":false,"deprecationMessage":"","optional":true}]}],"optional":false,"returnType":"void","typeParameters":[],"line":153,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nAdds a callback which can check the configuration before saving.\n","description":"<p>Adds a callback which can check the configuration before saving.</p>\n","jsdoctags":[{"name":"callback","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"config","type":"ContextWidgetConfig","deprecated":false,"deprecationMessage":"","optional":true}],"tagName":{"text":"param"}}]},{"name":"canSave","args":[],"optional":false,"returnType":"Promise<boolean>","typeParameters":[],"line":162,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nReturns true if the configuration can be saved.\n","description":"<p>Returns true if the configuration can be saved.</p>\n"},{"name":"deselectWidget","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":216,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nDeselect the currently selected.\n","description":"<p>Deselect the currently selected.</p>\n"},{"name":"initConfig","args":[{"name":"config","type":"ContextWidgetConfig","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":201,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nUsed to initialize the configuration of the selected widget.\n","description":"<p>Used to initialize the configuration of the selected widget.</p>\n","jsdoctags":[{"name":{"pos":6402,"end":6408,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"config"},"type":"ContextWidgetConfig","deprecated":false,"deprecationMessage":"","tagName":{"pos":6396,"end":6401,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>The configuration to set.</p>\n"}]},{"name":"selectWidget","args":[{"name":"selected","type":"DynamicComponentDefinition","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":209,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nSelect a widget\n","description":"<p>Select a widget</p>\n","jsdoctags":[{"name":{"pos":6568,"end":6576,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"selected"},"type":"DynamicComponentDefinition","deprecated":false,"deprecationMessage":"","tagName":{"pos":6562,"end":6567,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>The widget to select.</p>\n"}]},{"name":"setPreview","args":[{"name":"preview","type":" | DynamicComponentDefinition | TemplateRef<any>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":228,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nEnables a preview.\n               If set to a DynamicComponentDefinition, the preview will be rendered with the given component.\n               If set to a TemplateRef, the preview will be rendered with the given template.\n","description":"<p>Enables a preview.\n               If set to a DynamicComponentDefinition, the preview will be rendered with the given component.\n               If set to a TemplateRef, the preview will be rendered with the given template.</p>\n","jsdoctags":[{"name":{"pos":6916,"end":6923,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"preview"},"type":" | DynamicComponentDefinition | TemplateRef<any>","deprecated":false,"deprecationMessage":"","tagName":{"pos":6910,"end":6915,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>If set to true, the view component of the current widget will be taken to render the preview.\nIf set to a DynamicComponentDefinition, the preview will be rendered with the given component.\nIf set to a TemplateRef, the preview will be rendered with the given template.</p>\n"}]},{"name":"updateConfig","args":[{"name":"change","type":"Partial<ContextWidgetConfig>","deprecated":false,"deprecationMessage":""},{"name":"force","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"false"}],"optional":false,"returnType":"void","typeParameters":[],"line":189,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nUpdates the configuration of the selected widget.\n             Use with caution and only if you want to reset the configuration to some default.\n","description":"<p>Updates the configuration of the selected widget.\n             Use with caution and only if you want to reset the configuration to some default.</p>\n","jsdoctags":[{"name":{"pos":5759,"end":5765,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"change"},"type":"Partial<ContextWidgetConfig>","deprecated":false,"deprecationMessage":"","tagName":{"pos":5753,"end":5758,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>The change to apply to the configuration.</p>\n"},{"name":{"pos":5820,"end":5825,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"force"},"type":"","deprecated":false,"deprecationMessage":"","defaultValue":"false","tagName":{"pos":5814,"end":5819,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>If set to true, the configuration will be updated even if no changes are made. Also concurrency checks are ignored and no change is emitted on the component.\nUse with caution and only if you want to reset the configuration to some default.</p>\n"}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"widgetConfigSectionService","type":"WidgetConfigSectionService","deprecated":false,"deprecationMessage":""}],"line":134,"jsdoctags":[{"name":"widgetConfigSectionService","type":"WidgetConfigSectionService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"accessors":{"currentConfig":{"name":"currentConfig","getSignature":{"name":"currentConfig","type":"","returnType":"","line":60,"rawdescription":"\n\nThe current configuration of the selected widget.\nOnly to read the value. Use `updateConfig` to update the configuration.\n","description":"<p>The current configuration of the selected widget.\nOnly to read the value. Use <code>updateConfig</code> to update the configuration.</p>\n"}}},"extends":[],"type":"injectable"}