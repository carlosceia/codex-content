{"name":"DatapointsTableViewService","id":"injectable-DatapointsTableViewService-f6b4824400fd8aeba48ea151cbb221abc7e8f3e62fa8202a1913822eaa2ae51cf6f44410f07d612232a34b2ff49c4bb90fbb35e0922a6e4daf6b42342647c0db","file":"widgets/implementations/datapoints-table/datapoints-table-view/datapoints-table-view.service.ts","properties":[],"methods":[{"name":"filterOutInactiveDatapoints","args":[{"name":"datapoints","type":"KPIDetails[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"KPIDetails[]","typeParameters":[],"line":46,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nFilters out inactive data points from the given array.\n\n","description":"<p>Filters out inactive data points from the given array.</p>\n","jsdoctags":[{"name":{"pos":1120,"end":1130,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"datapoints"},"type":"KPIDetails[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":1114,"end":1119,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>The array of data points to filter.</li>\n</ul>\n"},{"tagName":{"pos":1175,"end":1182,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An array of data points that are active.</p>\n"}]},{"name":"findMinMaxValues","args":[{"name":"valuesArray","type":"MinMaxValues[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Value | null","typeParameters":[],"line":236,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nFinds the overall minimum and maximum values from an array of objects containing 'min' and 'max' properties.\n\nIf the array contains only one object, that object's 'min' and 'max' values will be returned.\n\n\n```html\nconst values = [\n  { min: 1, max: 10 }\n];\n```\nconst result = findMinMaxValues(values);\n// result is { min: 1, max: 10 }\n","description":"<p>Finds the overall minimum and maximum values from an array of objects containing &#39;min&#39; and &#39;max&#39; properties.</p>\n<p>If the array contains only one object, that object&#39;s &#39;min&#39; and &#39;max&#39; values will be returned.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">const values = [\n  { min: 1, max: 10 }\n];</code></pre></div><p>const result = findMinMaxValues(values);\n// result is { min: 1, max: 10 }</p>\n","jsdoctags":[{"name":{"pos":7450,"end":7461,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"valuesArray"},"type":"MinMaxValues[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":7444,"end":7449,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>An array with objects, where each contains &#39;min&#39; and &#39;max&#39; properties.</li>\n</ul>\n"},{"tagName":{"pos":7541,"end":7548,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An object with the smallest &#39;min&#39; and largest &#39;max&#39; values found in the array.</p>\n"},{"tagName":{"pos":7639,"end":7646,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"example"},"comment":"<p>const values = [\n  { min: 1, max: 10 }\n];</p>\n<p>const result = findMinMaxValues(values);\n// result is { min: 1, max: 10 }</p>\n"}]},{"name":"generateDataPointMap","args":[{"name":"dataList","type":"DatapointTableItem[]","deprecated":false,"deprecationMessage":""},{"name":"columnsHeadersReferences","type":"TableColumnHeader[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"DataPointsTableMap","typeParameters":[],"line":283,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nGenerates and populates a map with data points.\n\nThis function processes the provided data points and organizes them into a map structure\nwhere each key is a unique combination of date and device identifiers, and the value is an\narray of data points (or null values) associated with that key. This structured data is then\nused in the data point table to render the data appropriately.\n\n","description":"<p>Generates and populates a map with data points.</p>\n<p>This function processes the provided data points and organizes them into a map structure\nwhere each key is a unique combination of date and device identifiers, and the value is an\narray of data points (or null values) associated with that key. This structured data is then\nused in the data point table to render the data appropriately.</p>\n","jsdoctags":[{"name":{"pos":9345,"end":9353,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"dataList"},"type":"DatapointTableItem[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":9339,"end":9344,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>The list of data point table items to be processed.</li>\n</ul>\n"},{"name":{"pos":9420,"end":9444,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"columnsHeadersReferences"},"type":"TableColumnHeader[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":9414,"end":9419,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>The list of column headers used to determine the order and structure of the map values.</li>\n</ul>\n"},{"tagName":{"pos":9541,"end":9548,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A map where the key is a datapoint identifier containing the date and device name, and the value is an array of data point table items or null.</p>\n"}]},{"name":"getAllActiveSeriesDataMap","args":[{"name":"datapointsValuesDataMap","type":"DatapointsValuesDataMap","deprecated":false,"deprecationMessage":""},{"name":"config","type":"DatapointsTableConfig","deprecated":false,"deprecationMessage":""},{"name":"roundSeconds","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Promise<Map<string | number, ISeries>>","typeParameters":[],"line":100,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nRetrieves the active data points series data and returns it as a map.\n\n                      If true, the seconds will be rounded to 0.\n                      If false, the seconds will be displayed as they are.\n","description":"<p>Retrieves the active data points series data and returns it as a map.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">                  If true, the seconds will be rounded to 0.\n                  If false, the seconds will be displayed as they are.</code></pre></div>","modifierKind":[134],"jsdoctags":[{"name":{"pos":2579,"end":2602,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"datapointsValuesDataMap"},"type":"DatapointsValuesDataMap","deprecated":false,"deprecationMessage":"","tagName":{"pos":2573,"end":2578,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>A map of data point sources with their associated series.</li>\n</ul>\n"},{"name":{"pos":2675,"end":2681,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"config"},"type":"DatapointsTableConfig","deprecated":false,"deprecationMessage":"","tagName":{"pos":2669,"end":2674,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>The configuration of the data points table.</li>\n</ul>\n"},{"name":{"pos":2740,"end":2752,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"roundSeconds"},"type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"pos":2734,"end":2739,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>Whether to round the seconds or not.\nIf true, the seconds will be rounded to 0.\nIf false, the seconds will be displayed as they are.</li>\n</ul>\n"},{"tagName":{"pos":2948,"end":2955,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A Promise that resolves to a Map object with data point IDs as keys and DataObject as values or undefined when all series has forbidden access.</p>\n"}]},{"name":"getColumnHeaders","args":[{"name":"datapointsWithValues","type":"KPIDetails[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"TableColumnHeader[]","typeParameters":[],"line":183,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nCreates the column headers for the devices in the data points table.\n\n","description":"<p>Creates the column headers for the devices in the data points table.</p>\n","jsdoctags":[{"name":{"pos":5945,"end":5965,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"datapointsWithValues"},"type":"KPIDetails[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":5939,"end":5944,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>An array of data points.</li>\n</ul>\n"},{"tagName":{"pos":5999,"end":6006,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An array of column headers for the devices.</p>\n"}]},{"name":"getDatapointsWithValues","args":[{"name":"datapoints","type":"KPIDetails[]","deprecated":false,"deprecationMessage":""},{"name":"datapointsSeriesDataMap","type":"DatapointsSeriesDataMap","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"DatapointWithValues[]","typeParameters":[],"line":146,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nCreates an array of DatapointsWithValues based on the provided datapoints and datapointsSeriesDataMap.\n\nFinds an index of a current data point within series object and based on that index filters values array.\n\n","description":"<p>Creates an array of DatapointsWithValues based on the provided datapoints and datapointsSeriesDataMap.</p>\n<p>Finds an index of a current data point within series object and based on that index filters values array.</p>\n","jsdoctags":[{"name":{"pos":4665,"end":4675,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"datapoints"},"type":"KPIDetails[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":4659,"end":4664,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>An array of data points.</li>\n</ul>\n"},{"name":{"pos":4715,"end":4738,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"datapointsSeriesDataMap"},"type":"DatapointsSeriesDataMap","deprecated":false,"deprecationMessage":"","tagName":{"pos":4709,"end":4714,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>A map containing series data for data points.</li>\n</ul>\n"},{"tagName":{"pos":4793,"end":4800,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An array of DatapointsWithValues.</p>\n"}]},{"name":"getSeriesWithoutPermissionToRead","args":[{"name":"activeDatapointsSeriesData","type":"Map<string | number | ISeries> | undefined","deprecated":false,"deprecationMessage":""},{"name":"activeDatapointsIdsWithSeries","type":"DatapointsValuesDataMap","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"literal type[]","typeParameters":[],"line":410,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"activeDatapointsSeriesData","type":"Map<string | number | ISeries> | undefined","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"activeDatapointsIdsWithSeries","type":"DatapointsValuesDataMap","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"groupByDateAndDevice","args":[{"name":"dataList","type":"DatapointTableItem[]","deprecated":false,"deprecationMessage":""},{"name":"references","type":"TableColumnHeader[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"GroupedDatapointTableItem[]","typeParameters":[],"line":263,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nGroups a list of data points by date and device, based on given references.\n\n","description":"<p>Groups a list of data points by date and device, based on given references.</p>\n","jsdoctags":[{"name":{"pos":8425,"end":8433,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"dataList"},"type":"DatapointTableItem[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":8419,"end":8424,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>The list of data points to be grouped.</li>\n</ul>\n"},{"name":{"pos":8487,"end":8497,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"references"},"type":"TableColumnHeader[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":8481,"end":8486,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>The column headers that serve as references for grouping.</li>\n</ul>\n"},{"tagName":{"pos":8564,"end":8571,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An array of grouped data points, where each group corresponds to a unique date and device.</p>\n"}]},{"name":"groupSeriesByDeviceId","args":[{"name":"activeDatapoints","type":"KPIDetails[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"DatapointsValuesDataMap","typeParameters":[],"line":78,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nReturns a map of active data points device IDs with their corresponding series.\n\nExample output:\n```typescript\nnew Map([\n  [\n    \"844657202\",\n    [\n      \"c8y_Temperature.T\"\n    ]\n  ],\n  [\n    \"32666427\",\n    [\n      \"c8y_Battery.Battery\"\n    ]\n  ]\n]);\n```\n","description":"<p>Returns a map of active data points device IDs with their corresponding series.</p>\n<p>Example output:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-typescript\">new Map([\n  [\n    &quot;844657202&quot;,\n    [\n      &quot;c8y_Temperature.T&quot;\n    ]\n  ],\n  [\n    &quot;32666427&quot;,\n    [\n      &quot;c8y_Battery.Battery&quot;\n    ]\n  ]\n]);</code></pre></div>","jsdoctags":[{"name":"activeDatapoints","type":"KPIDetails[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":1944,"end":1951,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A map where the key is the data point ID and the value is an array of data point series.</p>\n"}]},{"name":"hasMultipleDatapoints","args":[{"name":"datapoints","type":"KPIDetails[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"datapoints","type":"KPIDetails[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"hasSecondsAndMillisecondsEqualZero","args":[{"name":"timeString","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":427,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"timeString","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"mapDatapointsWithValuesToList","args":[{"name":"datapointsWithValues","type":"DatapointWithValues[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"DatapointTableItem[]","typeParameters":[],"line":191,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"datapointsWithValues","type":"DatapointWithValues[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"mergeDatapoints","args":[{"name":"map","type":"DataPointsTableMap","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"GroupedDatapointTableItem[]","typeParameters":[],"line":321,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nMerges the data points from the given map into an array of grouped data point table items.\n\n","description":"<p>Merges the data points from the given map into an array of grouped data point table items.</p>\n","jsdoctags":[{"name":{"pos":11086,"end":11089,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"map"},"type":"DataPointsTableMap","deprecated":false,"deprecationMessage":"","tagName":{"pos":11080,"end":11085,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>The map containing the data points to be merged.</li>\n</ul>\n"},{"tagName":{"pos":11147,"end":11154,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An array of grouped data point table items.</p>\n"}]},{"name":"prepareTimeRange","args":[{"name":"interval","type":"Interval","deprecated":false,"deprecationMessage":""},{"name":"dateFromInput","type":"string","deprecated":false,"deprecationMessage":""},{"name":"dateToInput","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"literal type","typeParameters":[],"line":354,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nPrepares the updated time range based on the selected interval.\n\nIn case of a 'custom' interval or no quantity, the original date range is returned.\n\n","description":"<p>Prepares the updated time range based on the selected interval.</p>\n<p>In case of a &#39;custom&#39; interval or no quantity, the original date range is returned.</p>\n","jsdoctags":[{"name":{"pos":12194,"end":12202,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"interval"},"type":"Interval","deprecated":false,"deprecationMessage":"","tagName":{"pos":12188,"end":12193,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>The selected interval type.</li>\n</ul>\n"},{"name":"dateFromInput","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"dateToInput","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":12239,"end":12246,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An object containing the <code>dateFrom</code> and <code>dateTo</code> in ISO string format.</p>\n"}]},{"name":"sortDataByDateDescending","args":[{"name":"data","type":"GroupedDatapointTableItem[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"GroupedDatapointTableItem[]","typeParameters":[],"line":340,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"data","type":"GroupedDatapointTableItem[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"subtractTime","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""},{"name":"amount","type":"number","deprecated":false,"deprecationMessage":""},{"name":"unit","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Date","typeParameters":[],"line":387,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nSubtracts an amount of time from a given date.\n\n","description":"<p>Subtracts an amount of time from a given date.</p>\n","jsdoctags":[{"name":{"pos":13066,"end":13070,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"date"},"type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"pos":13060,"end":13065,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>The original date.</li>\n</ul>\n"},{"name":{"pos":13104,"end":13110,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"amount"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":13098,"end":13103,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>The amount of time units to subtract.</li>\n</ul>\n"},{"name":{"pos":13163,"end":13167,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"unit"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":13157,"end":13162,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\n<li>The unit of time to subtract (e.g., minutes, hours, days, weeks, months).</li>\n</ul>\n"},{"tagName":{"pos":13250,"end":13257,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A new date with the specified time subtracted.</p>\n"}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"dataFetchingService","type":"DataFetchingService","deprecated":false,"deprecationMessage":""}],"line":37,"jsdoctags":[{"name":"dataFetchingService","type":"DataFetchingService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":[],"type":"injectable"}