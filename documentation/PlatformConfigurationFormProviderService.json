{"name":"PlatformConfigurationFormProviderService","id":"injectable-PlatformConfigurationFormProviderService-88c525b0e49f10e3252278ab46d41bbdac3878b90c4a7904541e8258b08a0dfaf06e834d9ea34a362eb71ad91da4ff6fa43c43552b0951d9e4471df1e0259892","file":"platform-configuration/platform-configuration-form-provider.service.ts","properties":[{"name":"exampleTomorrowDate","defaultValue":"(() => {\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    return this.c8yDatePipe.transform(tomorrow, 'yyyy-MM-ddTHH:mm:ssZ');\n  })()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":11},{"name":"lineBreakHint","defaultValue":"gettext('Use [Enter] or <br> tag to add a new line')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":9},{"name":"optionsGroups","defaultValue":"[\n    {\n      title: gettext('Passwords'),\n      id: 'passwordsOptions',\n      items: [\n        this.platformConfigurationFormDefinitions['system.password.enforce.strength'],\n        this.platformConfigurationFormDefinitions['system.password.limit.validity'],\n        this.platformConfigurationFormDefinitions['system.password.history.size'],\n        this.platformConfigurationFormDefinitions['system.password.green.min-length']\n      ]\n    },\n    {\n      title: gettext('Two-factor authentication'),\n      id: 'twoFactorAuthenticationOptions',\n      items: [\n        this.platformConfigurationFormDefinitions['two-factor-authentication.token.sms.template']\n      ]\n    },\n    {\n      title: gettext('Support link'),\n      id: 'supportLinkOptions',\n      items: [this.platformConfigurationFormDefinitions['system.support.url']]\n    },\n    {\n      title: gettext('Password reset'),\n      id: 'passwordResetOptions',\n      items: [\n        this.platformConfigurationFormDefinitions['passwordReset.sendNotificationToUnknownEmails'],\n        this.platformConfigurationFormDefinitions['passwordReset.token.email.template'],\n        this.platformConfigurationFormDefinitions['passwordReset.user.not.found.email.template'],\n        this.platformConfigurationFormDefinitions['passwordReset.email.subject'],\n        this.platformConfigurationFormDefinitions['passwordReset.success.email.template'],\n        this.platformConfigurationFormDefinitions['passwordReset.invite.template']\n      ]\n    },\n    {\n      title: gettext('Support user'),\n      id: 'supportUserOptions',\n      items: [\n        this.platformConfigurationFormDefinitions['system.support-user.enabled'],\n        this.platformConfigurationFormDefinitions['system.support-user.validity-limit']\n      ]\n    },\n    {\n      title: gettext('Email server'),\n      id: 'emailServerOptions',\n      items: [\n        this.platformConfigurationFormDefinitions['ui.email.protocolAndEncryption'],\n        this.platformConfigurationFormDefinitions['email.host'],\n        this.platformConfigurationFormDefinitions['email.port'],\n        this.platformConfigurationFormDefinitions['email.username'],\n        this.platformConfigurationFormDefinitions['credentials.email.password'],\n        this.platformConfigurationFormDefinitions['email.from']\n      ]\n    },\n    {\n      title: gettext('Data export'),\n      id: 'dataExportOptions',\n      items: [\n        this.platformConfigurationFormDefinitions['export.data.mail.subject'],\n        this.platformConfigurationFormDefinitions['export.data.mail.text'],\n        this.platformConfigurationFormDefinitions['export.data.mail.text.userunauthorized']\n      ]\n    },\n    {\n      title: gettext('Storage limit'),\n      id: 'storageLimitOptions',\n      items: [\n        this.platformConfigurationFormDefinitions['storageLimit.warning.email.subject'],\n        this.platformConfigurationFormDefinitions['storageLimit.warning.email.template'],\n        this.platformConfigurationFormDefinitions['storageLimit.process.email.subject'],\n        this.platformConfigurationFormDefinitions['storageLimit.process.email.template']\n      ]\n    },\n    {\n      title: gettext('Suspending tenants'),\n      id: 'suspendingTenantsOptions',\n      items: [\n        this.platformConfigurationFormDefinitions['tenantSuspend.mail.sendtosuspended'],\n        this.platformConfigurationFormDefinitions['tenantSuspend.mail.additional.address'],\n        this.platformConfigurationFormDefinitions['tenantSuspend.mail.subject'],\n        this.platformConfigurationFormDefinitions['tenantSuspend.mail.text']\n      ]\n    }\n  ]","deprecated":false,"deprecationMessage":"","type":"[]","indexKey":"","optional":false,"description":"","line":312},{"name":"platformConfigurationFormDefinitions","defaultValue":"{\n    'system.password.enforce.strength': {\n      formId: 'system.password.enforce.strength',\n      title: gettext('Enforce \"green\" passwords for all users'),\n      type: 'boolean',\n      control: new FormControl('')\n    },\n    'system.password.limit.validity': {\n      formId: 'system.password.limit.validity',\n      title: gettext('Password validity limit (days)'),\n      description: gettext(\n        'The number of days a password may be valid before it must be reset; minimum value is 0, maximum value is 999999. Leave empty to use the value from the tenant options.'\n      ),\n      type: 'number',\n      control: new FormControl('', [Validators.min(0), Validators.max(999999)])\n    },\n    'system.password.history.size': {\n      formId: 'system.password.history.size',\n      title: gettext('Password history size'),\n      description: gettext(\n        'The number of times before the current password can be reused. Minimum value is 0, preset value is 10.'\n      ),\n      type: 'number',\n      placeholder: `${gettext('e.g. {{ example }}')}`,\n      placeholderParams: { example: '10' },\n      control: new FormControl('', [Validators.min(0)])\n    },\n    'system.password.green.min-length': {\n      formId: 'system.password.green.min-length',\n      title: gettext('Minimal length of \"green\" password'),\n      description: gettext(\n        'The minimum number of characters which are required for a safe password. Minimum (and preset) value is 8, maximum value is 32. Leave empty to skip this constraint.'\n      ),\n      type: 'number',\n      control: new FormControl('', [Validators.min(8), Validators.max(32)])\n    },\n    'ui.email.protocolAndEncryption': {\n      formId: 'ui.email.protocolAndEncryption',\n      title: gettext('Protocol and encryption'),\n      type: 'select',\n      options: [\n        {\n          value: 'SMTP_PLAIN',\n          name: gettext('SMTP (no encryption)')\n        },\n        {\n          value: 'SMTP_ENCRYPTED',\n          name: gettext('SMTP (STARTTLS)')\n        },\n        {\n          value: 'SMTPS_ENCRYPTED',\n          name: gettext('SMTPS (SSL/TLS)')\n        }\n      ],\n      skipOnSave: true,\n      control: new FormControl('')\n    },\n    'email.protocol': {\n      formId: 'email.protocol',\n      title: gettext('Protocol'),\n      type: 'select',\n      options: [\n        {\n          value: 'smtp',\n          name: 'SMTP'\n        },\n        {\n          value: 'smtps',\n          name: 'SMTPS'\n        }\n      ],\n      control: new FormControl('')\n    },\n    'email.connection.encrypted': {\n      formId: 'email.connection.encrypted',\n      title: gettext('Connection encrypted'),\n      type: 'boolean',\n      control: new FormControl('')\n    },\n    'email.host': {\n      formId: 'email.host',\n      title: gettext('Host'),\n      type: 'string',\n      placeholder: `${gettext('e.g. {{ example }}')}`,\n      placeholderParams: { example: 'localhost' },\n      control: new FormControl('')\n    },\n    'email.port': {\n      formId: 'email.port',\n      title: gettext('Port'),\n      type: 'number',\n      placeholder: `${gettext('e.g. {{ example }}')}`,\n      placeholderParams: { example: '25' },\n      control: new FormControl('', [Validators.min(1), Validators.max(65535)])\n    },\n    'email.username': {\n      formId: 'email.username',\n      title: gettext('Username'),\n      type: 'string',\n      control: new FormControl('')\n    },\n    'credentials.email.password': {\n      formId: 'credentials.email.password',\n      title: gettext('Password'),\n      type: 'password',\n      control: new FormControl('')\n    },\n    'email.from': {\n      formId: 'email.from',\n      title: gettext('Sender address'),\n      type: 'string',\n      control: new FormControl('', [Validators.email])\n    },\n    'passwordReset.sendNotificationToUnknownEmails': {\n      formId: 'passwordReset.sendNotificationToUnknownEmails',\n      title: gettext('Send notifications to unknown email addresses'),\n      type: 'boolean',\n      control: new FormControl('')\n    },\n    'passwordReset.email.subject': {\n      formId: 'passwordReset.email.subject',\n      title: gettext('Email subject'),\n      description: gettext('Subject used for all password reset related emails'),\n      type: 'string',\n      control: new FormControl('')\n    },\n    'passwordReset.token.email.template': {\n      formId: 'passwordReset.token.email.template',\n      title: gettext('Password reset email template (when address is known)'),\n      description: `${gettext(\n        'Placeholders: {tenant-domain}, {host}, {token}, {username}, {email}. Whole link to reset password can be, for example: {tenant-domain}/apps/devicemanagement/index.html?token={token}&email={email}'\n      )}`,\n      type: 'textarea',\n      control: new FormControl(''),\n      lineBreakHint: true\n    },\n    'passwordReset.user.not.found.email.template': {\n      formId: 'passwordReset.user.not.found.email.template',\n      title: gettext('Password reset email template (when address is not known)'),\n      type: 'textarea',\n      control: new FormControl(''),\n      lineBreakHint: true\n    },\n    'passwordReset.success.email.template': {\n      formId: 'passwordReset.success.email.template',\n      title: gettext('Password change confirmation email template'),\n      description: `${gettext('Placeholders: {host}, {tenant-domain}, {username}')}`,\n      type: 'textarea',\n      control: new FormControl(''),\n      lineBreakHint: true\n    },\n    'passwordReset.invite.template': {\n      formId: 'passwordReset.invite.template',\n      title: gettext('Invitation email template'),\n      description: `${gettext(\n        'Placeholders: {tenant-domain}, {host}, {token}, {username}, {email}. Whole link to setup password can be, for example: {tenant-domain}/apps/devicemanagement/index.html?token={token}'\n      )}`,\n      type: 'textarea',\n      control: new FormControl(''),\n      lineBreakHint: true\n    },\n    'export.data.mail.subject': {\n      formId: 'export.data.mail.subject',\n      title: gettext('Email subject'),\n      description: gettext(\n        'Placeholders: {tenant-domain}, {host}, {binaryId}. Whole link to result file is: {tenant-domain}/inventory/binaries/{binaryId}'\n      ),\n      type: 'string',\n      control: new FormControl('')\n    },\n    'export.data.mail.text': {\n      formId: 'export.data.mail.text',\n      title: gettext('Email template'),\n      description: `${gettext(\n        'Placeholders: {tenant-domain}, {host}, {binaryId}. Whole link to result file is: {tenant-domain}/inventory/binaries/{binaryId}'\n      )}`,\n      type: 'textarea',\n      control: new FormControl(''),\n      lineBreakHint: true\n    },\n    'export.data.mail.text.userunauthorized': {\n      formId: 'export.data.mail.text.userunauthorized',\n      title: gettext('User unauthorized error message'),\n      description: gettext('Placeholders: {user}, {exportApi}'),\n      type: 'string',\n      control: new FormControl('')\n    },\n    'two-factor-authentication.token.sms.template': {\n      formId: 'two-factor-authentication.token.sms.template',\n      title: gettext('Verification token SMS template'),\n      description: gettext('Placeholder: {token} - created token'),\n      type: 'string',\n      placeholder: gettext('e.g.: Verification code: {token}'),\n      control: new FormControl('')\n    },\n    'system.support.url': {\n      formId: 'system.support.url',\n      title: gettext('URL'),\n      type: 'string',\n      description: gettext(\n        'Possible values: URL string, \"false`KEEP_ORIGINAL`\" (hides the link) or leave empty (uses the default). Applications can override this setting by defining \"supportUrl`KEEP_ORIGINAL`\" application option.'\n      ),\n      control: new FormControl('')\n    },\n    'storageLimit.warning.email.subject': {\n      formId: 'storageLimit.warning.email.subject',\n      title: gettext('Warning email subject'),\n      description: gettext('Email which will be sent one day before data is deleted'),\n      type: 'string',\n      control: new FormControl('')\n    },\n    'storageLimit.warning.email.template': {\n      formId: 'storageLimit.warning.email.template',\n      title: gettext('Warning email template'),\n      description: `${gettext(\n        'Email which will be sent one day before data is deleted. Placeholders: {tenant-domain}, {tenant}, {size} - storage usage in %'\n      )}`,\n      type: 'textarea',\n      control: new FormControl(''),\n      lineBreakHint: true\n    },\n    'storageLimit.process.email.subject': {\n      formId: 'storageLimit.process.email.subject',\n      title: gettext('Limit exceeded email subject'),\n      description: gettext('Email which will be sent after over-limit data has been deleted'),\n      type: 'string',\n      control: new FormControl('')\n    },\n    'storageLimit.process.email.template': {\n      formId: 'storageLimit.process.email.template',\n      title: gettext('Limit exceeded email template'),\n      description: `${gettext(\n        'Email which will be sent after over-limit data has been deleted. Placeholders: {tenant-domain}, {tenant}, {size} - storage usage in %'\n      )}`,\n      type: 'textarea',\n      control: new FormControl(''),\n      lineBreakHint: true\n    },\n    'tenantSuspend.mail.sendtosuspended': {\n      formId: 'tenantSuspend.mail.sendtosuspended',\n      title: gettext(\"Send email to suspended tenant's administrator\"),\n      type: 'boolean',\n      control: new FormControl('')\n    },\n    'tenantSuspend.mail.additional.address': {\n      formId: 'tenantSuspend.mail.additional.address',\n      title: gettext('Tenant suspended email additional receiver'),\n      type: 'string',\n      control: new FormControl('', [Validators.email])\n    },\n    'tenantSuspend.mail.subject': {\n      formId: 'tenantSuspend.mail.subject',\n      title: gettext('Tenant suspended email subject'),\n      description: gettext(\n        \"Placeholder: {tenant} - suspended tenant's ID; {tenant-domain} - tenant's domain\"\n      ),\n      type: 'string',\n      control: new FormControl('')\n    },\n    'tenantSuspend.mail.text': {\n      formId: 'tenantSuspend.mail.text',\n      title: gettext('Tenant suspended email template'),\n      description: `${gettext(\n        \"Placeholder: {tenant} - suspended tenant's ID; {tenant-domain} - tenant's domain\"\n      )}`,\n      type: 'textarea',\n      control: new FormControl(''),\n      lineBreakHint: true\n    },\n    'system.support-user.enabled': {\n      formId: 'system.support-user.enabled',\n      title: gettext('Activate support user'),\n      description: gettext(\n        'Possible values: \"true`KEEP_ORIGINAL`\", \"false`KEEP_ORIGINAL`\", or a specific date until the user should remain active, for example, \"{{ exampleDate }}\". Leaving it blank, will set the value to \"true`KEEP_ORIGINAL`\".'\n      ),\n      descriptionTranslateParams: {\n        exampleDate: this.exampleTomorrowDate\n      },\n      type: 'string',\n      control: new FormControl(''),\n      placeholder: this.exampleTomorrowDate\n    },\n    'system.support-user.validity-limit': {\n      formId: 'system.support-user.validity-limit',\n      title: gettext('Validity limit'),\n      description: gettext(\n        'Each support user request from subtenant user will prolong support user access by the given number of hours (default: 24 hours). Leaving it blank, will set the value to \"24\".'\n      ),\n      type: 'number',\n      placeholder: `${gettext('e.g. {{ example }}')}`,\n      placeholderParams: { example: '24' },\n      control: new FormControl('', [Validators.min(0)])\n    }\n  }","deprecated":false,"deprecationMessage":"","type":"object","indexKey":"","optional":false,"description":"","line":17}],"methods":[],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"c8yDatePipe","type":"DatePipe","deprecated":false,"deprecationMessage":""}],"line":396,"jsdoctags":[{"name":"c8yDatePipe","type":"DatePipe","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":[],"type":"injectable"}