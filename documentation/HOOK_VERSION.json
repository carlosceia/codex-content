{"name":"HOOK_VERSION","ctype":"miscellaneous","subtype":"variable","file":"core/version/version.model.ts","deprecated":true,"deprecationMessage":"Consider using the `hookVersion` function instead.","type":"","defaultValue":"new InjectionToken<Version[]>('HOOK_VERSION')","rawdescription":"An extension HOOK can use either a pure value:\n```typescript\n { provide: HOOK_X, useValue: { ...hookValue }, multi: true }\n```\n\nOr an array to directly register multiple:\n```typescript\n { provide: HOOK_X, useValue: [{ ...hookValues }], multi: true }\n```\n\nOr an ExtensionFactory which allows to define a get() function. This function\ngets called on each navigation with the current route and can return values\nasync (observable or promise).\n```typescript\n { provide: HOOK_X, useFactory: { get: (route) => doSomethingAsync(route) }, multi: true }\n```","description":"<p>An extension HOOK can use either a pure value:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-typescript\"> { provide: HOOK_X, useValue: { ...hookValue }, multi: true }</code></pre></div><p>Or an array to directly register multiple:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-typescript\"> { provide: HOOK_X, useValue: [{ ...hookValues }], multi: true }</code></pre></div><p>Or an ExtensionFactory which allows to define a get() function. This function\ngets called on each navigation with the current route and can return values\nasync (observable or promise).</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-typescript\"> { provide: HOOK_X, useFactory: { get: (route) =&gt; doSomethingAsync(route) }, multi: true }</code></pre></div>"}