{"name":"GeneralDeviceRegistrationComponent","id":"component-GeneralDeviceRegistrationComponent-dd94559df98d406d8024cbfa7e83c0dde6044c9d008e6e813caf04a0c3ec13ca81ce53f4dd82ba86b0c38597e65811c61288ce5b659047303b29f5dd98cf639a","file":"register-device/general/general-device-registration.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"c8y-general-device-registration","styleUrls":[],"styles":[],"templateUrl":["general-device-registration.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"bsModalRef","deprecated":false,"deprecationMessage":"","type":"BsModalRef","indexKey":"","optional":false,"description":"","line":228,"modifierKind":[125]},{"name":"certificateAuthorityFeatureEnabled","defaultValue":"this.featureCacheService.getFeatureState('certificate-authority')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":54},{"name":"failed","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"literal type[]","indexKey":"","optional":false,"description":"","line":76},{"name":"fields","defaultValue":"[\n    {\n      type: 'array',\n      key: 'devicesToCreate',\n      props: {\n        addText: gettext('Add device'),\n        addTextDataCy: 'add-device'\n      },\n      fieldArray: {\n        fieldGroup: [\n          {\n            key: 'id',\n            type: 'string',\n            focus: true,\n            props: {\n              placeholder: '0123ab32fcd',\n              label: gettext('Device ID'),\n              required: true\n            },\n            validators: {\n              unique: {\n                expression: (control: FormControl) => {\n                  const found = (\n                    control.root.get('devicesToCreate') as FormArray<\n                      FormGroup<{ id: FormControl<string> }>\n                    >\n                  ).controls\n                    .map(el => el.controls.id)\n                    .find(el => el !== control && el.value === control.value);\n                  return !found;\n                },\n                message: () => gettext('Device ID duplicates are not allowed')\n              }\n            }\n          },\n          {\n            key: 'tenant',\n            type: 'typeahead',\n            expressions: {\n              hide: field => {\n                const formState = field.options?.formState;\n                if (!formState?.canLoadTenants) {\n                  field.formControl.setValue(null);\n                }\n                return !formState?.canLoadTenants || false;\n              }\n            },\n            defaultValue: { id: this.MANAGEMENT },\n            props: {\n              label: gettext('Add to tenant'),\n              required: true,\n              c8yForOptions: this.canLoadTenants$().pipe(\n                filter(canLoad => canLoad),\n                switchMap(() => this.getTenants$())\n              ) as Observable<IResultList<ITenant>>,\n              container: 'body',\n              displayProperty: 'id',\n              valueProperties: ['id']\n            },\n            hooks: {\n              onInit: _field =>\n                this.canLoadTenants$().pipe(\n                  tap(canLoad => {\n                    this.options.formState.canLoadTenants = canLoad;\n                    this.cd.detectChanges();\n                  })\n                )\n            }\n          },\n          {\n            key: 'group',\n            type: 'typeahead',\n            expressions: {\n              'props.disabled': (field: FormlyFieldConfig) => {\n                const formState = field.options?.formState;\n                const model = field.model;\n                if (formState?.canLoadTenants) {\n                  if (model?.tenant?.id !== this.MANAGEMENT) {\n                    field.formControl.setValue(null);\n                  }\n                  return !(model?.tenant?.id === this.MANAGEMENT);\n                }\n                delete field?.props?.description;\n                return false;\n              }\n            },\n            props: {\n              disabled: false,\n              label: gettext('Add to group'),\n              description: gettext(\n                'You can add device to specific group for management tenant only.'\n              ),\n              container: 'body',\n              displayProperty: 'name',\n              valueProperties: ['id'],\n              c8yForOptions: this.getGroups$()\n            },\n            hooks: {\n              onInit: _field =>\n                this.canLoadTenants$().pipe(\n                  tap(canLoad => {\n                    this.options.formState.canLoadTenants = canLoad;\n                    this.cd.detectChanges();\n                  })\n                )\n            }\n          },\n          {\n            key: 'oneTimePassword',\n            type: 'string',\n            expressions: {\n              hide: field => !field.options?.formState?.useEST\n            },\n            props: {\n              placeholder: 'TruDN3H45L0',\n              label: gettext('One-time password'),\n              required: true\n            },\n            hooks: {\n              onInit: _field =>\n                this.useEST$.pipe(\n                  tap(useEST => {\n                    this.options.formState.useEST = useEST;\n                    this.cd.detectChanges();\n                  })\n                )\n            }\n          }\n        ]\n      }\n    }\n  ]","deprecated":false,"deprecationMessage":"","type":"FormlyFieldConfig[]","indexKey":"","optional":false,"description":"","line":78},{"name":"FILTER","defaultValue":"{\n    withTotalPages: true,\n    pageSize: 25\n  }","deprecated":false,"deprecationMessage":"","type":"object","indexKey":"","optional":false,"description":"","line":48,"modifierKind":[148]},{"name":"form","defaultValue":"new FormGroup({})","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":57},{"name":"isLoading$","deprecated":false,"deprecationMessage":"","type":"Observable<boolean>","indexKey":"","optional":false,"description":"","line":74},{"name":"MANAGEMENT","defaultValue":"'management'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":47,"modifierKind":[148]},{"name":"model","defaultValue":"{\n    devicesToCreate: [{} as GeneralDeviceRegistrationModelType]\n  }","deprecated":false,"deprecationMessage":"","type":"object","indexKey":"","optional":false,"description":"","line":58},{"name":"options","defaultValue":"{\n    formState: {\n      canLoadTenants: true,\n      useEST: this.useEST$.getValue()\n    }\n  }","deprecated":false,"deprecationMessage":"","type":"FormlyFormOptions","indexKey":"","optional":false,"description":"","line":61},{"name":"PRODUCT_EXPERIENCE","defaultValue":"{\n    EVENT: 'deviceRegistration',\n    COMPONENT: 'single-general-registration',\n    RESULT: { SUCCESS: 'registrationSuccess', FAILURE: 'registrationFailure' }\n  }","deprecated":false,"deprecationMessage":"","type":"object","indexKey":"","optional":false,"description":"","line":68},{"name":"result","defaultValue":"new Promise<void>((resolve, reject) => {\n    this.onSuccessfulClosing = resolve;\n    this.onCancel = reject;\n  })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":211},{"name":"success","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"literal type[]","indexKey":"","optional":false,"description":"","line":75},{"name":"useEST$","defaultValue":"new BehaviorSubject<boolean>(false)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":53}],"methodsClass":[{"name":"cancel","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":268,"deprecated":false,"deprecationMessage":""},{"name":"close","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":263,"deprecated":false,"deprecationMessage":""},{"name":"fixErrors","args":[{"name":"event","type":"literal type","deprecated":false,"deprecationMessage":""},{"name":"failedRequests","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":249,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"event","type":"literal type","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"failedRequests","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngAfterViewInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":236,"deprecated":false,"deprecationMessage":""},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":240,"deprecated":false,"deprecationMessage":""},{"name":"registerDevice","args":[{"name":"eventObject","type":"literal type","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":245,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"eventObject","type":"literal type","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[],"description":"","rawdescription":"\n","type":"component","assetsDirs":[],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"tenantUIService","type":"TenantUiService","deprecated":false,"deprecationMessage":""},{"name":"tenantService","type":"TenantService","deprecated":false,"deprecationMessage":""},{"name":"registerDeviceService","type":"RegisterDeviceService","deprecated":false,"deprecationMessage":""},{"name":"inventoryService","type":"InventoryService","deprecated":false,"deprecationMessage":""},{"name":"cd","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":""},{"name":"bsModalRef","type":"BsModalRef","deprecated":false,"deprecationMessage":""},{"name":"gainsightService","type":"GainsightService","deprecated":false,"deprecationMessage":""},{"name":"deviceRegistrationService","type":"DeviceRegistrationBulkService","deprecated":false,"deprecationMessage":""},{"name":"featureCacheService","type":"FeatureCacheService","deprecated":false,"deprecationMessage":""}],"line":220,"jsdoctags":[{"name":"tenantUIService","type":"TenantUiService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"tenantService","type":"TenantService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"registerDeviceService","type":"RegisterDeviceService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"inventoryService","type":"InventoryService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"cd","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"bsModalRef","type":"BsModalRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"gainsightService","type":"GainsightService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"deviceRegistrationService","type":"DeviceRegistrationBulkService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"featureCacheService","type":"FeatureCacheService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":[],"implements":["AfterViewInit","OnDestroy"]}