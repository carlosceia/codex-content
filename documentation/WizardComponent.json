{"name":"WizardComponent","id":"component-WizardComponent-f503531c2c2b01f507e6c9c1326e1968f902a49e1e7eec700e86a5f111e2b5c3bac547ac4dde4d95626cdda0d035aaa5eb402060b3a56525d07cc7e41a2b0f97","file":"core/wizard/wizard.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"c8y-wizard","styleUrls":[],"styles":[],"templateUrl":["./wizard.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"id","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nThe id parameter identifies the particular wizard and can be used to refer to it when hooking wizard entries.\nExample: \"wizardId\".\n","description":"<p>The id parameter identifies the particular wizard and can be used to refer to it when hooking wizard entries.\nExample: &quot;wizardId&quot;.</p>\n","line":90,"type":"string","decorators":[]},{"name":"wizardConfig","defaultValue":"{}","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nA configuration object that allows you to set header values, both text and icon.\n","description":"<p>A configuration object that allows you to set header values, both text and icon.</p>\n","line":94,"type":"WizardConfig","decorators":[]}],"outputsClass":[{"name":"onClose","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nThe event that is emitted when the wizard is closed.\n","description":"<p>The event that is emitted when the wizard is closed.</p>\n","line":102,"type":"EventEmitter<any>"},{"name":"onReset","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nThe event that is emitted when the wizard is reseted.\n","description":"<p>The event that is emitted when the wizard is reseted.</p>\n","line":106,"type":"EventEmitter<any>"},{"name":"onSelect","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nThe event that is emitted when the wizard entry is clicked.\n","description":"<p>The event that is emitted when the wizard entry is clicked.</p>\n","line":110,"type":"EventEmitter<WizardEntry>"}],"propertiesClass":[{"name":"body","deprecated":false,"deprecationMessage":"","type":"TemplateRef<any>","indexKey":"","optional":false,"description":"","line":83,"decorators":[{"name":"ViewChild","stringifiedArguments":"'bodyRef', {static: true}"}],"modifierKind":[170]},{"name":"bodyTemplate$","defaultValue":"this.wizardService.bodyTemplate$.pipe(\n    filter(body => body.wizardId === this.id)\n  )","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":114,"modifierKind":[148]},{"name":"bsModalRef","deprecated":false,"deprecationMessage":"","type":"BsModalRef","indexKey":"","optional":false,"description":"","line":123,"modifierKind":[125]},{"name":"componentInitialState","defaultValue":"{}","deprecated":false,"deprecationMessage":"","type":"Partial<T>","indexKey":"","optional":false,"description":"<p>A state that will be assigned to the actual component contained by the wizard.</p>\n","line":98,"rawdescription":"\n\nA state that will be assigned to the actual component contained by the wizard.\n"},{"name":"footer","deprecated":false,"deprecationMessage":"","type":"TemplateRef<any>","indexKey":"","optional":false,"description":"","line":84,"decorators":[{"name":"ViewChild","stringifiedArguments":"'footerRef', {static: true}"}],"modifierKind":[170]},{"name":"footerTemplate$","defaultValue":"this.wizardService.footerTemplate$.pipe(\n    filter(footer => footer.wizardId === this.id)\n  )","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":117,"modifierKind":[148]},{"name":"header","deprecated":false,"deprecationMessage":"","type":"TemplateRef<any>","indexKey":"","optional":false,"description":"","line":82,"decorators":[{"name":"ViewChild","stringifiedArguments":"'headerRef', {static: true}"}],"modifierKind":[170]},{"name":"headerTemplate$","defaultValue":"this.wizardService.headerTemplate$.pipe(\n    filter(header => header.wizardId === this.id)\n  )","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":111,"modifierKind":[148]},{"name":"outlet","deprecated":false,"deprecationMessage":"","type":"WizardOutletComponent","indexKey":"","optional":false,"description":"","line":85,"decorators":[{"name":"ViewChild","stringifiedArguments":"WizardOutletComponent"}],"modifierKind":[170]},{"name":"wizardService","deprecated":false,"deprecationMessage":"","type":"WizardService","indexKey":"","optional":false,"description":"","line":122,"modifierKind":[125]}],"methodsClass":[{"name":"close","args":[{"name":"result","type":"any","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":144,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nCloses the wizard.\n","description":"<p>Closes the wizard.</p>\n","jsdoctags":[{"name":{"pos":4091,"end":4097,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"result"},"type":"any","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":4085,"end":4090,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Custom result object which will be emitted via onClose output.</p>\n"}]},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":126,"deprecated":false,"deprecationMessage":""},{"name":"onPath","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":150,"deprecated":false,"deprecationMessage":""},{"name":"reset","args":[{"name":"result","type":"any","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":134,"deprecated":false,"deprecationMessage":"","rawdescription":"\n\nResets the wizard.\n","description":"<p>Resets the wizard.</p>\n","jsdoctags":[{"name":{"pos":3862,"end":3868,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"result"},"type":"any","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":3856,"end":3861,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Custom result object which will be emitted via onReset output.</p>\n"}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"NgTemplateOutlet"},{"name":"IconDirective","type":"directive"},{"name":"NgIf"},{"name":"WizardOutletComponent","type":"component"},{"name":"C8yTranslateDirective","type":"directive"},{"name":"AsyncPipe","type":"pipe"},{"name":"C8yTranslatePipe","type":"pipe"}],"description":"<p>A generic component that is intended to serve as the building block of more wizards.</p>\n<p><strong>Example</strong></p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;button\n   title=&quot;Add application&quot;\n   class=&quot;btn btn-primary&quot;\n   (click)=&quot;addApplication()&quot;\n &gt;\n   Add application\n &lt;/button&gt;</code></pre></div><b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-ts\">import { Component } from &#39;&#64;angular/core&#39;;\nimport { WizardConfig, WizardService, Wizard } from &#39;&#64;c8y/ngx-components&#39;;\nimport { ModalOptions } from &#39;ngx-bootstrap/modal&#39;;\n\n&#64;Component({\n selector: &#39;c8y-add-application-wizard&#39;,\n templateUrl: &#39;./templatePath&#39;\n})\nexport class AddApplicationWizardComponent {\n  constructor(private wizardService: WizardService) {}\n\n  addApplication() {\n    const wizardConfig: WizardConfig = {\n      headerText: &#39;Add Application&#39;,\n      headerIcon: &#39;c8y-icon-modules&#39;,\n      bodyHeaderText: &#39;Select methods&#39;,\n      bodyHeaderIcon: &#39;c8y-icon-modules&#39;\n    };\n\n    const initialState: Wizard = {\n      wizardConfig,\n      id: &#39;uploadApplication&#39;\n    };\n\n    const modalOptions: ModalOptions = { initialState };\n\n    this.wizardService.show(modalOptions);\n  }\n}</code></pre></div>","rawdescription":"\n\nA generic component that is intended to serve as the building block of more wizards.\n\n**Example**\n```html\n<button\n   title=\"Add application\"\n   class=\"btn btn-primary\"\n   (click)=\"addApplication()\"\n >\n   Add application\n </button>\n```\n\n```ts\nimport { Component } from '@angular/core';\nimport { WizardConfig, WizardService, Wizard } from '@c8y/ngx-components';\nimport { ModalOptions } from 'ngx-bootstrap/modal';\n\n@Component({\n selector: 'c8y-add-application-wizard',\n templateUrl: './templatePath'\n})\nexport class AddApplicationWizardComponent {\n  constructor(private wizardService: WizardService) {}\n\n  addApplication() {\n    const wizardConfig: WizardConfig = {\n      headerText: 'Add Application',\n      headerIcon: 'c8y-icon-modules',\n      bodyHeaderText: 'Select methods',\n      bodyHeaderIcon: 'c8y-icon-modules'\n    };\n\n    const initialState: Wizard = {\n      wizardConfig,\n      id: 'uploadApplication'\n    };\n\n    const modalOptions: ModalOptions = { initialState };\n\n    this.wizardService.show(modalOptions);\n  }\n}\n```\n","type":"component","assetsDirs":[],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"wizardService","type":"WizardService","deprecated":false,"deprecationMessage":""},{"name":"bsModalRef","type":"BsModalRef","deprecated":false,"deprecationMessage":""}],"line":119,"jsdoctags":[{"name":"wizardService","type":"WizardService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"bsModalRef","type":"BsModalRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":[],"implements":["Wizard","OnInit"],"readme":"<h1>Wizard component</h1>\n<p>This is a generic component serving as a base block for building custom wizards.\nIt provides many possibilities for composing custom wizards, all of these methods will be described below.</p>\n<p>The main responsibility of a generic wizard is to present the available options to the user, and then respond to the user&#39;s choice. On this basis, the user will be redirected to a specific component under the given path, or that component will be rendered in the wizard.</p>\n<h2>Usage examples</h2>\n<h3>Minimal setup</h3>\n<p>By using the wizard configuration object (represented by WizardConfig interface), you can provide the content that will be displayed in the header and in the body header section.</p>\n<p>The <code>id</code> parameter determines the display type of the wizard.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-ts\">import { Component } from &#39;&#64;angular/core&#39;;\nimport { WizardConfig, WizardModalService } from &#39;&#64;c8y/ngx-components&#39;;\nimport { ModalOptions } from &#39;ngx-bootstrap/modal&#39;;\n\n&#64;Component({\n  selector: &#39;wizard-demo&#39;\n})\nexport class WizardDemoComponent {\n  constructor(private c8yWizardModalService: WizardModalService) {}\n\n  addApplication() {\n    const wizardConfig: WizardConfig = {\n      headerText: &#39;Add Application&#39;,\n      headerIcon: &#39;c8y-icon-modules&#39;,\n      bodyHeaderText: &#39;Select methods&#39;,\n      bodyHeaderIcon: &#39;c8y-icon-modules&#39;\n    };\n\n    const initialState = {\n      id: &#39;wizardId&#39;,\n      wizardConfig\n    };\n\n    const modalOptions: ModalOptions = { initialState };\n\n    this.c8yWizardModalService.show(modalOptions);\n  }\n}</code></pre></div><p>You can use <code>BsModalService</code> directly from <code>ngx-bootstrap/modal</code> to show the wizard.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-ts\">import { Component } from &#39;&#64;angular/core&#39;;\nimport { WizardConfig, WizardComponent } from &#39;&#64;c8y/ngx-components&#39;;\nimport { ModalOptions } from &#39;ngx-bootstrap/modal&#39;;\n\n&#64;Component({\n  selector: &#39;wizard-demo&#39;\n})\nexport class WizardDemoComponent {\n  constructor(private bsModalService: BsModalService) {}\n\n  addApplication() {\n    const wizardConfig: WizardConfig = {\n      headerText: &#39;Add Application&#39;,\n      headerIcon: &#39;c8y-icon-modules&#39;,\n      bodyHeaderText: &#39;Select methods&#39;,\n      bodyHeaderIcon: &#39;c8y-icon-modules&#39;\n    };\n\n    // Configure the initial state of the wizard.\n    const initialState = {\n      id: &#39;wizardId&#39;,\n      wizardConfig\n    };\n    const modalOptions: ModalOptions = { initialState };\n\n    // Configure modal options.\n    const options = {\n      class: &#39;modal-sm&#39;,\n      ariaDescribedby: &#39;modal-body&#39;,\n      ariaLabelledBy: &#39;modal-title&#39;,\n      backdrop: &#39;static&#39;,\n      ...modalOptions\n    } as ModalOptions&lt;WizardComponent&gt;;\n\n    this.bsModalService.show&lt;WizardComponent&gt;(WizardComponent, options);\n  }\n}</code></pre></div><h4>Add an entry to the wizard menu (hookWizard)</h4>\n<p>We&#39;ve added a new hook that adds an entry to the wizard&#39;s menu. This menu entry will lead to a <strong>&quot;ContainerComponent&quot;</strong> created below.</p>\n<p><strong>If the wizard contains only one entry without a path, the list will be skipped.</strong></p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-ts\">import { NgModule } from &#39;&#64;angular/core&#39;;\nimport { hookWizard } from &#39;&#64;c8y/ngx-components&#39;;\nimport { ContainerComponent } from &#39;pathToYourContainerComponent&#39;;\n\n&#64;NgModule({\n  declarations: [ContainerComponent],\n  providers: [\n    hookWizard({\n      // The id of a wizard to which the entry should be hooked.\n      wizardId: &#39;wizardId&#39;,\n      // The container component is responsible for handling subsequent steps in the wizard.\n      component: ContainerComponent,\n      // Menu entry name\n      name: &#39;Upload application&#39;,\n      // Menu entry icon\n      c8yIcon: &#39;upload&#39;\n    })\n  ]\n})\nexport class YourModule {}</code></pre></div><h4>Configuration of the container component passed in the hookWizard</h4>\n<p>Component responsible for handling subsequent steps in the wizard.</p>\n<p>Use <strong><em>c8y-wizard-header</em></strong>, <strong><em>c8y-wizard-body</em></strong> and <strong><em>c8y-wizard-footer</em></strong> in your custom component to maintain the correct layout.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-ts\">import { Component } from &#39;&#64;angular/core&#39;;\nimport { WizardComponent } from &#39;&#64;c8y/ngx-components&#39;;\n\n&#64;Component({\n  selector: &#39;container-component&#39;,\n  template: `\n    &lt;c8y-wizard-header&gt;\n      New header content\n    &lt;/div&gt;\n    &lt;/c8y-wizard-header&gt;\n    &lt;c8y-wizard-body&gt;\n      New body content\n    &lt;/c8y-wizard-body&gt;\n    &lt;c8y-wizard-footer&gt;\n      &lt;button\n        (click)=&quot;back()&quot;\n      &gt;\n        Back\n      &lt;/button&gt;\n\n      &lt;button \n        (click)=&quot;cancel()&quot;\n      &gt;\n        Cancel\n      &lt;/button&gt;\n    &lt;/c8y-wizard-footer&gt;\n  `\n})\nexport class ContainerComponent {\n  attributeToBePassed: string;\n\n  constructor(private wizardComponent: WizardComponent) {}\n\n  back() {\n    const result: any = &#39;dataToBeEmittedOnReset&#39;;\n    this.wizardComponent.reset(result);\n  }\n\n  cancel() {\n    const result: any = &#39;dataToBeEmittedOnClose&#39;;\n    this.wizardComponent.close(result);\n  }\n}</code></pre></div><h3>Handling selected menu entries via the initial state</h3>\n<p>The wizard component provides outputs that allow you to handle the selected menu entry, reset and close events.</p>\n<h4>Initial state approach</h4>\n<p><strong>component-with-wizard.component.ts</strong></p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-ts\">import { Component } from &#39;&#64;angular/core&#39;;\nimport { WizardEntry, WizardConfig, Wizard, WizardModalService } from &#39;&#64;c8y/ngx-components&#39;;\nimport { CustomComponent } from &#39;./custom.component.ts&#39;;\nimport { takeUntil } from &#39;rxjs/operators&#39;;\nimport { ModalOptions } from &#39;ngx-bootstrap/modal&#39;;\n\n&#64;Component({\n  selector: &#39;wizard-demo&#39;\n})\nexport class WizardDemoComponent {\n  destroy$: Subject&lt;boolean&gt; = new Subject&lt;boolean&gt;();\n\n  constructor(private c8yWizardModalService: WizardModalService) {}\n\n  onButtonClick() {\n    const wizardConfig: WizardConfig = {\n      headerIcon: &#39;c8y-icon-modules&#39;,\n      headerText: &#39;Wizard header&#39;,\n      bodyHeaderText: &#39;Body section header&#39;\n    };\n\n    const initialState: Wizard&lt;ContainerComponent&gt; = {\n      id: &#39;wizardId&#39;,\n      wizardConfig,\n      componentState: {\n        attributeToBePassed: &#39;Some sample text&#39;\n      }\n    };\n    const modalOptions: ModalOptions = { initialState };\n\n    const modalRef = this.c8yWizardModalService.show(modalOptions);\n\n    modalRef.content.onSelect.pipe(takeUntil(this.destroy$)).subscribe(menuEntry =&gt; {\n      // handle menu entry\n    });\n\n    modalRef.content.onClose.pipe(takeUntil(this.destroy$)).subscribe(result =&gt; {\n      // handle result\n    });\n\n    modalRef.content.onReset.pipe(takeUntil(this.destroy$)).subscribe(result =&gt; {\n      // handle result\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next(true);\n    this.destroy$.unsubscribe();\n  }\n}</code></pre></div>"}