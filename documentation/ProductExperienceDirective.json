{"name":"ProductExperienceDirective","id":"directive-ProductExperienceDirective-2ac24e23e121edbb7f6aa55d3a861af1b1828884573e9242ab69498f707def38b0892b17d304bb9183bfc4acfcf8797bc2ef63cfd1dd9d8621f93ffbe38352ca","file":"core/product-experience/product-experience.directive.ts","type":"directive","description":"","rawdescription":"\n","selector":"[c8yProductExperience]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[{"name":"actionData","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nData that will be used as event properties.\n","description":"<p>Data that will be used as event properties.</p>\n","line":21,"type":"object","decorators":[]},{"name":"actionName","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nA value that will be used as a custom event name.\n","description":"<p>A value that will be used as a custom event name.</p>\n","line":17,"type":"string","decorators":[]},{"name":"inherit","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nIf set to <code>true</code>, <code>actionName</code> and <code>actionData</code> will be\ninherited from the parent component if it has the <code>c8yProductExperience</code> applied to it.\nWith <code>inherit</code> set to <code>true</code> the local <code>actionName</code> value is\nignored and overriden by the parent component's <code>actionName</code>. This allows for easy\nre-use of core components (e.g. <code>&lt;c8y-li-action&gt;</code>) that would use the inherited\naction name rather than their generic action name. Own <code>actionData</code> properties with\nthe same name take precedence to those inheritted from the parent component.\n","description":"<p>If set to <code>true</code>, <code>actionName</code> and <code>actionData</code> will be\ninherited from the parent component if it has the <code>c8yProductExperience</code> applied to it.\nWith <code>inherit</code> set to <code>true</code> the local <code>actionName</code> value is\nignored and overriden by the parent component&#39;s <code>actionName</code>. This allows for easy\nre-use of core components (e.g. <code>&lt;c8y-li-action&gt;</code>) that would use the inherited\naction name rather than their generic action name. Own <code>actionData</code> properties with\nthe same name take precedence to those inheritted from the parent component.</p>\n","line":31,"type":"any","decorators":[]},{"name":"suppressDataOverriding","deprecated":false,"deprecationMessage":"","rawdescription":"\n\nIf set to <code>true</code> own <code>actionData</code> properties would not override\n<code>actionData</code> properties of the parent component. Instead, values will be\ninherited from the parent component. It is only effective if <code>inherit</code>\nis set to <code>true</code>.\n","description":"<p>If set to <code>true</code> own <code>actionData</code> properties would not override\n<code>actionData</code> properties of the parent component. Instead, values will be\ninherited from the parent component. It is only effective if <code>inherit</code>\nis set to <code>true</code>.</p>\n","line":41,"type":"any","decorators":[]}],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[{"name":"click","args":[],"argsDecorator":[],"deprecated":false,"deprecationMessage":"","line":61}],"propertiesClass":[],"methodsClass":[{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":71,"deprecated":false,"deprecationMessage":""},{"name":"onClick","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":61,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"'click'"}],"modifierKind":[170]}],"extends":[],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"component","type":"ProductExperienceEventSource","deprecated":false,"deprecationMessage":""},{"name":"parentEventSource","type":"ProductExperienceEventSource","deprecated":false,"deprecationMessage":""},{"name":"gainsightService","type":"GainsightService","deprecated":false,"deprecationMessage":""}],"line":46,"jsdoctags":[{"name":"component","type":"ProductExperienceEventSource","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"parentEventSource","type":"ProductExperienceEventSource","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"gainsightService","type":"GainsightService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"accessors":{"_inherit":{"name":"_inherit","setSignature":{"name":"_inherit","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"inherit","type":"","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":31,"rawdescription":"\n\nIf set to <code>true</code>, <code>actionName</code> and <code>actionData</code> will be\ninherited from the parent component if it has the <code>c8yProductExperience</code> applied to it.\nWith <code>inherit</code> set to <code>true</code> the local <code>actionName</code> value is\nignored and overriden by the parent component's <code>actionName</code>. This allows for easy\nre-use of core components (e.g. <code>&lt;c8y-li-action&gt;</code>) that would use the inherited\naction name rather than their generic action name. Own <code>actionData</code> properties with\nthe same name take precedence to those inheritted from the parent component.\n","description":"<p>If set to <code>true</code>, <code>actionName</code> and <code>actionData</code> will be\ninherited from the parent component if it has the <code>c8yProductExperience</code> applied to it.\nWith <code>inherit</code> set to <code>true</code> the local <code>actionName</code> value is\nignored and overriden by the parent component&#39;s <code>actionName</code>. This allows for easy\nre-use of core components (e.g. <code>&lt;c8y-li-action&gt;</code>) that would use the inherited\naction name rather than their generic action name. Own <code>actionData</code> properties with\nthe same name take precedence to those inheritted from the parent component.</p>\n","jsdoctags":[{"name":"inherit","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"_suppressDataOverriding":{"name":"_suppressDataOverriding","setSignature":{"name":"_suppressDataOverriding","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"suppressDataOverriding","type":"","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":41,"rawdescription":"\n\nIf set to <code>true</code> own <code>actionData</code> properties would not override\n<code>actionData</code> properties of the parent component. Instead, values will be\ninherited from the parent component. It is only effective if <code>inherit</code>\nis set to <code>true</code>.\n","description":"<p>If set to <code>true</code> own <code>actionData</code> properties would not override\n<code>actionData</code> properties of the parent component. Instead, values will be\ninherited from the parent component. It is only effective if <code>inherit</code>\nis set to <code>true</code>.</p>\n","jsdoctags":[{"name":"suppressDataOverriding","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}},"readme":"<h2>Product experience directive</h2>\n<p>A directive that lets you easily integrate product experience tracking in your code. It can be applied to any component or HTML element and trigger events when those elements are clicked. Or you can implement more complex scenarios in your re-usable and/or business layer components by using the features of a <a href=\"../interfaces/ProductExperienceEventSource.html\">ProductExperienceEventSource</a>.</p>\n<h2>Usage</h2>\n<h3>Simple HTML elements</h3>\n<p>When applied to HTML elements or components that do not implement any specific behavior as product experience source (see below), the directive will emit a product experience event whenever a click is executed on the element or bubbles up to that element/component. You must provide an action name and can optionally provide any object as action data:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;button\n  title=&quot;Save&quot;\n  type=&quot;submit&quot;\n  c8yProductExperience\n  [actionName]=&quot;&#39;editWidget&#39;&quot;\n  [actionData]=&quot;{ widgetName: widget.id }&quot;\n&gt;\n  Save\n&lt;/button&gt;</code></pre></div><h3>Components implementing ProductExperienceEventSource</h3>\n<p>In situations where you want your component to emit product experience events on other triggers that the <code>click</code> event, to emit events on multiple triggers or to add additional context data to its events, you can implement the <a href=\"../interfaces/ProductExperienceEventSource.html\">ProductExperienceEventSource</a> interface:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-js\">&#64;Component({\n  selector: &#39;c8y-stepper&#39;,\n  templateUrl: &#39;./stepper.component.html&#39;,\n  providers: [\n    { provide: PRODUCT_EXPERIENCE_EVENT_SOURCE, useExisting: forwardRef(() =&gt; C8yStepper) }\n  ]\n})\nexport class C8yStepper implements ProductExperienceEventSource {\n  productExperienceEvent: ProductExperienceEvent;\n}</code></pre></div><p>When the <code>c8yProductExperience</code> directive is applied to components implementing <a href=\"../interfaces/ProductExperienceEventSource.html\">ProductExperienceEventSource</a> its default behavior of emitting product experience event on click is suppressed. Instead you can control when such an event will be triggered:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-js\">onNext() {\n  this.triggerEvent(&#39;clickNextBtn&#39;);\n}\n\nprivate triggerEvent(action: string): void {\n// you can add any additional context data to your events...\nconst eventData = {\n    ...this.productExperienceEvent?.data,\n    action,\n    step: this.step.label\n};\n// ...provide a default action name...\nconst eventName = this.productExperienceEvent?.eventName || &#39;anyDefaultEventName&#39;;\n// ... and then send the event to the PX platform.\nthis.gainsightService.triggerEvent(eventName, eventData);\n}</code></pre></div><h3>Inheriting data</h3>\n<p>When implementing more complex business or other re-usable components you may use other components implementing <a href=\"../interfaces/ProductExperienceEventSource.html\">ProductExperienceEventSource</a>. To let you pass your event data down the path more easily, <code>c8yProductExperience</code> supports inheriting data passed from parent components:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-js\">&#64;Component({\n  selector: &#39;save-btn&#39;,\n  template: `\n    &lt;button\n      title=&quot;Save&quot;\n      type=&quot;submit&quot;\n      c8yProductExperience\n      inherit\n      [actionData]=&quot;{ action: &#39;Save&#39; }&quot;\n    &gt;\n      Save\n    &lt;/button&gt;\n  `,\n  providers: [\n    { provide: PRODUCT_EXPERIENCE_EVENT_SOURCE, useExisting: forwardRef(() =&gt; C8yStepper) }\n  ]\n})\nexport class SaveBtnComponent implements ProductExperienceEventSource {\n  productExperienceEvent: ProductExperienceEvent;\n}</code></pre></div><p>In the above example, the <code>SaveBtnComponent</code> uses the <code>c8yProductExperience</code> directive in its template. Instead of providing an action name it uses the <code>inherit</code> option so that the product experience event from the <code>button</code> element will use the action name passed to <code>save-btn</code>. Moreover, the event from the <code>button</code> element will extend all data provided higher in the component tree by the <code>action</code> property.</p>\n<h3>Options to control data overriding with inheritance enabled</h3>\n<h4><code>actionName</code> property</h4>\n<p>With <code>inherit</code> set to <code>true</code> the local <code>actionName</code> value is ignored and always overridden by the parent component&#39;s <code>actionName</code>. This aims at and allows for easy re-use of core components (e.g. <code>&lt;c8y-li-action&gt;</code>) that would use the inherited action name rather than their generic action name.</p>\n<h4><code>actionData</code> property</h4>\n<p>By default own <code>actionData</code> properties with the same name by default take precedence to those inherited from the parent component. Provided you use inheritance in the below example</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;operation-list\n  c8yProductExperience\n  [actionName]=&quot;&#39;operationsOverview&#39;&quot;\n  [actionData]=&quot;{\n    component: &#39;pending-operations&#39;,\n    context: &#39;example&#39;\n  }&quot;\n&gt;\n  [...]\n  &lt;c8y-li&gt;\n    [...]\n    &lt;c8y-li-action\n      [...]\n      c8yProductExperience\n      inherit\n      [actionData]=&quot;{\n        component: &#39;c8y-li-action&#39;,\n        operation: operation.id\n      }&quot;\n    &gt;&lt;/c8y-li-action&gt;\n  &lt;/c8y-li&gt;\n  [...]\n&lt;/operation-list&gt;</code></pre></div><p>the <code>c8y-li-action</code> component will emit events looking like this:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-js\">{\n  eventName: &#39;operationsOverview&#39;,\n  data: {\n    component: &#39;c8y-li-action&#39;,\n    context: &#39;example&#39;,\n    operation: 541,\n    [...]\n  }\n}</code></pre></div><p><code>c8y-li-action</code> inherits the <code>component</code> and <code>context</code> <code>actionData</code> properties from its parent component <code>operation-list</code> but since it has an own value for <code>component</code> the inherited value <code>&#39;pending-operations&#39;</code> gets overridden by its own value <code>&#39;c8y-li-action&#39;</code>.</p>\n<p>There may be situations where you may want to change this default behavior and let your child components specific <code>actionData</code> properties get replaced by the inherited values. You can change the default behavior by using the <code>suppressDataOverriding</code> input. If set to <code>true</code> own <code>actionData</code> properties would not override <code>actionData</code> properties of the parent component with the same name. Instead, values will be inherited from the parent component. It is only effective if <code>inherit</code> is set to <code>true</code>. If you add <code>suppressDataOverriding</code> to the above example</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;operation-list\n  c8yProductExperience\n  [actionName]=&quot;&#39;operationsOverview&#39;&quot;\n  [actionData]=&quot;{\n    component: &#39;pending-operations&#39;,\n    context: &#39;example&#39;\n  }&quot;\n&gt;\n  [...]\n  &lt;c8y-li&gt;\n    [...]\n    &lt;c8y-li-action\n      [...]\n      c8yProductExperience\n      inherit\n      suppressDataOverriding\n      [actionData]=&quot;{\n        component: &#39;c8y-li-action&#39;,\n        operation: operation.id\n      }&quot;\n    &gt;&lt;/c8y-li-action&gt;\n  &lt;/c8y-li&gt;\n  [...]\n&lt;/operation-list&gt;</code></pre></div><p>the <code>c8y-li-action</code> component will emit events looking like this:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-js\">{\n  eventName: &#39;operationsOverview&#39;,\n  data: {\n    component: &#39;pending-operations&#39;,\n    context: &#39;example&#39;,\n    operation: 541,\n    [...]\n  }\n}</code></pre></div><p><code>c8y-li-action</code> inherits the <code>component</code> and <code>context</code> <code>actionData</code> properties from its parent component <code>operation-list</code> and its own value for <code>component</code> gets replaced by the inherited value <code>&#39;pending-operations&#39;</code>.</p>\n"}